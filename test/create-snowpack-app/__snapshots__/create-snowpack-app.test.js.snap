// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create-snowpack-app app-template-11ty > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-11ty > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\": {
      \\"bytes\\": 16214,
      \\"imports\\": []
    },
    \\"PKG/canvas-XXXXXXXX.js\\": {
      \\"bytes\\": 249,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/canvas-XXXXXXXX.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 25662
    },
    \\"build/_snowpack/pkg/canvas-XXXXXXXX.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"default\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\": {
          \\"bytesInOutput\\": 15155
        },
        \\"PKG/canvas-XXXXXXXX.js\\": {
          \\"bytesInOutput\\": 55
        }
      },
      \\"bytes\\": 15393
    }
  }
}"
`;

exports[`create-snowpack-app app-template-11ty > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\":{\\"bytes\\":16214,\\"imports\\":[]},\\"PKG/canvas-XXXXXXXX.js\\":{\\"bytes\\":249,\\"imports\\":[{\\"path\\":\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/canvas-XXXXXXXX.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":25662},\\"build/_snowpack/pkg/canvas-XXXXXXXX.js\\":{\\"imports\\":[],\\"exports\\":[\\"default\\"],\\"inputs\\":{\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\":{\\"bytesInOutput\\":15155},\\"PKG/canvas-XXXXXXXX.js\\":{\\"bytesInOutput\\":55}},\\"bytes\\":15393}}};
export default json;"
`;

exports[`create-snowpack-app app-template-11ty > build: _snowpack/pkg/canvas-confetti.js 1`] = `
"// ../../node_modules/canvas-confetti/dist/confetti.module.mjs
var module = {};
(function main(global, module2, isWorker, workerSize) {
  var canUseWorker = !!(global.Worker && global.Blob && global.Promise && global.OffscreenCanvas && global.OffscreenCanvasRenderingContext2D && global.HTMLCanvasElement && global.HTMLCanvasElement.prototype.transferControlToOffscreen && global.URL && global.URL.createObjectURL);
  function noop() {
  }
  function promise(func) {
    var ModulePromise = module2.exports.Promise;
    var Prom = ModulePromise !== void 0 ? ModulePromise : global.Promise;
    if (typeof Prom === \\"function\\") {
      return new Prom(func);
    }
    func(noop, noop);
    return null;
  }
  var raf = function() {
    var TIME = Math.floor(1e3 / 60);
    var frame, cancel;
    var frames = {};
    var lastFrameTime = 0;
    if (typeof requestAnimationFrame === \\"function\\" && typeof cancelAnimationFrame === \\"function\\") {
      frame = function(cb) {
        var id = Math.random();
        frames[id] = requestAnimationFrame(function onFrame(time) {
          if (lastFrameTime === time || lastFrameTime + TIME - 1 < time) {
            lastFrameTime = time;
            delete frames[id];
            cb();
          } else {
            frames[id] = requestAnimationFrame(onFrame);
          }
        });
        return id;
      };
      cancel = function(id) {
        if (frames[id]) {
          cancelAnimationFrame(frames[id]);
        }
      };
    } else {
      frame = function(cb) {
        return setTimeout(cb, TIME);
      };
      cancel = function(timer) {
        return clearTimeout(timer);
      };
    }
    return {frame, cancel};
  }();
  var getWorker = function() {
    var worker;
    var prom;
    var resolves = {};
    function decorate(worker2) {
      function execute(options, callback) {
        worker2.postMessage({options: options || {}, callback});
      }
      worker2.init = function initWorker(canvas) {
        var offscreen = canvas.transferControlToOffscreen();
        worker2.postMessage({canvas: offscreen}, [offscreen]);
      };
      worker2.fire = function fireWorker(options, size, done) {
        if (prom) {
          execute(options, null);
          return prom;
        }
        var id = Math.random().toString(36).slice(2);
        prom = promise(function(resolve) {
          function workerDone(msg) {
            if (msg.data.callback !== id) {
              return;
            }
            delete resolves[id];
            worker2.removeEventListener(\\"message\\", workerDone);
            prom = null;
            done();
            resolve();
          }
          worker2.addEventListener(\\"message\\", workerDone);
          execute(options, id);
          resolves[id] = workerDone.bind(null, {data: {callback: id}});
        });
        return prom;
      };
      worker2.reset = function resetWorker() {
        worker2.postMessage({reset: true});
        for (var id in resolves) {
          resolves[id]();
          delete resolves[id];
        }
      };
    }
    return function() {
      if (worker) {
        return worker;
      }
      if (!isWorker && canUseWorker) {
        var code = [
          \\"var CONFETTI, SIZE = {}, module = {};\\",
          \\"(\\" + main.toString() + \\")(this, module, true, SIZE);\\",
          \\"onmessage = function(msg) {\\",
          \\"  if (msg.data.options) {\\",
          \\"    CONFETTI(msg.data.options).then(function () {\\",
          \\"      if (msg.data.callback) {\\",
          \\"        postMessage({ callback: msg.data.callback });\\",
          \\"      }\\",
          \\"    });\\",
          \\"  } else if (msg.data.reset) {\\",
          \\"    CONFETTI.reset();\\",
          \\"  } else if (msg.data.resize) {\\",
          \\"    SIZE.width = msg.data.resize.width;\\",
          \\"    SIZE.height = msg.data.resize.height;\\",
          \\"  } else if (msg.data.canvas) {\\",
          \\"    SIZE.width = msg.data.canvas.width;\\",
          \\"    SIZE.height = msg.data.canvas.height;\\",
          \\"    CONFETTI = module.exports.create(msg.data.canvas);\\",
          \\"  }\\",
          \\"}\\"
        ].join(\\"\\");
        try {
          worker = new Worker(URL.createObjectURL(new Blob([code])));
        } catch (e) {
          typeof console !== void 0 && typeof console.warn === \\"function\\" ? console.warn(\\"\\\\u{1F38A} Could not load worker\\", e) : null;
          return null;
        }
        decorate(worker);
      }
      return worker;
    };
  }();
  var defaults = {
    particleCount: 50,
    angle: 90,
    spread: 45,
    startVelocity: 45,
    decay: 0.9,
    gravity: 1,
    ticks: 200,
    x: 0.5,
    y: 0.5,
    shapes: [\\"square\\", \\"circle\\"],
    zIndex: 100,
    colors: [
      \\"#26ccff\\",
      \\"#a25afd\\",
      \\"#ff5e7e\\",
      \\"#88ff5a\\",
      \\"#fcff42\\",
      \\"#ffa62d\\",
      \\"#ff36ff\\"
    ],
    disableForReducedMotion: false,
    scalar: 1
  };
  function convert(val, transform) {
    return transform ? transform(val) : val;
  }
  function isOk(val) {
    return !(val === null || val === void 0);
  }
  function prop(options, name, transform) {
    return convert(options && isOk(options[name]) ? options[name] : defaults[name], transform);
  }
  function onlyPositiveInt(number) {
    return number < 0 ? 0 : Math.floor(number);
  }
  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  }
  function toDecimal(str) {
    return parseInt(str, 16);
  }
  function hexToRgb(str) {
    var val = String(str).replace(/[^0-9a-f]/gi, \\"\\");
    if (val.length < 6) {
      val = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];
    }
    return {
      r: toDecimal(val.substring(0, 2)),
      g: toDecimal(val.substring(2, 4)),
      b: toDecimal(val.substring(4, 6))
    };
  }
  function getOrigin(options) {
    var origin = prop(options, \\"origin\\", Object);
    origin.x = prop(origin, \\"x\\", Number);
    origin.y = prop(origin, \\"y\\", Number);
    return origin;
  }
  function setCanvasWindowSize(canvas) {
    canvas.width = document.documentElement.clientWidth;
    canvas.height = document.documentElement.clientHeight;
  }
  function setCanvasRectSize(canvas) {
    var rect = canvas.getBoundingClientRect();
    canvas.width = rect.width;
    canvas.height = rect.height;
  }
  function getCanvas(zIndex) {
    var canvas = document.createElement(\\"canvas\\");
    canvas.style.position = \\"fixed\\";
    canvas.style.top = \\"0px\\";
    canvas.style.left = \\"0px\\";
    canvas.style.pointerEvents = \\"none\\";
    canvas.style.zIndex = zIndex;
    return canvas;
  }
  function ellipse(context, x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {
    context.save();
    context.translate(x, y);
    context.rotate(rotation);
    context.scale(radiusX, radiusY);
    context.arc(0, 0, 1, startAngle, endAngle, antiClockwise);
    context.restore();
  }
  function randomPhysics(opts) {
    var radAngle = opts.angle * (Math.PI / 180);
    var radSpread = opts.spread * (Math.PI / 180);
    return {
      x: opts.x,
      y: opts.y,
      wobble: Math.random() * 10,
      velocity: opts.startVelocity * 0.5 + Math.random() * opts.startVelocity,
      angle2D: -radAngle + (0.5 * radSpread - Math.random() * radSpread),
      tiltAngle: Math.random() * Math.PI,
      color: hexToRgb(opts.color),
      shape: opts.shape,
      tick: 0,
      totalTicks: opts.ticks,
      decay: opts.decay,
      random: Math.random() + 5,
      tiltSin: 0,
      tiltCos: 0,
      wobbleX: 0,
      wobbleY: 0,
      gravity: opts.gravity * 3,
      ovalScalar: 0.6,
      scalar: opts.scalar
    };
  }
  function updateFetti(context, fetti) {
    fetti.x += Math.cos(fetti.angle2D) * fetti.velocity;
    fetti.y += Math.sin(fetti.angle2D) * fetti.velocity + fetti.gravity;
    fetti.wobble += 0.1;
    fetti.velocity *= fetti.decay;
    fetti.tiltAngle += 0.1;
    fetti.tiltSin = Math.sin(fetti.tiltAngle);
    fetti.tiltCos = Math.cos(fetti.tiltAngle);
    fetti.random = Math.random() + 5;
    fetti.wobbleX = fetti.x + 10 * fetti.scalar * Math.cos(fetti.wobble);
    fetti.wobbleY = fetti.y + 10 * fetti.scalar * Math.sin(fetti.wobble);
    var progress = fetti.tick++ / fetti.totalTicks;
    var x1 = fetti.x + fetti.random * fetti.tiltCos;
    var y1 = fetti.y + fetti.random * fetti.tiltSin;
    var x2 = fetti.wobbleX + fetti.random * fetti.tiltCos;
    var y2 = fetti.wobbleY + fetti.random * fetti.tiltSin;
    context.fillStyle = \\"rgba(\\" + fetti.color.r + \\", \\" + fetti.color.g + \\", \\" + fetti.color.b + \\", \\" + (1 - progress) + \\")\\";
    context.beginPath();
    if (fetti.shape === \\"circle\\") {
      context.ellipse ? context.ellipse(fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI) : ellipse(context, fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI);
    } else {
      context.moveTo(Math.floor(fetti.x), Math.floor(fetti.y));
      context.lineTo(Math.floor(fetti.wobbleX), Math.floor(y1));
      context.lineTo(Math.floor(x2), Math.floor(y2));
      context.lineTo(Math.floor(x1), Math.floor(fetti.wobbleY));
    }
    context.closePath();
    context.fill();
    return fetti.tick < fetti.totalTicks;
  }
  function animate(canvas, fettis, resizer, size, done) {
    var animatingFettis = fettis.slice();
    var context = canvas.getContext(\\"2d\\");
    var animationFrame;
    var destroy;
    var prom = promise(function(resolve) {
      function onDone() {
        animationFrame = destroy = null;
        context.clearRect(0, 0, size.width, size.height);
        done();
        resolve();
      }
      function update() {
        if (isWorker && !(size.width === workerSize.width && size.height === workerSize.height)) {
          size.width = canvas.width = workerSize.width;
          size.height = canvas.height = workerSize.height;
        }
        if (!size.width && !size.height) {
          resizer(canvas);
          size.width = canvas.width;
          size.height = canvas.height;
        }
        context.clearRect(0, 0, size.width, size.height);
        animatingFettis = animatingFettis.filter(function(fetti) {
          return updateFetti(context, fetti);
        });
        if (animatingFettis.length) {
          animationFrame = raf.frame(update);
        } else {
          onDone();
        }
      }
      animationFrame = raf.frame(update);
      destroy = onDone;
    });
    return {
      addFettis: function(fettis2) {
        animatingFettis = animatingFettis.concat(fettis2);
        return prom;
      },
      canvas,
      promise: prom,
      reset: function() {
        if (animationFrame) {
          raf.cancel(animationFrame);
        }
        if (destroy) {
          destroy();
        }
      }
    };
  }
  function confettiCannon(canvas, globalOpts) {
    var isLibCanvas = !canvas;
    var allowResize = !!prop(globalOpts || {}, \\"resize\\");
    var globalDisableForReducedMotion = prop(globalOpts, \\"disableForReducedMotion\\", Boolean);
    var shouldUseWorker = canUseWorker && !!prop(globalOpts || {}, \\"useWorker\\");
    var worker = shouldUseWorker ? getWorker() : null;
    var resizer = isLibCanvas ? setCanvasWindowSize : setCanvasRectSize;
    var initialized = canvas && worker ? !!canvas.__confetti_initialized : false;
    var preferLessMotion = typeof matchMedia === \\"function\\" && matchMedia(\\"(prefers-reduced-motion)\\").matches;
    var animationObj;
    function fireLocal(options, size, done) {
      var particleCount = prop(options, \\"particleCount\\", onlyPositiveInt);
      var angle = prop(options, \\"angle\\", Number);
      var spread = prop(options, \\"spread\\", Number);
      var startVelocity = prop(options, \\"startVelocity\\", Number);
      var decay = prop(options, \\"decay\\", Number);
      var gravity = prop(options, \\"gravity\\", Number);
      var colors = prop(options, \\"colors\\");
      var ticks = prop(options, \\"ticks\\", Number);
      var shapes = prop(options, \\"shapes\\");
      var scalar = prop(options, \\"scalar\\");
      var origin = getOrigin(options);
      var temp = particleCount;
      var fettis = [];
      var startX = canvas.width * origin.x;
      var startY = canvas.height * origin.y;
      while (temp--) {
        fettis.push(randomPhysics({
          x: startX,
          y: startY,
          angle,
          spread,
          startVelocity,
          color: colors[temp % colors.length],
          shape: shapes[randomInt(0, shapes.length)],
          ticks,
          decay,
          gravity,
          scalar
        }));
      }
      if (animationObj) {
        return animationObj.addFettis(fettis);
      }
      animationObj = animate(canvas, fettis, resizer, size, done);
      return animationObj.promise;
    }
    function fire(options) {
      var disableForReducedMotion = globalDisableForReducedMotion || prop(options, \\"disableForReducedMotion\\", Boolean);
      var zIndex = prop(options, \\"zIndex\\", Number);
      if (disableForReducedMotion && preferLessMotion) {
        return promise(function(resolve) {
          resolve();
        });
      }
      if (isLibCanvas && animationObj) {
        canvas = animationObj.canvas;
      } else if (isLibCanvas && !canvas) {
        canvas = getCanvas(zIndex);
        document.body.appendChild(canvas);
      }
      if (allowResize && !initialized) {
        resizer(canvas);
      }
      var size = {
        width: canvas.width,
        height: canvas.height
      };
      if (worker && !initialized) {
        worker.init(canvas);
      }
      initialized = true;
      if (worker) {
        canvas.__confetti_initialized = true;
      }
      function onResize() {
        if (worker) {
          var obj = {
            getBoundingClientRect: function() {
              if (!isLibCanvas) {
                return canvas.getBoundingClientRect();
              }
            }
          };
          resizer(obj);
          worker.postMessage({
            resize: {
              width: obj.width,
              height: obj.height
            }
          });
          return;
        }
        size.width = size.height = null;
      }
      function done() {
        animationObj = null;
        if (allowResize) {
          global.removeEventListener(\\"resize\\", onResize);
        }
        if (isLibCanvas && canvas) {
          document.body.removeChild(canvas);
          canvas = null;
          initialized = false;
        }
      }
      if (allowResize) {
        global.addEventListener(\\"resize\\", onResize, false);
      }
      if (worker) {
        return worker.fire(options, size, done);
      }
      return fireLocal(options, size, done);
    }
    fire.reset = function() {
      if (worker) {
        worker.reset();
      }
      if (animationObj) {
        animationObj.reset();
      }
    };
    return fire;
  }
  module2.exports = confettiCannon(null, {useWorker: true, resize: true});
  module2.exports.create = confettiCannon;
})(function() {
  if (typeof window !== \\"undefined\\") {
    return window;
  }
  if (typeof self !== \\"undefined\\") {
    return self;
  }
  return this;
}(), module, false);
var confetti_module_default = module.exports;
var create = module.exports.create;
// PKG/canvas-XXXXXXXX.js
var canvas_confetti_default = confetti_module_default;
export {
  canvas_confetti_default as default
};
//# sourceMappingURL=canvas-XXXXXXXX.js.map"
`;

exports[`create-snowpack-app app-template-11ty > build: _snowpack/pkg/canvas-confetti.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/canvas-XXXXXXXX.js.map\\";"`;

exports[`create-snowpack-app app-template-11ty > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"canvas-confetti\\": \\"./canvas-XXXXXXXX.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-11ty > build: about/index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/static/favicon.png\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/static/index.css\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <div class=\\"banner\\">
      <img height=\\"128px\\" style=\\"padding-right: 0\\" id=\\"img\\" src=\\"/static/logo.svg\\" />
      <svg height=\\"32px\\" aria-hidden=\\"true\\" focusable=\\"false\\" data-prefix=\\"fas\\" data-icon=\\"plus\\" class=\\"svg-inline--fa fa-plus fa-w-14\\" role=\\"img\\" xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 448 512\\"><path fill=\\"currentColor\\" d=\\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\\"></path></svg>
      <svg height=\\"64px\\" style=\\"padding-left: 8px;\\" viewBox=\\"0 0 640 512\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">
        <g id=\\"Page-1\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\">
            <g id=\\"mountain-solid\\" transform=\\"translate(-1.000000, 0.000000)\\" fill-rule=\\"nonzero\\">
                <path d=\\"M635.92,462.7 L347.92,14.7 C342.03,5.54 331.89,0 321,0 C310.11,0 299.97,5.54 294.08,14.7 L6.08,462.7 C-0.250773249,472.547007 -0.699487627,485.064987 4.91,495.34 C10.522069,505.612419 21.2945349,512 33,512 L609,512 C620.71,512 631.48,505.61 637.09,495.33 C642.699457,485.058495 642.250708,472.543372 635.92,462.7 Z M321,91.18 L406.39,224 L321,224 L257,288 L218.94,249.94 L321,91.18 Z\\" id=\\"Shape\\"></path>
            </g>
        </g>
      </svg>
    </div>
    <h1>About</h1>
<p><a href=\\"https://www.11ty.dev/\\">11ty</a>, powered by <a href=\\"http://snowpack.dev/\\">Snowpack</a>.</p>
<br/>
<p><a href=\\"/\\">Back to Home</a></p>
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-11ty > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/canvas-confetti.js",
  "_snowpack/pkg/canvas-confetti.js.map",
  "_snowpack/pkg/canvas-confetti.js.map.proxy.js",
  "_snowpack/pkg/import-map.json",
  "about/index.html",
  "dist/index.js",
  "index.html",
  "static/favicon.png",
  "static/index.css",
  "static/logo.svg",
]
`;

exports[`create-snowpack-app app-template-11ty > build: dist/index.js 1`] = `
"/**
 * This file is just a silly example to show everything working in the browser.
 * When you're ready to start on your site, clear the file. Happy hacking!
 **/
import confetti from '../_snowpack/pkg/canvas-XXXXXXXX.js';
confetti.create(document.getElementById('canvas'), {
  resize: true,
  useWorker: true,
})({ particleCount: 200, spread: 200 });"
`;

exports[`create-snowpack-app app-template-11ty > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/static/favicon.png\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/static/index.css\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <div class=\\"banner\\">
      <img height=\\"128px\\" style=\\"padding-right: 0\\" id=\\"img\\" src=\\"/static/logo.svg\\" />
      <svg height=\\"32px\\" aria-hidden=\\"true\\" focusable=\\"false\\" data-prefix=\\"fas\\" data-icon=\\"plus\\" class=\\"svg-inline--fa fa-plus fa-w-14\\" role=\\"img\\" xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 448 512\\"><path fill=\\"currentColor\\" d=\\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\\"></path></svg>
      <svg height=\\"64px\\" style=\\"padding-left: 8px;\\" viewBox=\\"0 0 640 512\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">
        <g id=\\"Page-1\\" stroke=\\"none\\" stroke-width=\\"1\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\">
            <g id=\\"mountain-solid\\" transform=\\"translate(-1.000000, 0.000000)\\" fill-rule=\\"nonzero\\">
                <path d=\\"M635.92,462.7 L347.92,14.7 C342.03,5.54 331.89,0 321,0 C310.11,0 299.97,5.54 294.08,14.7 L6.08,462.7 C-0.250773249,472.547007 -0.699487627,485.064987 4.91,495.34 C10.522069,505.612419 21.2945349,512 33,512 L609,512 C620.71,512 631.48,505.61 637.09,495.33 C642.699457,485.058495 642.250708,472.543372 635.92,462.7 Z M321,91.18 L406.39,224 L321,224 L257,288 L218.94,249.94 L321,91.18 Z\\" id=\\"Shape\\"></path>
            </g>
        </g>
      </svg>
    </div>
<canvas id=\\"canvas\\"></canvas>
<script type=\\"module\\" src=\\"/dist/index.js\\"></script>
<a href=\\"/about\\">About Page</a>
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-11ty > build: static/index.css 1`] = `
"body {
  background: #222;
  color: #eee;
  font-family: Arial, Helvetica, sans-serif;
  text-align: center;
}
a {
  color: #aaa;
}
.banner {
  display: flex;
  justify-content: center;
  align-items: center;
}
.banner img,
.banner svg {
  display: block;
  padding: 1.5rem;
}
#canvas {
  display: block;
  margin: 0rem auto;
  width: 720px;
  height: 420px;
}"
`;

exports[`create-snowpack-app app-template-blank > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-blank > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\": {
      \\"bytes\\": 16214,
      \\"imports\\": []
    },
    \\"PKG/canvas-XXXXXXXX.js\\": {
      \\"bytes\\": 249,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/canvas-XXXXXXXX.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 25662
    },
    \\"build/_snowpack/pkg/canvas-XXXXXXXX.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"default\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\": {
          \\"bytesInOutput\\": 15155
        },
        \\"PKG/canvas-XXXXXXXX.js\\": {
          \\"bytesInOutput\\": 55
        }
      },
      \\"bytes\\": 15393
    }
  }
}"
`;

exports[`create-snowpack-app app-template-blank > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\":{\\"bytes\\":16214,\\"imports\\":[]},\\"PKG/canvas-XXXXXXXX.js\\":{\\"bytes\\":249,\\"imports\\":[{\\"path\\":\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/canvas-XXXXXXXX.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":25662},\\"build/_snowpack/pkg/canvas-XXXXXXXX.js\\":{\\"imports\\":[],\\"exports\\":[\\"default\\"],\\"inputs\\":{\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\":{\\"bytesInOutput\\":15155},\\"PKG/canvas-XXXXXXXX.js\\":{\\"bytesInOutput\\":55}},\\"bytes\\":15393}}};
export default json;"
`;

exports[`create-snowpack-app app-template-blank > build: _snowpack/pkg/canvas-confetti.js 1`] = `
"// ../../node_modules/canvas-confetti/dist/confetti.module.mjs
var module = {};
(function main(global, module2, isWorker, workerSize) {
  var canUseWorker = !!(global.Worker && global.Blob && global.Promise && global.OffscreenCanvas && global.OffscreenCanvasRenderingContext2D && global.HTMLCanvasElement && global.HTMLCanvasElement.prototype.transferControlToOffscreen && global.URL && global.URL.createObjectURL);
  function noop() {
  }
  function promise(func) {
    var ModulePromise = module2.exports.Promise;
    var Prom = ModulePromise !== void 0 ? ModulePromise : global.Promise;
    if (typeof Prom === \\"function\\") {
      return new Prom(func);
    }
    func(noop, noop);
    return null;
  }
  var raf = function() {
    var TIME = Math.floor(1e3 / 60);
    var frame, cancel;
    var frames = {};
    var lastFrameTime = 0;
    if (typeof requestAnimationFrame === \\"function\\" && typeof cancelAnimationFrame === \\"function\\") {
      frame = function(cb) {
        var id = Math.random();
        frames[id] = requestAnimationFrame(function onFrame(time) {
          if (lastFrameTime === time || lastFrameTime + TIME - 1 < time) {
            lastFrameTime = time;
            delete frames[id];
            cb();
          } else {
            frames[id] = requestAnimationFrame(onFrame);
          }
        });
        return id;
      };
      cancel = function(id) {
        if (frames[id]) {
          cancelAnimationFrame(frames[id]);
        }
      };
    } else {
      frame = function(cb) {
        return setTimeout(cb, TIME);
      };
      cancel = function(timer) {
        return clearTimeout(timer);
      };
    }
    return {frame, cancel};
  }();
  var getWorker = function() {
    var worker;
    var prom;
    var resolves = {};
    function decorate(worker2) {
      function execute(options, callback) {
        worker2.postMessage({options: options || {}, callback});
      }
      worker2.init = function initWorker(canvas) {
        var offscreen = canvas.transferControlToOffscreen();
        worker2.postMessage({canvas: offscreen}, [offscreen]);
      };
      worker2.fire = function fireWorker(options, size, done) {
        if (prom) {
          execute(options, null);
          return prom;
        }
        var id = Math.random().toString(36).slice(2);
        prom = promise(function(resolve) {
          function workerDone(msg) {
            if (msg.data.callback !== id) {
              return;
            }
            delete resolves[id];
            worker2.removeEventListener(\\"message\\", workerDone);
            prom = null;
            done();
            resolve();
          }
          worker2.addEventListener(\\"message\\", workerDone);
          execute(options, id);
          resolves[id] = workerDone.bind(null, {data: {callback: id}});
        });
        return prom;
      };
      worker2.reset = function resetWorker() {
        worker2.postMessage({reset: true});
        for (var id in resolves) {
          resolves[id]();
          delete resolves[id];
        }
      };
    }
    return function() {
      if (worker) {
        return worker;
      }
      if (!isWorker && canUseWorker) {
        var code = [
          \\"var CONFETTI, SIZE = {}, module = {};\\",
          \\"(\\" + main.toString() + \\")(this, module, true, SIZE);\\",
          \\"onmessage = function(msg) {\\",
          \\"  if (msg.data.options) {\\",
          \\"    CONFETTI(msg.data.options).then(function () {\\",
          \\"      if (msg.data.callback) {\\",
          \\"        postMessage({ callback: msg.data.callback });\\",
          \\"      }\\",
          \\"    });\\",
          \\"  } else if (msg.data.reset) {\\",
          \\"    CONFETTI.reset();\\",
          \\"  } else if (msg.data.resize) {\\",
          \\"    SIZE.width = msg.data.resize.width;\\",
          \\"    SIZE.height = msg.data.resize.height;\\",
          \\"  } else if (msg.data.canvas) {\\",
          \\"    SIZE.width = msg.data.canvas.width;\\",
          \\"    SIZE.height = msg.data.canvas.height;\\",
          \\"    CONFETTI = module.exports.create(msg.data.canvas);\\",
          \\"  }\\",
          \\"}\\"
        ].join(\\"\\");
        try {
          worker = new Worker(URL.createObjectURL(new Blob([code])));
        } catch (e) {
          typeof console !== void 0 && typeof console.warn === \\"function\\" ? console.warn(\\"\\\\u{1F38A} Could not load worker\\", e) : null;
          return null;
        }
        decorate(worker);
      }
      return worker;
    };
  }();
  var defaults = {
    particleCount: 50,
    angle: 90,
    spread: 45,
    startVelocity: 45,
    decay: 0.9,
    gravity: 1,
    ticks: 200,
    x: 0.5,
    y: 0.5,
    shapes: [\\"square\\", \\"circle\\"],
    zIndex: 100,
    colors: [
      \\"#26ccff\\",
      \\"#a25afd\\",
      \\"#ff5e7e\\",
      \\"#88ff5a\\",
      \\"#fcff42\\",
      \\"#ffa62d\\",
      \\"#ff36ff\\"
    ],
    disableForReducedMotion: false,
    scalar: 1
  };
  function convert(val, transform) {
    return transform ? transform(val) : val;
  }
  function isOk(val) {
    return !(val === null || val === void 0);
  }
  function prop(options, name, transform) {
    return convert(options && isOk(options[name]) ? options[name] : defaults[name], transform);
  }
  function onlyPositiveInt(number) {
    return number < 0 ? 0 : Math.floor(number);
  }
  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  }
  function toDecimal(str) {
    return parseInt(str, 16);
  }
  function hexToRgb(str) {
    var val = String(str).replace(/[^0-9a-f]/gi, \\"\\");
    if (val.length < 6) {
      val = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];
    }
    return {
      r: toDecimal(val.substring(0, 2)),
      g: toDecimal(val.substring(2, 4)),
      b: toDecimal(val.substring(4, 6))
    };
  }
  function getOrigin(options) {
    var origin = prop(options, \\"origin\\", Object);
    origin.x = prop(origin, \\"x\\", Number);
    origin.y = prop(origin, \\"y\\", Number);
    return origin;
  }
  function setCanvasWindowSize(canvas) {
    canvas.width = document.documentElement.clientWidth;
    canvas.height = document.documentElement.clientHeight;
  }
  function setCanvasRectSize(canvas) {
    var rect = canvas.getBoundingClientRect();
    canvas.width = rect.width;
    canvas.height = rect.height;
  }
  function getCanvas(zIndex) {
    var canvas = document.createElement(\\"canvas\\");
    canvas.style.position = \\"fixed\\";
    canvas.style.top = \\"0px\\";
    canvas.style.left = \\"0px\\";
    canvas.style.pointerEvents = \\"none\\";
    canvas.style.zIndex = zIndex;
    return canvas;
  }
  function ellipse(context, x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {
    context.save();
    context.translate(x, y);
    context.rotate(rotation);
    context.scale(radiusX, radiusY);
    context.arc(0, 0, 1, startAngle, endAngle, antiClockwise);
    context.restore();
  }
  function randomPhysics(opts) {
    var radAngle = opts.angle * (Math.PI / 180);
    var radSpread = opts.spread * (Math.PI / 180);
    return {
      x: opts.x,
      y: opts.y,
      wobble: Math.random() * 10,
      velocity: opts.startVelocity * 0.5 + Math.random() * opts.startVelocity,
      angle2D: -radAngle + (0.5 * radSpread - Math.random() * radSpread),
      tiltAngle: Math.random() * Math.PI,
      color: hexToRgb(opts.color),
      shape: opts.shape,
      tick: 0,
      totalTicks: opts.ticks,
      decay: opts.decay,
      random: Math.random() + 5,
      tiltSin: 0,
      tiltCos: 0,
      wobbleX: 0,
      wobbleY: 0,
      gravity: opts.gravity * 3,
      ovalScalar: 0.6,
      scalar: opts.scalar
    };
  }
  function updateFetti(context, fetti) {
    fetti.x += Math.cos(fetti.angle2D) * fetti.velocity;
    fetti.y += Math.sin(fetti.angle2D) * fetti.velocity + fetti.gravity;
    fetti.wobble += 0.1;
    fetti.velocity *= fetti.decay;
    fetti.tiltAngle += 0.1;
    fetti.tiltSin = Math.sin(fetti.tiltAngle);
    fetti.tiltCos = Math.cos(fetti.tiltAngle);
    fetti.random = Math.random() + 5;
    fetti.wobbleX = fetti.x + 10 * fetti.scalar * Math.cos(fetti.wobble);
    fetti.wobbleY = fetti.y + 10 * fetti.scalar * Math.sin(fetti.wobble);
    var progress = fetti.tick++ / fetti.totalTicks;
    var x1 = fetti.x + fetti.random * fetti.tiltCos;
    var y1 = fetti.y + fetti.random * fetti.tiltSin;
    var x2 = fetti.wobbleX + fetti.random * fetti.tiltCos;
    var y2 = fetti.wobbleY + fetti.random * fetti.tiltSin;
    context.fillStyle = \\"rgba(\\" + fetti.color.r + \\", \\" + fetti.color.g + \\", \\" + fetti.color.b + \\", \\" + (1 - progress) + \\")\\";
    context.beginPath();
    if (fetti.shape === \\"circle\\") {
      context.ellipse ? context.ellipse(fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI) : ellipse(context, fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI);
    } else {
      context.moveTo(Math.floor(fetti.x), Math.floor(fetti.y));
      context.lineTo(Math.floor(fetti.wobbleX), Math.floor(y1));
      context.lineTo(Math.floor(x2), Math.floor(y2));
      context.lineTo(Math.floor(x1), Math.floor(fetti.wobbleY));
    }
    context.closePath();
    context.fill();
    return fetti.tick < fetti.totalTicks;
  }
  function animate(canvas, fettis, resizer, size, done) {
    var animatingFettis = fettis.slice();
    var context = canvas.getContext(\\"2d\\");
    var animationFrame;
    var destroy;
    var prom = promise(function(resolve) {
      function onDone() {
        animationFrame = destroy = null;
        context.clearRect(0, 0, size.width, size.height);
        done();
        resolve();
      }
      function update() {
        if (isWorker && !(size.width === workerSize.width && size.height === workerSize.height)) {
          size.width = canvas.width = workerSize.width;
          size.height = canvas.height = workerSize.height;
        }
        if (!size.width && !size.height) {
          resizer(canvas);
          size.width = canvas.width;
          size.height = canvas.height;
        }
        context.clearRect(0, 0, size.width, size.height);
        animatingFettis = animatingFettis.filter(function(fetti) {
          return updateFetti(context, fetti);
        });
        if (animatingFettis.length) {
          animationFrame = raf.frame(update);
        } else {
          onDone();
        }
      }
      animationFrame = raf.frame(update);
      destroy = onDone;
    });
    return {
      addFettis: function(fettis2) {
        animatingFettis = animatingFettis.concat(fettis2);
        return prom;
      },
      canvas,
      promise: prom,
      reset: function() {
        if (animationFrame) {
          raf.cancel(animationFrame);
        }
        if (destroy) {
          destroy();
        }
      }
    };
  }
  function confettiCannon(canvas, globalOpts) {
    var isLibCanvas = !canvas;
    var allowResize = !!prop(globalOpts || {}, \\"resize\\");
    var globalDisableForReducedMotion = prop(globalOpts, \\"disableForReducedMotion\\", Boolean);
    var shouldUseWorker = canUseWorker && !!prop(globalOpts || {}, \\"useWorker\\");
    var worker = shouldUseWorker ? getWorker() : null;
    var resizer = isLibCanvas ? setCanvasWindowSize : setCanvasRectSize;
    var initialized = canvas && worker ? !!canvas.__confetti_initialized : false;
    var preferLessMotion = typeof matchMedia === \\"function\\" && matchMedia(\\"(prefers-reduced-motion)\\").matches;
    var animationObj;
    function fireLocal(options, size, done) {
      var particleCount = prop(options, \\"particleCount\\", onlyPositiveInt);
      var angle = prop(options, \\"angle\\", Number);
      var spread = prop(options, \\"spread\\", Number);
      var startVelocity = prop(options, \\"startVelocity\\", Number);
      var decay = prop(options, \\"decay\\", Number);
      var gravity = prop(options, \\"gravity\\", Number);
      var colors = prop(options, \\"colors\\");
      var ticks = prop(options, \\"ticks\\", Number);
      var shapes = prop(options, \\"shapes\\");
      var scalar = prop(options, \\"scalar\\");
      var origin = getOrigin(options);
      var temp = particleCount;
      var fettis = [];
      var startX = canvas.width * origin.x;
      var startY = canvas.height * origin.y;
      while (temp--) {
        fettis.push(randomPhysics({
          x: startX,
          y: startY,
          angle,
          spread,
          startVelocity,
          color: colors[temp % colors.length],
          shape: shapes[randomInt(0, shapes.length)],
          ticks,
          decay,
          gravity,
          scalar
        }));
      }
      if (animationObj) {
        return animationObj.addFettis(fettis);
      }
      animationObj = animate(canvas, fettis, resizer, size, done);
      return animationObj.promise;
    }
    function fire(options) {
      var disableForReducedMotion = globalDisableForReducedMotion || prop(options, \\"disableForReducedMotion\\", Boolean);
      var zIndex = prop(options, \\"zIndex\\", Number);
      if (disableForReducedMotion && preferLessMotion) {
        return promise(function(resolve) {
          resolve();
        });
      }
      if (isLibCanvas && animationObj) {
        canvas = animationObj.canvas;
      } else if (isLibCanvas && !canvas) {
        canvas = getCanvas(zIndex);
        document.body.appendChild(canvas);
      }
      if (allowResize && !initialized) {
        resizer(canvas);
      }
      var size = {
        width: canvas.width,
        height: canvas.height
      };
      if (worker && !initialized) {
        worker.init(canvas);
      }
      initialized = true;
      if (worker) {
        canvas.__confetti_initialized = true;
      }
      function onResize() {
        if (worker) {
          var obj = {
            getBoundingClientRect: function() {
              if (!isLibCanvas) {
                return canvas.getBoundingClientRect();
              }
            }
          };
          resizer(obj);
          worker.postMessage({
            resize: {
              width: obj.width,
              height: obj.height
            }
          });
          return;
        }
        size.width = size.height = null;
      }
      function done() {
        animationObj = null;
        if (allowResize) {
          global.removeEventListener(\\"resize\\", onResize);
        }
        if (isLibCanvas && canvas) {
          document.body.removeChild(canvas);
          canvas = null;
          initialized = false;
        }
      }
      if (allowResize) {
        global.addEventListener(\\"resize\\", onResize, false);
      }
      if (worker) {
        return worker.fire(options, size, done);
      }
      return fireLocal(options, size, done);
    }
    fire.reset = function() {
      if (worker) {
        worker.reset();
      }
      if (animationObj) {
        animationObj.reset();
      }
    };
    return fire;
  }
  module2.exports = confettiCannon(null, {useWorker: true, resize: true});
  module2.exports.create = confettiCannon;
})(function() {
  if (typeof window !== \\"undefined\\") {
    return window;
  }
  if (typeof self !== \\"undefined\\") {
    return self;
  }
  return this;
}(), module, false);
var confetti_module_default = module.exports;
var create = module.exports.create;
// PKG/canvas-XXXXXXXX.js
var canvas_confetti_default = confetti_module_default;
export {
  canvas_confetti_default as default
};
//# sourceMappingURL=canvas-XXXXXXXX.js.map"
`;

exports[`create-snowpack-app app-template-blank > build: _snowpack/pkg/canvas-confetti.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/canvas-XXXXXXXX.js.map\\";"`;

exports[`create-snowpack-app app-template-blank > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"canvas-confetti\\": \\"./canvas-XXXXXXXX.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-blank > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/canvas-confetti.js",
  "_snowpack/pkg/canvas-confetti.js.map",
  "_snowpack/pkg/canvas-confetti.js.map.proxy.js",
  "_snowpack/pkg/import-map.json",
  "dist/index.js",
  "favicon.ico",
  "index.css",
  "index.html",
  "logo.svg",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-blank > build: dist/index.js 1`] = `
"/**
 * This file is just a silly example to show everything working in the browser.
 * When you're ready to start on your site, clear the file. Happy hacking!
 **/
import confetti from '../_snowpack/pkg/canvas-XXXXXXXX.js';
confetti.create(document.getElementById('canvas'), {
  resize: true,
  useWorker: true,
})({ particleCount: 200, spread: 200 });"
`;

exports[`create-snowpack-app app-template-blank > build: index.css 1`] = `
"#img {
  display: block;
  margin: auto;
  height: 128px;
  width: 128px;
  padding: 2rem;
}
#canvas {
  display: block;
  margin: 2rem auto;
  width: 540px;
  height: 540px;
}"
`;

exports[`create-snowpack-app app-template-blank > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/index.css\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <img id=\\"img\\" src=\\"/logo.svg\\" />
    <canvas id=\\"canvas\\"></canvas>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-blank-typescript > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-blank-typescript > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\": {
      \\"bytes\\": 16214,
      \\"imports\\": []
    },
    \\"PKG/canvas-XXXXXXXX.js\\": {
      \\"bytes\\": 249,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/canvas-XXXXXXXX.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 25662
    },
    \\"build/_snowpack/pkg/canvas-XXXXXXXX.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"default\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\": {
          \\"bytesInOutput\\": 15155
        },
        \\"PKG/canvas-XXXXXXXX.js\\": {
          \\"bytesInOutput\\": 55
        }
      },
      \\"bytes\\": 15393
    }
  }
}"
`;

exports[`create-snowpack-app app-template-blank-typescript > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\":{\\"bytes\\":16214,\\"imports\\":[]},\\"PKG/canvas-XXXXXXXX.js\\":{\\"bytes\\":249,\\"imports\\":[{\\"path\\":\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/canvas-XXXXXXXX.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":25662},\\"build/_snowpack/pkg/canvas-XXXXXXXX.js\\":{\\"imports\\":[],\\"exports\\":[\\"default\\"],\\"inputs\\":{\\"../../node_modules/canvas-confetti/dist/confetti.module.mjs\\":{\\"bytesInOutput\\":15155},\\"PKG/canvas-XXXXXXXX.js\\":{\\"bytesInOutput\\":55}},\\"bytes\\":15393}}};
export default json;"
`;

exports[`create-snowpack-app app-template-blank-typescript > build: _snowpack/pkg/canvas-confetti.js 1`] = `
"// ../../node_modules/canvas-confetti/dist/confetti.module.mjs
var module = {};
(function main(global, module2, isWorker, workerSize) {
  var canUseWorker = !!(global.Worker && global.Blob && global.Promise && global.OffscreenCanvas && global.OffscreenCanvasRenderingContext2D && global.HTMLCanvasElement && global.HTMLCanvasElement.prototype.transferControlToOffscreen && global.URL && global.URL.createObjectURL);
  function noop() {
  }
  function promise(func) {
    var ModulePromise = module2.exports.Promise;
    var Prom = ModulePromise !== void 0 ? ModulePromise : global.Promise;
    if (typeof Prom === \\"function\\") {
      return new Prom(func);
    }
    func(noop, noop);
    return null;
  }
  var raf = function() {
    var TIME = Math.floor(1e3 / 60);
    var frame, cancel;
    var frames = {};
    var lastFrameTime = 0;
    if (typeof requestAnimationFrame === \\"function\\" && typeof cancelAnimationFrame === \\"function\\") {
      frame = function(cb) {
        var id = Math.random();
        frames[id] = requestAnimationFrame(function onFrame(time) {
          if (lastFrameTime === time || lastFrameTime + TIME - 1 < time) {
            lastFrameTime = time;
            delete frames[id];
            cb();
          } else {
            frames[id] = requestAnimationFrame(onFrame);
          }
        });
        return id;
      };
      cancel = function(id) {
        if (frames[id]) {
          cancelAnimationFrame(frames[id]);
        }
      };
    } else {
      frame = function(cb) {
        return setTimeout(cb, TIME);
      };
      cancel = function(timer) {
        return clearTimeout(timer);
      };
    }
    return {frame, cancel};
  }();
  var getWorker = function() {
    var worker;
    var prom;
    var resolves = {};
    function decorate(worker2) {
      function execute(options, callback) {
        worker2.postMessage({options: options || {}, callback});
      }
      worker2.init = function initWorker(canvas) {
        var offscreen = canvas.transferControlToOffscreen();
        worker2.postMessage({canvas: offscreen}, [offscreen]);
      };
      worker2.fire = function fireWorker(options, size, done) {
        if (prom) {
          execute(options, null);
          return prom;
        }
        var id = Math.random().toString(36).slice(2);
        prom = promise(function(resolve) {
          function workerDone(msg) {
            if (msg.data.callback !== id) {
              return;
            }
            delete resolves[id];
            worker2.removeEventListener(\\"message\\", workerDone);
            prom = null;
            done();
            resolve();
          }
          worker2.addEventListener(\\"message\\", workerDone);
          execute(options, id);
          resolves[id] = workerDone.bind(null, {data: {callback: id}});
        });
        return prom;
      };
      worker2.reset = function resetWorker() {
        worker2.postMessage({reset: true});
        for (var id in resolves) {
          resolves[id]();
          delete resolves[id];
        }
      };
    }
    return function() {
      if (worker) {
        return worker;
      }
      if (!isWorker && canUseWorker) {
        var code = [
          \\"var CONFETTI, SIZE = {}, module = {};\\",
          \\"(\\" + main.toString() + \\")(this, module, true, SIZE);\\",
          \\"onmessage = function(msg) {\\",
          \\"  if (msg.data.options) {\\",
          \\"    CONFETTI(msg.data.options).then(function () {\\",
          \\"      if (msg.data.callback) {\\",
          \\"        postMessage({ callback: msg.data.callback });\\",
          \\"      }\\",
          \\"    });\\",
          \\"  } else if (msg.data.reset) {\\",
          \\"    CONFETTI.reset();\\",
          \\"  } else if (msg.data.resize) {\\",
          \\"    SIZE.width = msg.data.resize.width;\\",
          \\"    SIZE.height = msg.data.resize.height;\\",
          \\"  } else if (msg.data.canvas) {\\",
          \\"    SIZE.width = msg.data.canvas.width;\\",
          \\"    SIZE.height = msg.data.canvas.height;\\",
          \\"    CONFETTI = module.exports.create(msg.data.canvas);\\",
          \\"  }\\",
          \\"}\\"
        ].join(\\"\\");
        try {
          worker = new Worker(URL.createObjectURL(new Blob([code])));
        } catch (e) {
          typeof console !== void 0 && typeof console.warn === \\"function\\" ? console.warn(\\"\\\\u{1F38A} Could not load worker\\", e) : null;
          return null;
        }
        decorate(worker);
      }
      return worker;
    };
  }();
  var defaults = {
    particleCount: 50,
    angle: 90,
    spread: 45,
    startVelocity: 45,
    decay: 0.9,
    gravity: 1,
    ticks: 200,
    x: 0.5,
    y: 0.5,
    shapes: [\\"square\\", \\"circle\\"],
    zIndex: 100,
    colors: [
      \\"#26ccff\\",
      \\"#a25afd\\",
      \\"#ff5e7e\\",
      \\"#88ff5a\\",
      \\"#fcff42\\",
      \\"#ffa62d\\",
      \\"#ff36ff\\"
    ],
    disableForReducedMotion: false,
    scalar: 1
  };
  function convert(val, transform) {
    return transform ? transform(val) : val;
  }
  function isOk(val) {
    return !(val === null || val === void 0);
  }
  function prop(options, name, transform) {
    return convert(options && isOk(options[name]) ? options[name] : defaults[name], transform);
  }
  function onlyPositiveInt(number) {
    return number < 0 ? 0 : Math.floor(number);
  }
  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  }
  function toDecimal(str) {
    return parseInt(str, 16);
  }
  function hexToRgb(str) {
    var val = String(str).replace(/[^0-9a-f]/gi, \\"\\");
    if (val.length < 6) {
      val = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];
    }
    return {
      r: toDecimal(val.substring(0, 2)),
      g: toDecimal(val.substring(2, 4)),
      b: toDecimal(val.substring(4, 6))
    };
  }
  function getOrigin(options) {
    var origin = prop(options, \\"origin\\", Object);
    origin.x = prop(origin, \\"x\\", Number);
    origin.y = prop(origin, \\"y\\", Number);
    return origin;
  }
  function setCanvasWindowSize(canvas) {
    canvas.width = document.documentElement.clientWidth;
    canvas.height = document.documentElement.clientHeight;
  }
  function setCanvasRectSize(canvas) {
    var rect = canvas.getBoundingClientRect();
    canvas.width = rect.width;
    canvas.height = rect.height;
  }
  function getCanvas(zIndex) {
    var canvas = document.createElement(\\"canvas\\");
    canvas.style.position = \\"fixed\\";
    canvas.style.top = \\"0px\\";
    canvas.style.left = \\"0px\\";
    canvas.style.pointerEvents = \\"none\\";
    canvas.style.zIndex = zIndex;
    return canvas;
  }
  function ellipse(context, x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {
    context.save();
    context.translate(x, y);
    context.rotate(rotation);
    context.scale(radiusX, radiusY);
    context.arc(0, 0, 1, startAngle, endAngle, antiClockwise);
    context.restore();
  }
  function randomPhysics(opts) {
    var radAngle = opts.angle * (Math.PI / 180);
    var radSpread = opts.spread * (Math.PI / 180);
    return {
      x: opts.x,
      y: opts.y,
      wobble: Math.random() * 10,
      velocity: opts.startVelocity * 0.5 + Math.random() * opts.startVelocity,
      angle2D: -radAngle + (0.5 * radSpread - Math.random() * radSpread),
      tiltAngle: Math.random() * Math.PI,
      color: hexToRgb(opts.color),
      shape: opts.shape,
      tick: 0,
      totalTicks: opts.ticks,
      decay: opts.decay,
      random: Math.random() + 5,
      tiltSin: 0,
      tiltCos: 0,
      wobbleX: 0,
      wobbleY: 0,
      gravity: opts.gravity * 3,
      ovalScalar: 0.6,
      scalar: opts.scalar
    };
  }
  function updateFetti(context, fetti) {
    fetti.x += Math.cos(fetti.angle2D) * fetti.velocity;
    fetti.y += Math.sin(fetti.angle2D) * fetti.velocity + fetti.gravity;
    fetti.wobble += 0.1;
    fetti.velocity *= fetti.decay;
    fetti.tiltAngle += 0.1;
    fetti.tiltSin = Math.sin(fetti.tiltAngle);
    fetti.tiltCos = Math.cos(fetti.tiltAngle);
    fetti.random = Math.random() + 5;
    fetti.wobbleX = fetti.x + 10 * fetti.scalar * Math.cos(fetti.wobble);
    fetti.wobbleY = fetti.y + 10 * fetti.scalar * Math.sin(fetti.wobble);
    var progress = fetti.tick++ / fetti.totalTicks;
    var x1 = fetti.x + fetti.random * fetti.tiltCos;
    var y1 = fetti.y + fetti.random * fetti.tiltSin;
    var x2 = fetti.wobbleX + fetti.random * fetti.tiltCos;
    var y2 = fetti.wobbleY + fetti.random * fetti.tiltSin;
    context.fillStyle = \\"rgba(\\" + fetti.color.r + \\", \\" + fetti.color.g + \\", \\" + fetti.color.b + \\", \\" + (1 - progress) + \\")\\";
    context.beginPath();
    if (fetti.shape === \\"circle\\") {
      context.ellipse ? context.ellipse(fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI) : ellipse(context, fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI);
    } else {
      context.moveTo(Math.floor(fetti.x), Math.floor(fetti.y));
      context.lineTo(Math.floor(fetti.wobbleX), Math.floor(y1));
      context.lineTo(Math.floor(x2), Math.floor(y2));
      context.lineTo(Math.floor(x1), Math.floor(fetti.wobbleY));
    }
    context.closePath();
    context.fill();
    return fetti.tick < fetti.totalTicks;
  }
  function animate(canvas, fettis, resizer, size, done) {
    var animatingFettis = fettis.slice();
    var context = canvas.getContext(\\"2d\\");
    var animationFrame;
    var destroy;
    var prom = promise(function(resolve) {
      function onDone() {
        animationFrame = destroy = null;
        context.clearRect(0, 0, size.width, size.height);
        done();
        resolve();
      }
      function update() {
        if (isWorker && !(size.width === workerSize.width && size.height === workerSize.height)) {
          size.width = canvas.width = workerSize.width;
          size.height = canvas.height = workerSize.height;
        }
        if (!size.width && !size.height) {
          resizer(canvas);
          size.width = canvas.width;
          size.height = canvas.height;
        }
        context.clearRect(0, 0, size.width, size.height);
        animatingFettis = animatingFettis.filter(function(fetti) {
          return updateFetti(context, fetti);
        });
        if (animatingFettis.length) {
          animationFrame = raf.frame(update);
        } else {
          onDone();
        }
      }
      animationFrame = raf.frame(update);
      destroy = onDone;
    });
    return {
      addFettis: function(fettis2) {
        animatingFettis = animatingFettis.concat(fettis2);
        return prom;
      },
      canvas,
      promise: prom,
      reset: function() {
        if (animationFrame) {
          raf.cancel(animationFrame);
        }
        if (destroy) {
          destroy();
        }
      }
    };
  }
  function confettiCannon(canvas, globalOpts) {
    var isLibCanvas = !canvas;
    var allowResize = !!prop(globalOpts || {}, \\"resize\\");
    var globalDisableForReducedMotion = prop(globalOpts, \\"disableForReducedMotion\\", Boolean);
    var shouldUseWorker = canUseWorker && !!prop(globalOpts || {}, \\"useWorker\\");
    var worker = shouldUseWorker ? getWorker() : null;
    var resizer = isLibCanvas ? setCanvasWindowSize : setCanvasRectSize;
    var initialized = canvas && worker ? !!canvas.__confetti_initialized : false;
    var preferLessMotion = typeof matchMedia === \\"function\\" && matchMedia(\\"(prefers-reduced-motion)\\").matches;
    var animationObj;
    function fireLocal(options, size, done) {
      var particleCount = prop(options, \\"particleCount\\", onlyPositiveInt);
      var angle = prop(options, \\"angle\\", Number);
      var spread = prop(options, \\"spread\\", Number);
      var startVelocity = prop(options, \\"startVelocity\\", Number);
      var decay = prop(options, \\"decay\\", Number);
      var gravity = prop(options, \\"gravity\\", Number);
      var colors = prop(options, \\"colors\\");
      var ticks = prop(options, \\"ticks\\", Number);
      var shapes = prop(options, \\"shapes\\");
      var scalar = prop(options, \\"scalar\\");
      var origin = getOrigin(options);
      var temp = particleCount;
      var fettis = [];
      var startX = canvas.width * origin.x;
      var startY = canvas.height * origin.y;
      while (temp--) {
        fettis.push(randomPhysics({
          x: startX,
          y: startY,
          angle,
          spread,
          startVelocity,
          color: colors[temp % colors.length],
          shape: shapes[randomInt(0, shapes.length)],
          ticks,
          decay,
          gravity,
          scalar
        }));
      }
      if (animationObj) {
        return animationObj.addFettis(fettis);
      }
      animationObj = animate(canvas, fettis, resizer, size, done);
      return animationObj.promise;
    }
    function fire(options) {
      var disableForReducedMotion = globalDisableForReducedMotion || prop(options, \\"disableForReducedMotion\\", Boolean);
      var zIndex = prop(options, \\"zIndex\\", Number);
      if (disableForReducedMotion && preferLessMotion) {
        return promise(function(resolve) {
          resolve();
        });
      }
      if (isLibCanvas && animationObj) {
        canvas = animationObj.canvas;
      } else if (isLibCanvas && !canvas) {
        canvas = getCanvas(zIndex);
        document.body.appendChild(canvas);
      }
      if (allowResize && !initialized) {
        resizer(canvas);
      }
      var size = {
        width: canvas.width,
        height: canvas.height
      };
      if (worker && !initialized) {
        worker.init(canvas);
      }
      initialized = true;
      if (worker) {
        canvas.__confetti_initialized = true;
      }
      function onResize() {
        if (worker) {
          var obj = {
            getBoundingClientRect: function() {
              if (!isLibCanvas) {
                return canvas.getBoundingClientRect();
              }
            }
          };
          resizer(obj);
          worker.postMessage({
            resize: {
              width: obj.width,
              height: obj.height
            }
          });
          return;
        }
        size.width = size.height = null;
      }
      function done() {
        animationObj = null;
        if (allowResize) {
          global.removeEventListener(\\"resize\\", onResize);
        }
        if (isLibCanvas && canvas) {
          document.body.removeChild(canvas);
          canvas = null;
          initialized = false;
        }
      }
      if (allowResize) {
        global.addEventListener(\\"resize\\", onResize, false);
      }
      if (worker) {
        return worker.fire(options, size, done);
      }
      return fireLocal(options, size, done);
    }
    fire.reset = function() {
      if (worker) {
        worker.reset();
      }
      if (animationObj) {
        animationObj.reset();
      }
    };
    return fire;
  }
  module2.exports = confettiCannon(null, {useWorker: true, resize: true});
  module2.exports.create = confettiCannon;
})(function() {
  if (typeof window !== \\"undefined\\") {
    return window;
  }
  if (typeof self !== \\"undefined\\") {
    return self;
  }
  return this;
}(), module, false);
var confetti_module_default = module.exports;
var create = module.exports.create;
// PKG/canvas-XXXXXXXX.js
var canvas_confetti_default = confetti_module_default;
export {
  canvas_confetti_default as default
};
//# sourceMappingURL=canvas-XXXXXXXX.js.map"
`;

exports[`create-snowpack-app app-template-blank-typescript > build: _snowpack/pkg/canvas-confetti.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/canvas-XXXXXXXX.js.map\\";"`;

exports[`create-snowpack-app app-template-blank-typescript > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"canvas-confetti\\": \\"./canvas-XXXXXXXX.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-blank-typescript > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/canvas-confetti.js",
  "_snowpack/pkg/canvas-confetti.js.map",
  "_snowpack/pkg/canvas-confetti.js.map.proxy.js",
  "_snowpack/pkg/import-map.json",
  "dist/index.js",
  "favicon.ico",
  "index.css",
  "index.html",
  "logo.svg",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-blank-typescript > build: dist/index.js 1`] = `
"import confetti from \\"../_snowpack/pkg/canvas-XXXXXXXX.js\\";
confetti.create(document.getElementById(\\"canvas\\"), {
  resize: true,
  useWorker: true
})({particleCount: 200, spread: 200});"
`;

exports[`create-snowpack-app app-template-blank-typescript > build: index.css 1`] = `
"#img {
  display: block;
  margin: auto;
  height: 128px;
  width: 128px;
  padding: 2rem;
}
#canvas {
  display: block;
  margin: 2rem auto;
  width: 540px;
  height: 540px;
}"
`;

exports[`create-snowpack-app app-template-blank-typescript > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/index.css\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <img id=\\"img\\" src=\\"/logo.svg\\" />
    <canvas id=\\"canvas\\"></canvas>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-lit-element > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-lit-element > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/lit-html/lib/shady-render.js\\": {
      \\"bytes\\": 13965,
      \\"imports\\": []
    },
    \\"../../node_modules/lit-html/lit-html.js\\": {
      \\"bytes\\": 2624,
      \\"imports\\": []
    },
    \\"../../node_modules/lit-element/lit-element.js\\": {
      \\"bytes\\": 11717,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/lit-html/lib/shady-render.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/lit-html/lit-html.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"PKG/lit-element.js\\": {
      \\"bytes\\": 131,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/lit-element/lit-element.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/lit-element.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 35163
    },
    \\"build/_snowpack/pkg/lit-element.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"default\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/lit-element/lit-element.js\\": {
          \\"bytesInOutput\\": 4512
        },
        \\"PKG/lit-element.js\\": {
          \\"bytesInOutput\\": 117
        },
        \\"../../node_modules/lit-html/lib/shady-render.js\\": {
          \\"bytesInOutput\\": 5810
        },
        \\"../../node_modules/lit-html/lit-html.js\\": {
          \\"bytesInOutput\\": 2673
        }
      },
      \\"bytes\\": 14672
    }
  }
}"
`;

exports[`create-snowpack-app app-template-lit-element > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/lit-html/lib/shady-render.js\\":{\\"bytes\\":13965,\\"imports\\":[]},\\"../../node_modules/lit-html/lit-html.js\\":{\\"bytes\\":2624,\\"imports\\":[]},\\"../../node_modules/lit-element/lit-element.js\\":{\\"bytes\\":11717,\\"imports\\":[{\\"path\\":\\"../../node_modules/lit-html/lib/shady-render.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/lit-html/lit-html.js\\",\\"kind\\":\\"import-statement\\"}]},\\"PKG/lit-element.js\\":{\\"bytes\\":131,\\"imports\\":[{\\"path\\":\\"../../node_modules/lit-element/lit-element.js\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/lit-element.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":35163},\\"build/_snowpack/pkg/lit-element.js\\":{\\"imports\\":[],\\"exports\\":[\\"default\\"],\\"inputs\\":{\\"../../node_modules/lit-element/lit-element.js\\":{\\"bytesInOutput\\":4512},\\"PKG/lit-element.js\\":{\\"bytesInOutput\\":117},\\"../../node_modules/lit-html/lib/shady-render.js\\":{\\"bytesInOutput\\":5810},\\"../../node_modules/lit-html/lit-html.js\\":{\\"bytesInOutput\\":2673}},\\"bytes\\":14672}}};
export default json;"
`;

exports[`create-snowpack-app app-template-lit-element > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"lit-element\\": \\"./lit-element.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-lit-element > build: _snowpack/pkg/lit-element.js 1`] = `
"var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, \\"__esModule\\", {value: true});
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module, desc) => {
  __markAsModule(target);
  if (module && typeof module === \\"object\\" || typeof module === \\"function\\") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== \\"default\\")
        __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module) => {
  if (module && module.__esModule)
    return module;
  return __exportStar(__defProp(module != null ? __create(__getProtoOf(module)) : {}, \\"default\\", {value: module, enumerable: true}), module);
};
// ../../node_modules/lit-element/lit-element.js
import {UpdatingElement} from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/updating-element.js\\";
import * as updating_element_star from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/updating-element.js\\";
import * as decorators_star from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/decorators.js\\";
import {supportsAdoptingStyleSheets, unsafeCSS} from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/css-tag.js\\";
import * as css_tag_star from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/css-tag.js\\";
var require_lit_element = __commonJS((exports) => {
  __export(exports, {
    LitElement: () => LitElement,
    SVGTemplateResult: () => SVGTemplateResult2,
    TemplateResult: () => TemplateResult3,
    html: () => html2,
    svg: () => svg2
  });
  __exportStar(exports, updating_element_star);
  __exportStar(exports, decorators_star);
  __exportStar(exports, css_tag_star);
  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  (window[\\"litElementVersions\\"] || (window[\\"litElementVersions\\"] = [])).push(\\"2.4.0\\");
  var renderNotImplemented = {};
  var LitElement = class extends UpdatingElement {
    static getStyles() {
      return this.styles;
    }
    static _getUniqueStyles() {
      if (this.hasOwnProperty(JSCompiler_renameProperty(\\"_styles\\", this))) {
        return;
      }
      const userStyles = this.getStyles();
      if (Array.isArray(userStyles)) {
        const addStyles = (styles2, set2) => styles2.reduceRight((set3, s) => Array.isArray(s) ? addStyles(s, set3) : (set3.add(s), set3), set2);
        const set = addStyles(userStyles, new Set());
        const styles = [];
        set.forEach((v) => styles.unshift(v));
        this._styles = styles;
      } else {
        this._styles = userStyles === void 0 ? [] : [userStyles];
      }
      this._styles = this._styles.map((s) => {
        if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
          const cssText = Array.prototype.slice.call(s.cssRules).reduce((css, rule) => css + rule.cssText, \\"\\");
          return unsafeCSS(cssText);
        }
        return s;
      });
    }
    initialize() {
      super.initialize();
      this.constructor._getUniqueStyles();
      this.renderRoot = this.createRenderRoot();
      if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
        this.adoptStyles();
      }
    }
    createRenderRoot() {
      return this.attachShadow({mode: \\"open\\"});
    }
    adoptStyles() {
      const styles = this.constructor._styles;
      if (styles.length === 0) {
        return;
      }
      if (window.ShadyCSS !== void 0 && !window.ShadyCSS.nativeShadow) {
        window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);
      } else if (supportsAdoptingStyleSheets) {
        this.renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
      } else {
        this._needsShimAdoptedStyleSheets = true;
      }
    }
    connectedCallback() {
      super.connectedCallback();
      if (this.hasUpdated && window.ShadyCSS !== void 0) {
        window.ShadyCSS.styleElement(this);
      }
    }
    update(changedProperties) {
      const templateResult = this.render();
      super.update(changedProperties);
      if (templateResult !== renderNotImplemented) {
        this.constructor.render(templateResult, this.renderRoot, {scopeName: this.localName, eventContext: this});
      }
      if (this._needsShimAdoptedStyleSheets) {
        this._needsShimAdoptedStyleSheets = false;
        this.constructor._styles.forEach((s) => {
          const style = document.createElement(\\"style\\");
          style.textContent = s.cssText;
          this.renderRoot.appendChild(style);
        });
      }
    }
    render() {
      return renderNotImplemented;
    }
  };
  LitElement[\\"finalized\\"] = true;
  LitElement.render = render;
});
// PKG/lit-element.js
var require_lit_element2 = __commonJS((exports) => {
  __exportStar(exports, __toModule(require_lit_element()));
});
// ../../node_modules/lit-html/lib/shady-render.js
import {removeNodes} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/dom.js\\";
import {insertNodeIntoTemplate, removeNodesFromTemplate} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/modify-XXXXXXXX.js\\";
import {parts, render as litRender} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/render.js\\";
import {templateCaches} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/template-factory.js\\";
import {TemplateInstance} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/template-XXXXXXXX.js\\";
import {marker, Template} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/template.js\\";
import {html, svg, TemplateResult} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/lit-html.js\\";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var getTemplateCacheKey = (type, scopeName) => \`\${type}--\${scopeName}\`;
var compatibleShadyCSSVersion = true;
if (typeof window.ShadyCSS === \\"undefined\\") {
  compatibleShadyCSSVersion = false;
} else if (typeof window.ShadyCSS.prepareTemplateDom === \\"undefined\\") {
  console.warn(\`Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1.\`);
  compatibleShadyCSSVersion = false;
}
var shadyTemplateFactory = (scopeName) => (result) => {
  const cacheKey = getTemplateCacheKey(result.type, scopeName);
  let templateCache = templateCaches.get(cacheKey);
  if (templateCache === void 0) {
    templateCache = {
      stringsArray: new WeakMap(),
      keyString: new Map()
    };
    templateCaches.set(cacheKey, templateCache);
  }
  let template = templateCache.stringsArray.get(result.strings);
  if (template !== void 0) {
    return template;
  }
  const key = result.strings.join(marker);
  template = templateCache.keyString.get(key);
  if (template === void 0) {
    const element = result.getTemplateElement();
    if (compatibleShadyCSSVersion) {
      window.ShadyCSS.prepareTemplateDom(element, scopeName);
    }
    template = new Template(result, element);
    templateCache.keyString.set(key, template);
  }
  templateCache.stringsArray.set(result.strings, template);
  return template;
};
var TEMPLATE_TYPES = [\\"html\\", \\"svg\\"];
var removeStylesFromLitTemplates = (scopeName) => {
  TEMPLATE_TYPES.forEach((type) => {
    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
    if (templates !== void 0) {
      templates.keyString.forEach((template) => {
        const {element: {content}} = template;
        const styles = new Set();
        Array.from(content.querySelectorAll(\\"style\\")).forEach((s) => {
          styles.add(s);
        });
        removeNodesFromTemplate(template, styles);
      });
    }
  });
};
var shadyRenderSet = new Set();
var prepareTemplateStyles = (scopeName, renderedDOM, template) => {
  shadyRenderSet.add(scopeName);
  const templateElement = !!template ? template.element : document.createElement(\\"template\\");
  const styles = renderedDOM.querySelectorAll(\\"style\\");
  const {length} = styles;
  if (length === 0) {
    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
    return;
  }
  const condensedStyle = document.createElement(\\"style\\");
  for (let i = 0; i < length; i++) {
    const style2 = styles[i];
    style2.parentNode.removeChild(style2);
    condensedStyle.textContent += style2.textContent;
  }
  removeStylesFromLitTemplates(scopeName);
  const content = templateElement.content;
  if (!!template) {
    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);
  } else {
    content.insertBefore(condensedStyle, content.firstChild);
  }
  window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
  const style = content.querySelector(\\"style\\");
  if (window.ShadyCSS.nativeShadow && style !== null) {
    renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
  } else if (!!template) {
    content.insertBefore(condensedStyle, content.firstChild);
    const removes = new Set();
    removes.add(condensedStyle);
    removeNodesFromTemplate(template, removes);
  }
};
var render = (result, container, options) => {
  if (!options || typeof options !== \\"object\\" || !options.scopeName) {
    throw new Error(\\"The \`scopeName\` option is required.\\");
  }
  const scopeName = options.scopeName;
  const hasRendered = parts.has(container);
  const needsScoping = compatibleShadyCSSVersion && container.nodeType === 11 && !!container.host;
  const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
  const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
  litRender(result, renderContainer, Object.assign({templateFactory: shadyTemplateFactory(scopeName)}, options));
  if (firstScopeRender) {
    const part = parts.get(renderContainer);
    parts.delete(renderContainer);
    const template = part.value instanceof TemplateInstance ? part.value.template : void 0;
    prepareTemplateStyles(scopeName, renderContainer, template);
    removeNodes(container, container.firstChild);
    container.appendChild(renderContainer);
    parts.set(container, part);
  }
  if (!hasRendered && needsScoping) {
    window.ShadyCSS.styleElement(container.host);
  }
};
// ../../node_modules/lit-html/lit-html.js
import {defaultTemplateProcessor} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/default-template-processor.js\\";
import {SVGTemplateResult, TemplateResult as TemplateResult2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template-result.js\\";
import {DefaultTemplateProcessor, defaultTemplateProcessor as defaultTemplateProcessor2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/default-template-processor.js\\";
import {directive, isDirective} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/directive.js\\";
import {removeNodes as removeNodes2, reparentNodes} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/dom.js\\";
import {noChange, nothing} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/part.js\\";
import {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/parts.js\\";
import {parts as parts2, render as render2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/render.js\\";
import {templateCaches as templateCaches2, templateFactory} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template-factory.js\\";
import {TemplateInstance as TemplateInstance2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template-XXXXXXXX.js\\";
import {SVGTemplateResult as SVGTemplateResult2, TemplateResult as TemplateResult3} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template-result.js\\";
import {createMarker, isTemplatePartActive, Template as Template2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template.js\\";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
if (typeof window !== \\"undefined\\") {
  (window[\\"litHtmlVersions\\"] || (window[\\"litHtmlVersions\\"] = [])).push(\\"1.3.0\\");
}
var html2 = (strings, ...values) => new TemplateResult2(strings, values, \\"html\\", defaultTemplateProcessor);
var svg2 = (strings, ...values) => new SVGTemplateResult(strings, values, \\"svg\\", defaultTemplateProcessor);
export default require_lit_element2();
//# sourceMappingURL=lit-element.js.map"
`;

exports[`create-snowpack-app app-template-lit-element > build: _snowpack/pkg/lit-element.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/lit-element.js.map\\";"`;

exports[`create-snowpack-app app-template-lit-element > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/lit-element.js",
  "_snowpack/pkg/lit-element.js.map",
  "_snowpack/pkg/lit-element.js.map.proxy.js",
  "dist/app-root.js",
  "dist/index.js",
  "favicon.ico",
  "index.css",
  "index.html",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-lit-element > build: dist/app-root.js 1`] = `
"function _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }
function _getDecoratorsApi() { _getDecoratorsApi = function () { return api; }; var api = { elementsDefinitionOrder: [[\\"method\\"], [\\"field\\"]], initializeInstanceElements: function (O, elements) { [\\"method\\", \\"field\\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \\"own\\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function (F, elements) { var proto = F.prototype; [\\"method\\", \\"field\\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \\"static\\" || placement === \\"prototype\\")) { var receiver = placement === \\"static\\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function (receiver, element) { var descriptor = element.descriptor; if (element.kind === \\"field\\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function (elements, decorators) { var newElements = []; var finishers = []; var placements = { static: [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function (element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\\"Duplicated element (\\" + element.key + \\")\\"); } keys.push(element.key); }, decorateElement: function (element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function (elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\\"Duplicated element (\\" + elements[j].key + \\")\\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function (element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \\"Descriptor\\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \\"field\\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function (elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \\"finisher\\", \\"An element descriptor\\"); this.disallowProperty(elementObject, \\"extras\\", \\"An element descriptor\\"); return element; }, this); }, toElementDescriptor: function (elementObject) { var kind = String(elementObject.kind); if (kind !== \\"method\\" && kind !== \\"field\\") { throw new TypeError('An element descriptor\\\\'s .kind property must be either \\"method\\" or' + ' \\"field\\", but a decorator created an element descriptor with' + ' .kind \\"' + kind + '\\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \\"static\\" && placement !== \\"prototype\\" && placement !== \\"own\\") { throw new TypeError('An element descriptor\\\\'s .placement property must be one of \\"static\\",' + ' \\"prototype\\" or \\"own\\", but a decorator created an element descriptor' + ' with .placement \\"' + placement + '\\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \\"elements\\", \\"An element descriptor\\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \\"field\\") { this.disallowProperty(elementObject, \\"initializer\\", \\"A method descriptor\\"); } else { this.disallowProperty(descriptor, \\"get\\", \\"The property descriptor of a field descriptor\\"); this.disallowProperty(descriptor, \\"set\\", \\"The property descriptor of a field descriptor\\"); this.disallowProperty(descriptor, \\"value\\", \\"The property descriptor of a field descriptor\\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function (elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \\"finisher\\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function (elements) { var obj = { kind: \\"class\\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \\"Descriptor\\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function (obj) { var kind = String(obj.kind); if (kind !== \\"class\\") { throw new TypeError('A class descriptor\\\\'s .kind property must be \\"class\\", but a decorator' + ' created a class descriptor with .kind \\"' + kind + '\\"'); } this.disallowProperty(obj, \\"key\\", \\"A class descriptor\\"); this.disallowProperty(obj, \\"placement\\", \\"A class descriptor\\"); this.disallowProperty(obj, \\"descriptor\\", \\"A class descriptor\\"); this.disallowProperty(obj, \\"initializer\\", \\"A class descriptor\\"); this.disallowProperty(obj, \\"extras\\", \\"A class descriptor\\"); var finisher = _optionalCallableProperty(obj, \\"finisher\\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function (constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \\"function\\") { throw new TypeError(\\"Finishers must return a constructor.\\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function (obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \\" can't have a .\\" + name + \\" property.\\"); } } }; return api; }
function _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \\"method\\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \\"get\\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \\"set\\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \\"field\\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \\"field\\" ? \\"field\\" : \\"method\\", key: key, placement: def.static ? \\"static\\" : def.kind === \\"field\\" ? \\"own\\" : \\"prototype\\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \\"field\\") element.initializer = def.value; return element; }
function _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }
function _coalesceClassElements(elements) { var newElements = []; var isSameElement = function (other) { return other.kind === \\"method\\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \\"method\\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\\"Duplicated methods (\\" + element.key + \\") can't be decorated.\\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\\"Decorators can't be placed on different accessors with for \\" + \\"the same property (\\" + element.key + \\").\\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }
function _hasDecorators(element) { return element.decorators && element.decorators.length; }
function _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }
function _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \\"function\\") { throw new TypeError(\\"Expected '\\" + name + \\"' to be a function\\"); } return value; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, \\"string\\"); return typeof key === \\"symbol\\" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== \\"object\\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \\"default\\"); if (typeof res !== \\"object\\") return res; throw new TypeError(\\"@@toPrimitive must return a primitive value.\\"); } return (hint === \\"string\\" ? String : Number)(input); }
function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.In order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\"); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\"string\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\"Object\\" && o.constructor) n = o.constructor.name; if (n === \\"Map\\" || n === \\"Set\\") return Array.from(o); if (n === \\"Arguments\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArray(iter) { if (typeof Symbol !== \\"undefined\\" && Symbol.iterator in Object(iter)) return Array.from(iter); }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { customElement, property, LitElement, html, css } from '../_snowpack/pkg/lit-element.js';
export let AppRoot = _decorate([customElement('app-root')], function (_initialize, _LitElement) {
  class AppRoot extends _LitElement {
    constructor(...args) {
      super(...args);
      _initialize(this);
    }
  }
  return {
    F: AppRoot,
    d: [{
      kind: \\"field\\",
      decorators: [property()],
      key: \\"message\\",
      value() {
        return 'Learn LitElement';
      }
    }, {
      kind: \\"get\\",
      static: true,
      key: \\"styles\\",
      value: function styles() {
        return css\`
      h1 {
        font-size: 4rem;
      }
      .wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        height: 100vh;
        background-color: #2196f3;
        background: linear-gradient(315deg, #b4d2ea 0%, #2196f3 100%);
        font-size: 24px;
      }
      .link {
        color: white;
      }
    \`;
      }
    }, {
      kind: \\"method\\",
      key: \\"render\\",
      value: function render() {
        return html\`
      <div class=\\"wrapper\\">
        <h1>LitElement + Snowpack</h1>
        <p>Edit <code>src/app-root.js</code> and save to reload.</p>
        <a
          class=\\"link\\"
          href=\\"https://lit-element.polymer-project.org/\\"
          target=\\"_blank\\"
          rel=\\"noopener noreferrer\\"
        >
          \${this.message}
        </a>
      </div>
    \`;
      }
    }]
  };
}, LitElement);"
`;

exports[`create-snowpack-app app-template-lit-element > build: dist/index.js 1`] = `"import './app-root.js';"`;

exports[`create-snowpack-app app-template-lit-element > build: index.css 1`] = `
"body {
  font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\", \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\", sans-serif;
  color: white;
  margin: 0;
  padding: 0;
}"
`;

exports[`create-snowpack-app app-template-lit-element > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/index.css\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <app-root></app-root>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/lit-html/lib/shady-render.js\\": {
      \\"bytes\\": 13965,
      \\"imports\\": []
    },
    \\"../../node_modules/lit-html/lit-html.js\\": {
      \\"bytes\\": 2624,
      \\"imports\\": []
    },
    \\"../../node_modules/lit-element/lit-element.js\\": {
      \\"bytes\\": 11717,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/lit-html/lib/shady-render.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/lit-html/lit-html.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"PKG/lit-element.js\\": {
      \\"bytes\\": 131,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/lit-element/lit-element.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/lit-element.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 35163
    },
    \\"build/_snowpack/pkg/lit-element.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"default\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/lit-element/lit-element.js\\": {
          \\"bytesInOutput\\": 4512
        },
        \\"PKG/lit-element.js\\": {
          \\"bytesInOutput\\": 117
        },
        \\"../../node_modules/lit-html/lib/shady-render.js\\": {
          \\"bytesInOutput\\": 5810
        },
        \\"../../node_modules/lit-html/lit-html.js\\": {
          \\"bytesInOutput\\": 2673
        }
      },
      \\"bytes\\": 14672
    }
  }
}"
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/lit-html/lib/shady-render.js\\":{\\"bytes\\":13965,\\"imports\\":[]},\\"../../node_modules/lit-html/lit-html.js\\":{\\"bytes\\":2624,\\"imports\\":[]},\\"../../node_modules/lit-element/lit-element.js\\":{\\"bytes\\":11717,\\"imports\\":[{\\"path\\":\\"../../node_modules/lit-html/lib/shady-render.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/lit-html/lit-html.js\\",\\"kind\\":\\"import-statement\\"}]},\\"PKG/lit-element.js\\":{\\"bytes\\":131,\\"imports\\":[{\\"path\\":\\"../../node_modules/lit-element/lit-element.js\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/lit-element.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":35163},\\"build/_snowpack/pkg/lit-element.js\\":{\\"imports\\":[],\\"exports\\":[\\"default\\"],\\"inputs\\":{\\"../../node_modules/lit-element/lit-element.js\\":{\\"bytesInOutput\\":4512},\\"PKG/lit-element.js\\":{\\"bytesInOutput\\":117},\\"../../node_modules/lit-html/lib/shady-render.js\\":{\\"bytesInOutput\\":5810},\\"../../node_modules/lit-html/lit-html.js\\":{\\"bytesInOutput\\":2673}},\\"bytes\\":14672}}};
export default json;"
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"lit-element\\": \\"./lit-element.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: _snowpack/pkg/lit-element.js 1`] = `
"var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, \\"__esModule\\", {value: true});
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module, desc) => {
  __markAsModule(target);
  if (module && typeof module === \\"object\\" || typeof module === \\"function\\") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== \\"default\\")
        __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module) => {
  if (module && module.__esModule)
    return module;
  return __exportStar(__defProp(module != null ? __create(__getProtoOf(module)) : {}, \\"default\\", {value: module, enumerable: true}), module);
};
// ../../node_modules/lit-element/lit-element.js
import {UpdatingElement} from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/updating-element.js\\";
import * as updating_element_star from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/updating-element.js\\";
import * as decorators_star from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/decorators.js\\";
import {supportsAdoptingStyleSheets, unsafeCSS} from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/css-tag.js\\";
import * as css_tag_star from \\"/Users/fks/Code/snowpack/node_modules/lit-element/lit-element.js/lib/css-tag.js\\";
var require_lit_element = __commonJS((exports) => {
  __export(exports, {
    LitElement: () => LitElement,
    SVGTemplateResult: () => SVGTemplateResult2,
    TemplateResult: () => TemplateResult3,
    html: () => html2,
    svg: () => svg2
  });
  __exportStar(exports, updating_element_star);
  __exportStar(exports, decorators_star);
  __exportStar(exports, css_tag_star);
  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  (window[\\"litElementVersions\\"] || (window[\\"litElementVersions\\"] = [])).push(\\"2.4.0\\");
  var renderNotImplemented = {};
  var LitElement = class extends UpdatingElement {
    static getStyles() {
      return this.styles;
    }
    static _getUniqueStyles() {
      if (this.hasOwnProperty(JSCompiler_renameProperty(\\"_styles\\", this))) {
        return;
      }
      const userStyles = this.getStyles();
      if (Array.isArray(userStyles)) {
        const addStyles = (styles2, set2) => styles2.reduceRight((set3, s) => Array.isArray(s) ? addStyles(s, set3) : (set3.add(s), set3), set2);
        const set = addStyles(userStyles, new Set());
        const styles = [];
        set.forEach((v) => styles.unshift(v));
        this._styles = styles;
      } else {
        this._styles = userStyles === void 0 ? [] : [userStyles];
      }
      this._styles = this._styles.map((s) => {
        if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
          const cssText = Array.prototype.slice.call(s.cssRules).reduce((css, rule) => css + rule.cssText, \\"\\");
          return unsafeCSS(cssText);
        }
        return s;
      });
    }
    initialize() {
      super.initialize();
      this.constructor._getUniqueStyles();
      this.renderRoot = this.createRenderRoot();
      if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
        this.adoptStyles();
      }
    }
    createRenderRoot() {
      return this.attachShadow({mode: \\"open\\"});
    }
    adoptStyles() {
      const styles = this.constructor._styles;
      if (styles.length === 0) {
        return;
      }
      if (window.ShadyCSS !== void 0 && !window.ShadyCSS.nativeShadow) {
        window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);
      } else if (supportsAdoptingStyleSheets) {
        this.renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
      } else {
        this._needsShimAdoptedStyleSheets = true;
      }
    }
    connectedCallback() {
      super.connectedCallback();
      if (this.hasUpdated && window.ShadyCSS !== void 0) {
        window.ShadyCSS.styleElement(this);
      }
    }
    update(changedProperties) {
      const templateResult = this.render();
      super.update(changedProperties);
      if (templateResult !== renderNotImplemented) {
        this.constructor.render(templateResult, this.renderRoot, {scopeName: this.localName, eventContext: this});
      }
      if (this._needsShimAdoptedStyleSheets) {
        this._needsShimAdoptedStyleSheets = false;
        this.constructor._styles.forEach((s) => {
          const style = document.createElement(\\"style\\");
          style.textContent = s.cssText;
          this.renderRoot.appendChild(style);
        });
      }
    }
    render() {
      return renderNotImplemented;
    }
  };
  LitElement[\\"finalized\\"] = true;
  LitElement.render = render;
});
// PKG/lit-element.js
var require_lit_element2 = __commonJS((exports) => {
  __exportStar(exports, __toModule(require_lit_element()));
});
// ../../node_modules/lit-html/lib/shady-render.js
import {removeNodes} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/dom.js\\";
import {insertNodeIntoTemplate, removeNodesFromTemplate} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/modify-XXXXXXXX.js\\";
import {parts, render as litRender} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/render.js\\";
import {templateCaches} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/template-factory.js\\";
import {TemplateInstance} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/template-XXXXXXXX.js\\";
import {marker, Template} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/shady-render.js/template.js\\";
import {html, svg, TemplateResult} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lib/lit-html.js\\";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var getTemplateCacheKey = (type, scopeName) => \`\${type}--\${scopeName}\`;
var compatibleShadyCSSVersion = true;
if (typeof window.ShadyCSS === \\"undefined\\") {
  compatibleShadyCSSVersion = false;
} else if (typeof window.ShadyCSS.prepareTemplateDom === \\"undefined\\") {
  console.warn(\`Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1.\`);
  compatibleShadyCSSVersion = false;
}
var shadyTemplateFactory = (scopeName) => (result) => {
  const cacheKey = getTemplateCacheKey(result.type, scopeName);
  let templateCache = templateCaches.get(cacheKey);
  if (templateCache === void 0) {
    templateCache = {
      stringsArray: new WeakMap(),
      keyString: new Map()
    };
    templateCaches.set(cacheKey, templateCache);
  }
  let template = templateCache.stringsArray.get(result.strings);
  if (template !== void 0) {
    return template;
  }
  const key = result.strings.join(marker);
  template = templateCache.keyString.get(key);
  if (template === void 0) {
    const element = result.getTemplateElement();
    if (compatibleShadyCSSVersion) {
      window.ShadyCSS.prepareTemplateDom(element, scopeName);
    }
    template = new Template(result, element);
    templateCache.keyString.set(key, template);
  }
  templateCache.stringsArray.set(result.strings, template);
  return template;
};
var TEMPLATE_TYPES = [\\"html\\", \\"svg\\"];
var removeStylesFromLitTemplates = (scopeName) => {
  TEMPLATE_TYPES.forEach((type) => {
    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
    if (templates !== void 0) {
      templates.keyString.forEach((template) => {
        const {element: {content}} = template;
        const styles = new Set();
        Array.from(content.querySelectorAll(\\"style\\")).forEach((s) => {
          styles.add(s);
        });
        removeNodesFromTemplate(template, styles);
      });
    }
  });
};
var shadyRenderSet = new Set();
var prepareTemplateStyles = (scopeName, renderedDOM, template) => {
  shadyRenderSet.add(scopeName);
  const templateElement = !!template ? template.element : document.createElement(\\"template\\");
  const styles = renderedDOM.querySelectorAll(\\"style\\");
  const {length} = styles;
  if (length === 0) {
    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
    return;
  }
  const condensedStyle = document.createElement(\\"style\\");
  for (let i = 0; i < length; i++) {
    const style2 = styles[i];
    style2.parentNode.removeChild(style2);
    condensedStyle.textContent += style2.textContent;
  }
  removeStylesFromLitTemplates(scopeName);
  const content = templateElement.content;
  if (!!template) {
    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);
  } else {
    content.insertBefore(condensedStyle, content.firstChild);
  }
  window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
  const style = content.querySelector(\\"style\\");
  if (window.ShadyCSS.nativeShadow && style !== null) {
    renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
  } else if (!!template) {
    content.insertBefore(condensedStyle, content.firstChild);
    const removes = new Set();
    removes.add(condensedStyle);
    removeNodesFromTemplate(template, removes);
  }
};
var render = (result, container, options) => {
  if (!options || typeof options !== \\"object\\" || !options.scopeName) {
    throw new Error(\\"The \`scopeName\` option is required.\\");
  }
  const scopeName = options.scopeName;
  const hasRendered = parts.has(container);
  const needsScoping = compatibleShadyCSSVersion && container.nodeType === 11 && !!container.host;
  const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
  const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
  litRender(result, renderContainer, Object.assign({templateFactory: shadyTemplateFactory(scopeName)}, options));
  if (firstScopeRender) {
    const part = parts.get(renderContainer);
    parts.delete(renderContainer);
    const template = part.value instanceof TemplateInstance ? part.value.template : void 0;
    prepareTemplateStyles(scopeName, renderContainer, template);
    removeNodes(container, container.firstChild);
    container.appendChild(renderContainer);
    parts.set(container, part);
  }
  if (!hasRendered && needsScoping) {
    window.ShadyCSS.styleElement(container.host);
  }
};
// ../../node_modules/lit-html/lit-html.js
import {defaultTemplateProcessor} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/default-template-processor.js\\";
import {SVGTemplateResult, TemplateResult as TemplateResult2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template-result.js\\";
import {DefaultTemplateProcessor, defaultTemplateProcessor as defaultTemplateProcessor2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/default-template-processor.js\\";
import {directive, isDirective} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/directive.js\\";
import {removeNodes as removeNodes2, reparentNodes} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/dom.js\\";
import {noChange, nothing} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/part.js\\";
import {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/parts.js\\";
import {parts as parts2, render as render2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/render.js\\";
import {templateCaches as templateCaches2, templateFactory} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template-factory.js\\";
import {TemplateInstance as TemplateInstance2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template-XXXXXXXX.js\\";
import {SVGTemplateResult as SVGTemplateResult2, TemplateResult as TemplateResult3} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template-result.js\\";
import {createMarker, isTemplatePartActive, Template as Template2} from \\"/Users/fks/Code/snowpack/node_modules/lit-html/lit-html.js/lib/template.js\\";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
if (typeof window !== \\"undefined\\") {
  (window[\\"litHtmlVersions\\"] || (window[\\"litHtmlVersions\\"] = [])).push(\\"1.3.0\\");
}
var html2 = (strings, ...values) => new TemplateResult2(strings, values, \\"html\\", defaultTemplateProcessor);
var svg2 = (strings, ...values) => new SVGTemplateResult(strings, values, \\"svg\\", defaultTemplateProcessor);
export default require_lit_element2();
//# sourceMappingURL=lit-element.js.map"
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: _snowpack/pkg/lit-element.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/lit-element.js.map\\";"`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/lit-element.js",
  "_snowpack/pkg/lit-element.js.map",
  "_snowpack/pkg/lit-element.js.map.proxy.js",
  "dist/app-root.js",
  "dist/index.js",
  "favicon.ico",
  "index.css",
  "index.html",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: dist/app-root.js 1`] = `
"function _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }
function _getDecoratorsApi() { _getDecoratorsApi = function () { return api; }; var api = { elementsDefinitionOrder: [[\\"method\\"], [\\"field\\"]], initializeInstanceElements: function (O, elements) { [\\"method\\", \\"field\\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \\"own\\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function (F, elements) { var proto = F.prototype; [\\"method\\", \\"field\\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \\"static\\" || placement === \\"prototype\\")) { var receiver = placement === \\"static\\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function (receiver, element) { var descriptor = element.descriptor; if (element.kind === \\"field\\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function (elements, decorators) { var newElements = []; var finishers = []; var placements = { static: [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function (element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\\"Duplicated element (\\" + element.key + \\")\\"); } keys.push(element.key); }, decorateElement: function (element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function (elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\\"Duplicated element (\\" + elements[j].key + \\")\\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function (element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \\"Descriptor\\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \\"field\\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function (elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \\"finisher\\", \\"An element descriptor\\"); this.disallowProperty(elementObject, \\"extras\\", \\"An element descriptor\\"); return element; }, this); }, toElementDescriptor: function (elementObject) { var kind = String(elementObject.kind); if (kind !== \\"method\\" && kind !== \\"field\\") { throw new TypeError('An element descriptor\\\\'s .kind property must be either \\"method\\" or' + ' \\"field\\", but a decorator created an element descriptor with' + ' .kind \\"' + kind + '\\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \\"static\\" && placement !== \\"prototype\\" && placement !== \\"own\\") { throw new TypeError('An element descriptor\\\\'s .placement property must be one of \\"static\\",' + ' \\"prototype\\" or \\"own\\", but a decorator created an element descriptor' + ' with .placement \\"' + placement + '\\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \\"elements\\", \\"An element descriptor\\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \\"field\\") { this.disallowProperty(elementObject, \\"initializer\\", \\"A method descriptor\\"); } else { this.disallowProperty(descriptor, \\"get\\", \\"The property descriptor of a field descriptor\\"); this.disallowProperty(descriptor, \\"set\\", \\"The property descriptor of a field descriptor\\"); this.disallowProperty(descriptor, \\"value\\", \\"The property descriptor of a field descriptor\\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function (elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \\"finisher\\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function (elements) { var obj = { kind: \\"class\\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \\"Descriptor\\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function (obj) { var kind = String(obj.kind); if (kind !== \\"class\\") { throw new TypeError('A class descriptor\\\\'s .kind property must be \\"class\\", but a decorator' + ' created a class descriptor with .kind \\"' + kind + '\\"'); } this.disallowProperty(obj, \\"key\\", \\"A class descriptor\\"); this.disallowProperty(obj, \\"placement\\", \\"A class descriptor\\"); this.disallowProperty(obj, \\"descriptor\\", \\"A class descriptor\\"); this.disallowProperty(obj, \\"initializer\\", \\"A class descriptor\\"); this.disallowProperty(obj, \\"extras\\", \\"A class descriptor\\"); var finisher = _optionalCallableProperty(obj, \\"finisher\\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function (constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \\"function\\") { throw new TypeError(\\"Finishers must return a constructor.\\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function (obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \\" can't have a .\\" + name + \\" property.\\"); } } }; return api; }
function _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \\"method\\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \\"get\\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \\"set\\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \\"field\\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \\"field\\" ? \\"field\\" : \\"method\\", key: key, placement: def.static ? \\"static\\" : def.kind === \\"field\\" ? \\"own\\" : \\"prototype\\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \\"field\\") element.initializer = def.value; return element; }
function _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }
function _coalesceClassElements(elements) { var newElements = []; var isSameElement = function (other) { return other.kind === \\"method\\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \\"method\\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\\"Duplicated methods (\\" + element.key + \\") can't be decorated.\\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\\"Decorators can't be placed on different accessors with for \\" + \\"the same property (\\" + element.key + \\").\\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }
function _hasDecorators(element) { return element.decorators && element.decorators.length; }
function _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }
function _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \\"function\\") { throw new TypeError(\\"Expected '\\" + name + \\"' to be a function\\"); } return value; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, \\"string\\"); return typeof key === \\"symbol\\" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== \\"object\\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \\"default\\"); if (typeof res !== \\"object\\") return res; throw new TypeError(\\"@@toPrimitive must return a primitive value.\\"); } return (hint === \\"string\\" ? String : Number)(input); }
function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.In order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\"); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\"string\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\"Object\\" && o.constructor) n = o.constructor.name; if (n === \\"Map\\" || n === \\"Set\\") return Array.from(o); if (n === \\"Arguments\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArray(iter) { if (typeof Symbol !== \\"undefined\\" && Symbol.iterator in Object(iter)) return Array.from(iter); }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { customElement, property, LitElement, html, css } from '../_snowpack/pkg/lit-element.js';
export let AppRoot = _decorate([customElement('app-root')], function (_initialize, _LitElement) {
  class AppRoot extends _LitElement {
    constructor(...args) {
      super(...args);
      _initialize(this);
    }
  }
  return {
    F: AppRoot,
    d: [{
      kind: \\"field\\",
      decorators: [property()],
      key: \\"message\\",
      value() {
        return 'Learn LitElement';
      }
    }, {
      kind: \\"get\\",
      static: true,
      key: \\"styles\\",
      value: function styles() {
        return css\`
      h1 {
        font-size: 4rem;
      }
      .wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        height: 100vh;
        background-color: #2196f3;
        background: linear-gradient(315deg, #b4d2ea 0%, #2196f3 100%);
        font-size: 24px;
      }
      .link {
        color: white;
      }
    \`;
      }
    }, {
      kind: \\"method\\",
      key: \\"render\\",
      value: function render() {
        return html\`
      <div class=\\"wrapper\\">
        <h1>LitElement + Snowpack</h1>
        <p>Edit <code>src/app-root.ts</code> and save to reload.</p>
        <a
          class=\\"link\\"
          href=\\"https://lit-element.polymer-project.org/\\"
          target=\\"_blank\\"
          rel=\\"noopener noreferrer\\"
        >
          \${this.message}
        </a>
      </div>
    \`;
      }
    }]
  };
}, LitElement);"
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: dist/index.js 1`] = `"import './app-root.js';"`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: index.css 1`] = `
"body {
  font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\", \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\", sans-serif;
  color: white;
  margin: 0;
  padding: 0;
}"
`;

exports[`create-snowpack-app app-template-lit-element-typescript > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/index.css\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <app-root></app-root>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-minimal > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-minimal > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "index.css",
  "index.html",
  "index.js",
  "package.json",
  "README.md",
  "snowpack.config.js",
]
`;

exports[`create-snowpack-app app-template-minimal > build: index.css 1`] = `
"/* Add CSS styles here! */
body {
  font-family: sans-serif;
}"
`;

exports[`create-snowpack-app app-template-minimal > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Starter Snowpack App\\" />
    <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/index.css\\" />
    <title>Starter Snowpack App</title>
  </head>
  <body>
    <h1>Welcome to Snowpack!</h1>
    <script type=\\"module\\" src=\\"/index.js\\"></script>
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-minimal > build: index.js 1`] = `
"/* Add JavaScript code here! */
console.log('Hello World! You did it! Welcome to Snowpack :D');"
`;

exports[`create-snowpack-app app-template-minimal > build: package.json 1`] = `
"{
  \\"name\\": \\"@snowpack/app-template-minimal\\",
  \\"description\\": \\"A preconfigured minimal template for Snowpack\\",
  \\"version\\": \\"2.0.0\\",
  \\"license\\": \\"MIT\\",
  \\"homepage\\": \\"https://github.com/snowpackjs/snowpack/tree/main/create-snowpack-app/app-template-preact#readme\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://github.com/snowpackjs/snowpack.git\\",
    \\"directory\\": \\"create-snowpack-app/app-template-minimal\\"
  },
  \\"keywords\\": [
    \\"csa-template\\"
  ],
  \\"main\\": \\"index.js\\",
  \\"scripts\\": {
    \\"start\\": \\"snowpack dev\\",
    \\"build\\": \\"snowpack build\\",
    \\"test\\": \\"echo \\\\\\"This template does not include a test runner by default.\\\\\\" && exit 1\\"
  },
  \\"devDependencies\\": {
    \\"snowpack\\": \\"^3.0.1\\"
  }
}"
`;

exports[`create-snowpack-app app-template-minimal > build: snowpack.config.js 1`] = `
"/** @type {import(\\"snowpack\\").SnowpackUserConfig } */
module.exports = {
  mount: {
  },
  plugins: [
  ],
  routes: [
    // {\\"match\\": \\"routes\\", \\"src\\": \\".*\\", \\"dest\\": \\"/index.html\\"},
  ],
  optimize: {
    // \\"bundle\\": true,
  },
  packageOptions: {
  },
  devOptions: {
  },
  buildOptions: {
  },
};"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/preact/dist/preact.module.js\\": {
      \\"bytes\\": 10267,
      \\"imports\\": []
    },
    \\"PKG/preact.js\\": {
      \\"bytes\\": 133,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/dist/preact.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/preact/devtools/dist/devtools.module.js\\": {
      \\"bytes\\": 240,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/dist/preact.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"PKG/preact/devtools.js\\": {
      \\"bytes\\": 138,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/devtools/dist/devtools.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/preact/hooks/dist/hooks.module.js\\": {
      \\"bytes\\": 2641,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/dist/preact.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"PKG/preact/hooks.js\\": {
      \\"bytes\\": 138,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/hooks/dist/hooks.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/preact.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 56383
    },
    \\"build/_snowpack/pkg/preact.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [
        \\"Component\\",
        \\"Fragment\\",
        \\"cloneElement\\",
        \\"createContext\\",
        \\"createElement\\",
        \\"createRef\\",
        \\"h\\",
        \\"hydrate\\",
        \\"isValidElement\\",
        \\"options\\",
        \\"render\\",
        \\"toChildArray\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/preact/dist/preact.module.js\\": {
          \\"bytesInOutput\\": 1416
        },
        \\"PKG/preact.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 1831
    },
    \\"build/_snowpack/pkg/preact/devtools.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 530
    },
    \\"build/_snowpack/pkg/preact/devtools.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [],
      \\"inputs\\": {
        \\"../../node_modules/preact/devtools/dist/devtools.module.js\\": {
          \\"bytesInOutput\\": 145
        }
      },
      \\"bytes\\": 299
    },
    \\"build/_snowpack/pkg/preact/hooks.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 14217
    },
    \\"build/_snowpack/pkg/preact/hooks.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [
        \\"useCallback\\",
        \\"useContext\\",
        \\"useDebugValue\\",
        \\"useEffect\\",
        \\"useErrorBoundary\\",
        \\"useImperativeHandle\\",
        \\"useLayoutEffect\\",
        \\"useMemo\\",
        \\"useReducer\\",
        \\"useRef\\",
        \\"useState\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/preact/hooks/dist/hooks.module.js\\": {
          \\"bytesInOutput\\": 3448
        },
        \\"PKG/preact/hooks.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 3817
    },
    \\"build/_snowpack/pkg/chunk.VRNFUDSI.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 66687
    },
    \\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"$\\",
        \\"B\\",
        \\"d\\",
        \\"e\\",
        \\"f\\",
        \\"h\\",
        \\"j\\",
        \\"l\\",
        \\"n\\",
        \\"o\\",
        \\"p\\",
        \\"s\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/preact/dist/preact.module.js\\": {
          \\"bytesInOutput\\": 13227
        }
      },
      \\"bytes\\": 13393
    }
  }
}"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/preact/dist/preact.module.js\\":{\\"bytes\\":10267,\\"imports\\":[]},\\"PKG/preact.js\\":{\\"bytes\\":133,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/dist/preact.module.js\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/preact/devtools/dist/devtools.module.js\\":{\\"bytes\\":240,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/dist/preact.module.js\\",\\"kind\\":\\"import-statement\\"}]},\\"PKG/preact/devtools.js\\":{\\"bytes\\":138,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/devtools/dist/devtools.module.js\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/preact/hooks/dist/hooks.module.js\\":{\\"bytes\\":2641,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/dist/preact.module.js\\",\\"kind\\":\\"import-statement\\"}]},\\"PKG/preact/hooks.js\\":{\\"bytes\\":138,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/hooks/dist/hooks.module.js\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/preact.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":56383},\\"build/_snowpack/pkg/preact.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[\\"Component\\",\\"Fragment\\",\\"cloneElement\\",\\"createContext\\",\\"createElement\\",\\"createRef\\",\\"h\\",\\"hydrate\\",\\"isValidElement\\",\\"options\\",\\"render\\",\\"toChildArray\\"],\\"inputs\\":{\\"../../node_modules/preact/dist/preact.module.js\\":{\\"bytesInOutput\\":1416},\\"PKG/preact.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":1831},\\"build/_snowpack/pkg/preact/devtools.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":530},\\"build/_snowpack/pkg/preact/devtools.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[],\\"inputs\\":{\\"../../node_modules/preact/devtools/dist/devtools.module.js\\":{\\"bytesInOutput\\":145}},\\"bytes\\":299},\\"build/_snowpack/pkg/preact/hooks.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":14217},\\"build/_snowpack/pkg/preact/hooks.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[\\"useCallback\\",\\"useContext\\",\\"useDebugValue\\",\\"useEffect\\",\\"useErrorBoundary\\",\\"useImperativeHandle\\",\\"useLayoutEffect\\",\\"useMemo\\",\\"useReducer\\",\\"useRef\\",\\"useState\\"],\\"inputs\\":{\\"../../node_modules/preact/hooks/dist/hooks.module.js\\":{\\"bytesInOutput\\":3448},\\"PKG/preact/hooks.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":3817},\\"build/_snowpack/pkg/chunk.VRNFUDSI.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":66687},\\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\":{\\"imports\\":[],\\"exports\\":[\\"$\\",\\"B\\",\\"d\\",\\"e\\",\\"f\\",\\"h\\",\\"j\\",\\"l\\",\\"n\\",\\"o\\",\\"p\\",\\"s\\"],\\"inputs\\":{\\"../../node_modules/preact/dist/preact.module.js\\":{\\"bytesInOutput\\":13227}},\\"bytes\\":13393}}};
export default json;"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/chunk.2NDQU4AK.js 1`] = `
"// ../../node_modules/preact/dist/preact.module.js
var n;
var l;
var u;
var i;
var t;
var o;
var r;
var f = {};
var e = [];
var c = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function s(n2, l2) {
  for (var u2 in l2)
    n2[u2] = l2[u2];
  return n2;
}
function a(n2) {
  var l2 = n2.parentNode;
  l2 && l2.removeChild(n2);
}
function h(l2, u2, i2, t2, o2) {
  var r2 = {type: l2, props: u2, key: i2, ref: t2, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: o2 == null ? ++n.__v : o2};
  return n.vnode != null && n.vnode(r2), r2;
}
function p(n2) {
  return n2.children;
}
function d(n2, l2) {
  this.props = n2, this.context = l2;
}
function _(n2, l2) {
  if (l2 == null)
    return n2.__ ? _(n2.__, n2.__.__k.indexOf(n2) + 1) : null;
  for (var u2; l2 < n2.__k.length; l2++)
    if ((u2 = n2.__k[l2]) != null && u2.__e != null)
      return u2.__e;
  return typeof n2.type == \\"function\\" ? _(n2) : null;
}
function w(n2) {
  var l2, u2;
  if ((n2 = n2.__) != null && n2.__c != null) {
    for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++)
      if ((u2 = n2.__k[l2]) != null && u2.__e != null) {
        n2.__e = n2.__c.base = u2.__e;
        break;
      }
    return w(n2);
  }
}
function k(l2) {
  (!l2.__d && (l2.__d = true) && u.push(l2) && !g.__r++ || t !== n.debounceRendering) && ((t = n.debounceRendering) || i)(g);
}
function g() {
  for (var n2; g.__r = u.length; )
    n2 = u.sort(function(n3, l2) {
      return n3.__v.__b - l2.__v.__b;
    }), u = [], n2.some(function(n3) {
      var l2, u2, i2, t2, o2, r2;
      n3.__d && (o2 = (t2 = (l2 = n3).__v).__e, (r2 = l2.__P) && (u2 = [], (i2 = s({}, t2)).__v = t2.__v + 1, $(r2, t2, i2, l2.__n, r2.ownerSVGElement !== void 0, t2.__h != null ? [o2] : null, u2, o2 == null ? _(t2) : o2, t2.__h), j(u2, t2), t2.__e != o2 && w(t2)));
    });
}
function m(n2, l2, u2, i2, t2, o2, r2, c2, s2, v) {
  var y, d2, w2, k2, g2, m2, x, P2 = i2 && i2.__k || e, C2 = P2.length;
  for (s2 == f && (s2 = r2 != null ? r2[0] : C2 ? _(i2, 0) : null), u2.__k = [], y = 0; y < l2.length; y++)
    if ((k2 = u2.__k[y] = (k2 = l2[y]) == null || typeof k2 == \\"boolean\\" ? null : typeof k2 == \\"string\\" || typeof k2 == \\"number\\" ? h(null, k2, null, null, k2) : Array.isArray(k2) ? h(p, {children: k2}, null, null, null) : k2.__b > 0 ? h(k2.type, k2.props, k2.key, null, k2.__v) : k2) != null) {
      if (k2.__ = u2, k2.__b = u2.__b + 1, (w2 = P2[y]) === null || w2 && k2.key == w2.key && k2.type === w2.type)
        P2[y] = void 0;
      else
        for (d2 = 0; d2 < C2; d2++) {
          if ((w2 = P2[d2]) && k2.key == w2.key && k2.type === w2.type) {
            P2[d2] = void 0;
            break;
          }
          w2 = null;
        }
      $(n2, k2, w2 = w2 || f, t2, o2, r2, c2, s2, v), g2 = k2.__e, (d2 = k2.ref) && w2.ref != d2 && (x || (x = []), w2.ref && x.push(w2.ref, null, k2), x.push(d2, k2.__c || g2, k2)), g2 != null ? (m2 == null && (m2 = g2), typeof k2.type == \\"function\\" && k2.__k != null && k2.__k === w2.__k ? k2.__d = s2 = b(k2, s2, n2) : s2 = A(n2, k2, w2, P2, r2, g2, s2), v || u2.type !== \\"option\\" ? typeof u2.type == \\"function\\" && (u2.__d = s2) : n2.value = \\"\\") : s2 && w2.__e == s2 && s2.parentNode != n2 && (s2 = _(w2));
    }
  if (u2.__e = m2, r2 != null && typeof u2.type != \\"function\\")
    for (y = r2.length; y--; )
      r2[y] != null && a(r2[y]);
  for (y = C2; y--; )
    P2[y] != null && (typeof u2.type == \\"function\\" && P2[y].__e != null && P2[y].__e == u2.__d && (u2.__d = _(i2, y + 1)), L(P2[y], P2[y]));
  if (x)
    for (y = 0; y < x.length; y++)
      I(x[y], x[++y], x[++y]);
}
function b(n2, l2, u2) {
  var i2, t2;
  for (i2 = 0; i2 < n2.__k.length; i2++)
    (t2 = n2.__k[i2]) && (t2.__ = n2, l2 = typeof t2.type == \\"function\\" ? b(t2, l2, u2) : A(u2, t2, t2, n2.__k, null, t2.__e, l2));
  return l2;
}
function A(n2, l2, u2, i2, t2, o2, r2) {
  var f2, e2, c2;
  if (l2.__d !== void 0)
    f2 = l2.__d, l2.__d = void 0;
  else if (t2 == u2 || o2 != r2 || o2.parentNode == null)
    n:
      if (r2 == null || r2.parentNode !== n2)
        n2.appendChild(o2), f2 = null;
      else {
        for (e2 = r2, c2 = 0; (e2 = e2.nextSibling) && c2 < i2.length; c2 += 2)
          if (e2 == o2)
            break n;
        n2.insertBefore(o2, r2), f2 = r2;
      }
  return f2 !== void 0 ? f2 : o2.nextSibling;
}
function P(n2, l2, u2, i2, t2) {
  var o2;
  for (o2 in u2)
    o2 === \\"children\\" || o2 === \\"key\\" || o2 in l2 || z(n2, o2, null, u2[o2], i2);
  for (o2 in l2)
    t2 && typeof l2[o2] != \\"function\\" || o2 === \\"children\\" || o2 === \\"key\\" || o2 === \\"value\\" || o2 === \\"checked\\" || u2[o2] === l2[o2] || z(n2, o2, l2[o2], u2[o2], i2);
}
function C(n2, l2, u2) {
  l2[0] === \\"-\\" ? n2.setProperty(l2, u2) : n2[l2] = u2 == null ? \\"\\" : typeof u2 != \\"number\\" || c.test(l2) ? u2 : u2 + \\"px\\";
}
function z(n2, l2, u2, i2, t2) {
  var o2, r2, f2;
  if (t2 && l2 == \\"className\\" && (l2 = \\"class\\"), l2 === \\"style\\")
    if (typeof u2 == \\"string\\")
      n2.style.cssText = u2;
    else {
      if (typeof i2 == \\"string\\" && (n2.style.cssText = i2 = \\"\\"), i2)
        for (l2 in i2)
          u2 && l2 in u2 || C(n2.style, l2, \\"\\");
      if (u2)
        for (l2 in u2)
          i2 && u2[l2] === i2[l2] || C(n2.style, l2, u2[l2]);
    }
  else
    l2[0] === \\"o\\" && l2[1] === \\"n\\" ? (o2 = l2 !== (l2 = l2.replace(/Capture$/, \\"\\")), (r2 = l2.toLowerCase()) in n2 && (l2 = r2), l2 = l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + o2] = u2, f2 = o2 ? T : N, u2 ? i2 || n2.addEventListener(l2, f2, o2) : n2.removeEventListener(l2, f2, o2)) : l2 !== \\"list\\" && l2 !== \\"tagName\\" && l2 !== \\"form\\" && l2 !== \\"type\\" && l2 !== \\"size\\" && l2 !== \\"download\\" && l2 !== \\"href\\" && !t2 && l2 in n2 ? n2[l2] = u2 == null ? \\"\\" : u2 : typeof u2 != \\"function\\" && l2 !== \\"dangerouslySetInnerHTML\\" && (l2 !== (l2 = l2.replace(/xlink:?/, \\"\\")) ? u2 == null || u2 === false ? n2.removeAttributeNS(\\"http://www.w3.org/1999/xlink\\", l2.toLowerCase()) : n2.setAttributeNS(\\"http://www.w3.org/1999/xlink\\", l2.toLowerCase(), u2) : u2 == null || u2 === false && !/^ar/.test(l2) ? n2.removeAttribute(l2) : n2.setAttribute(l2, u2));
}
function N(l2) {
  this.l[l2.type + false](n.event ? n.event(l2) : l2);
}
function T(l2) {
  this.l[l2.type + true](n.event ? n.event(l2) : l2);
}
function $(l2, u2, i2, t2, o2, r2, f2, e2, c2) {
  var a2, v, h2, y, _2, w2, k2, g2, b2, x, A2, P2 = u2.type;
  if (u2.constructor !== void 0)
    return null;
  i2.__h != null && (c2 = i2.__h, e2 = u2.__e = i2.__e, u2.__h = null, r2 = [e2]), (a2 = n.__b) && a2(u2);
  try {
    n:
      if (typeof P2 == \\"function\\") {
        if (g2 = u2.props, b2 = (a2 = P2.contextType) && t2[a2.__c], x = a2 ? b2 ? b2.props.value : a2.__ : t2, i2.__c ? k2 = (v = u2.__c = i2.__c).__ = v.__E : (\\"prototype\\" in P2 && P2.prototype.render ? u2.__c = v = new P2(g2, x) : (u2.__c = v = new d(g2, x), v.constructor = P2, v.render = M), b2 && b2.sub(v), v.props = g2, v.state || (v.state = {}), v.context = x, v.__n = t2, h2 = v.__d = true, v.__h = []), v.__s == null && (v.__s = v.state), P2.getDerivedStateFromProps != null && (v.__s == v.state && (v.__s = s({}, v.__s)), s(v.__s, P2.getDerivedStateFromProps(g2, v.__s))), y = v.props, _2 = v.state, h2)
          P2.getDerivedStateFromProps == null && v.componentWillMount != null && v.componentWillMount(), v.componentDidMount != null && v.__h.push(v.componentDidMount);
        else {
          if (P2.getDerivedStateFromProps == null && g2 !== y && v.componentWillReceiveProps != null && v.componentWillReceiveProps(g2, x), !v.__e && v.shouldComponentUpdate != null && v.shouldComponentUpdate(g2, v.__s, x) === false || u2.__v === i2.__v) {
            v.props = g2, v.state = v.__s, u2.__v !== i2.__v && (v.__d = false), v.__v = u2, u2.__e = i2.__e, u2.__k = i2.__k, v.__h.length && f2.push(v);
            break n;
          }
          v.componentWillUpdate != null && v.componentWillUpdate(g2, v.__s, x), v.componentDidUpdate != null && v.__h.push(function() {
            v.componentDidUpdate(y, _2, w2);
          });
        }
        v.context = x, v.props = g2, v.state = v.__s, (a2 = n.__r) && a2(u2), v.__d = false, v.__v = u2, v.__P = l2, a2 = v.render(v.props, v.state, v.context), v.state = v.__s, v.getChildContext != null && (t2 = s(s({}, t2), v.getChildContext())), h2 || v.getSnapshotBeforeUpdate == null || (w2 = v.getSnapshotBeforeUpdate(y, _2)), A2 = a2 != null && a2.type === p && a2.key == null ? a2.props.children : a2, m(l2, Array.isArray(A2) ? A2 : [A2], u2, i2, t2, o2, r2, f2, e2, c2), v.base = u2.__e, u2.__h = null, v.__h.length && f2.push(v), k2 && (v.__E = v.__ = null), v.__e = false;
      } else
        r2 == null && u2.__v === i2.__v ? (u2.__k = i2.__k, u2.__e = i2.__e) : u2.__e = H(i2.__e, u2, i2, t2, o2, r2, f2, c2);
    (a2 = n.diffed) && a2(u2);
  } catch (l3) {
    u2.__v = null, (c2 || r2 != null) && (u2.__e = e2, u2.__h = !!c2, r2[r2.indexOf(e2)] = null), n.__e(l3, u2, i2);
  }
}
function j(l2, u2) {
  n.__c && n.__c(u2, l2), l2.some(function(u3) {
    try {
      l2 = u3.__h, u3.__h = [], l2.some(function(n2) {
        n2.call(u3);
      });
    } catch (l3) {
      n.__e(l3, u3.__v);
    }
  });
}
function H(n2, l2, u2, i2, t2, o2, r2, c2) {
  var s2, a2, v, h2, y, p2 = u2.props, d2 = l2.props;
  if (t2 = l2.type === \\"svg\\" || t2, o2 != null) {
    for (s2 = 0; s2 < o2.length; s2++)
      if ((a2 = o2[s2]) != null && ((l2.type === null ? a2.nodeType === 3 : a2.localName === l2.type) || n2 == a2)) {
        n2 = a2, o2[s2] = null;
        break;
      }
  }
  if (n2 == null) {
    if (l2.type === null)
      return document.createTextNode(d2);
    n2 = t2 ? document.createElementNS(\\"http://www.w3.org/2000/svg\\", l2.type) : document.createElement(l2.type, d2.is && {is: d2.is}), o2 = null, c2 = false;
  }
  if (l2.type === null)
    p2 === d2 || c2 && n2.data === d2 || (n2.data = d2);
  else {
    if (o2 != null && (o2 = e.slice.call(n2.childNodes)), v = (p2 = u2.props || f).dangerouslySetInnerHTML, h2 = d2.dangerouslySetInnerHTML, !c2) {
      if (o2 != null)
        for (p2 = {}, y = 0; y < n2.attributes.length; y++)
          p2[n2.attributes[y].name] = n2.attributes[y].value;
      (h2 || v) && (h2 && (v && h2.__html == v.__html || h2.__html === n2.innerHTML) || (n2.innerHTML = h2 && h2.__html || \\"\\"));
    }
    P(n2, d2, p2, t2, c2), h2 ? l2.__k = [] : (s2 = l2.props.children, m(n2, Array.isArray(s2) ? s2 : [s2], l2, u2, i2, l2.type !== \\"foreignObject\\" && t2, o2, r2, f, c2)), c2 || (\\"value\\" in d2 && (s2 = d2.value) !== void 0 && (s2 !== n2.value || l2.type === \\"progress\\" && !s2) && z(n2, \\"value\\", s2, p2.value, false), \\"checked\\" in d2 && (s2 = d2.checked) !== void 0 && s2 !== n2.checked && z(n2, \\"checked\\", s2, p2.checked, false));
  }
  return n2;
}
function I(l2, u2, i2) {
  try {
    typeof l2 == \\"function\\" ? l2(u2) : l2.current = u2;
  } catch (l3) {
    n.__e(l3, i2);
  }
}
function L(l2, u2, i2) {
  var t2, o2, r2;
  if (n.unmount && n.unmount(l2), (t2 = l2.ref) && (t2.current && t2.current !== l2.__e || I(t2, null, u2)), i2 || typeof l2.type == \\"function\\" || (i2 = (o2 = l2.__e) != null), l2.__e = l2.__d = void 0, (t2 = l2.__c) != null) {
    if (t2.componentWillUnmount)
      try {
        t2.componentWillUnmount();
      } catch (l3) {
        n.__e(l3, u2);
      }
    t2.base = t2.__P = null;
  }
  if (t2 = l2.__k)
    for (r2 = 0; r2 < t2.length; r2++)
      t2[r2] && L(t2[r2], u2, i2);
  o2 != null && a(o2);
}
function M(n2, l2, u2) {
  return this.constructor(n2, u2);
}
function B(n2, l2) {
  var u2 = {__c: l2 = \\"__cC\\" + r++, __: n2, Consumer: function(n3, l3) {
    return n3.children(l3);
  }, Provider: function(n3) {
    var u3, i2;
    return this.getChildContext || (u3 = [], (i2 = {})[l2] = this, this.getChildContext = function() {
      return i2;
    }, this.shouldComponentUpdate = function(n4) {
      this.props.value !== n4.value && u3.some(k);
    }, this.sub = function(n4) {
      u3.push(n4);
      var l3 = n4.componentWillUnmount;
      n4.componentWillUnmount = function() {
        u3.splice(u3.indexOf(n4), 1), l3 && l3.call(n4);
      };
    }), n3.children;
  }};
  return u2.Provider.__ = u2.Consumer.contextType = u2;
}
n = {__e: function(n2, l2) {
  for (var u2, i2, t2, o2 = l2.__h; l2 = l2.__; )
    if ((u2 = l2.__c) && !u2.__)
      try {
        if ((i2 = u2.constructor) && i2.getDerivedStateFromError != null && (u2.setState(i2.getDerivedStateFromError(n2)), t2 = u2.__d), u2.componentDidCatch != null && (u2.componentDidCatch(n2), t2 = u2.__d), t2)
          return l2.__h = o2, u2.__E = u2;
      } catch (l3) {
        n2 = l3;
      }
  throw n2;
}, __v: 0}, l = function(n2) {
  return n2 != null && n2.constructor === void 0;
}, d.prototype.setState = function(n2, l2) {
  var u2;
  u2 = this.__s != null && this.__s !== this.state ? this.__s : this.__s = s({}, this.state), typeof n2 == \\"function\\" && (n2 = n2(s({}, u2), this.props)), n2 && s(u2, n2), n2 != null && this.__v && (l2 && this.__h.push(l2), k(this));
}, d.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), k(this));
}, d.prototype.render = p, u = [], i = typeof Promise == \\"function\\" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, g.__r = 0, o = f, r = 0;
export {
  n,
  l,
  o,
  f,
  e,
  s,
  h,
  p,
  d,
  $,
  j,
  B
};
//# sourceMappingURL=chunk.VRNFUDSI.js.map"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/chunk.VRNFUDSI.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/chunk.VRNFUDSI.js.map\\";"`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"preact\\": \\"./preact.js\\",
    \\"preact/devtools\\": \\"./preact/devtools.js\\",
    \\"preact/hooks\\": \\"./preact/hooks.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/preact.js 1`] = `
"import {
  $,
  B,
  d,
  e,
  f,
  h,
  j,
  l,
  n,
  o,
  p,
  s
} from \\"./chunk.2NDQU4AK.js\\";
// ../../node_modules/preact/dist/preact.module.js
function v(n2, l2, u) {
  var i, t, o2, r = arguments, f2 = {};
  for (o2 in l2)
    o2 == \\"key\\" ? i = l2[o2] : o2 == \\"ref\\" ? t = l2[o2] : f2[o2] = l2[o2];
  if (arguments.length > 3)
    for (u = [u], o2 = 3; o2 < arguments.length; o2++)
      u.push(r[o2]);
  if (u != null && (f2.children = u), typeof n2 == \\"function\\" && n2.defaultProps != null)
    for (o2 in n2.defaultProps)
      f2[o2] === void 0 && (f2[o2] = n2.defaultProps[o2]);
  return h(n2, f2, i, t, null);
}
function y() {
  return {current: null};
}
function x(n2, l2) {
  return l2 = l2 || [], n2 == null || typeof n2 == \\"boolean\\" || (Array.isArray(n2) ? n2.some(function(n3) {
    x(n3, l2);
  }) : l2.push(n2)), l2;
}
function O(l2, u, i) {
  var t, r, c;
  n.__ && n.__(l2, u), r = (t = i === o) ? null : i && i.__k || u.__k, l2 = v(p, null, [l2]), c = [], $(u, (t ? u : i || u).__k = l2, r || f, f, u.ownerSVGElement !== void 0, i && !t ? [i] : r ? null : u.childNodes.length ? e.slice.call(u.childNodes) : null, c, i || f, t), j(c, l2);
}
function S(n2, l2) {
  O(n2, l2, o);
}
function q(n2, l2, u) {
  var i, t, o2, r = arguments, f2 = s({}, n2.props);
  for (o2 in l2)
    o2 == \\"key\\" ? i = l2[o2] : o2 == \\"ref\\" ? t = l2[o2] : f2[o2] = l2[o2];
  if (arguments.length > 3)
    for (u = [u], o2 = 3; o2 < arguments.length; o2++)
      u.push(r[o2]);
  return u != null && (f2.children = u), h(n2.type, f2, i || n2.key, t || n2.ref, null);
}
export {
  d as Component,
  p as Fragment,
  q as cloneElement,
  B as createContext,
  v as createElement,
  y as createRef,
  v as h,
  S as hydrate,
  l as isValidElement,
  n as options,
  O as render,
  x as toChildArray
};
//# sourceMappingURL=preact.js.map"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/preact.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/preact.js.map\\";"`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/preact/devtools.js 1`] = `
"import {
  d,
  n,
  p
} from \\"../chunk.2NDQU4AK.js\\";
// ../../node_modules/preact/devtools/dist/devtools.module.js
typeof window != \\"undefined\\" && window.__PREACT_DEVTOOLS__ && window.__PREACT_DEVTOOLS__.attachPreact(\\"10.5.9\\", n, {Fragment: p, Component: d});
//# sourceMappingURL=devtools.js.map"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/preact/devtools.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/preact/devtools.js.map\\";"`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/preact/hooks.js 1`] = `
"import {
  n
} from \\"../chunk.2NDQU4AK.js\\";
// ../../node_modules/preact/hooks/dist/hooks.module.js
var t;
var u;
var r;
var o = 0;
var i = [];
var c = n.__b;
var f = n.__r;
var e = n.diffed;
var a = n.__c;
var v = n.unmount;
function m(t2, r2) {
  n.__h && n.__h(u, t2, o || r2), o = 0;
  var i2 = u.__H || (u.__H = {__: [], __h: []});
  return t2 >= i2.__.length && i2.__.push({}), i2.__[t2];
}
function l(n2) {
  return o = 1, p(w, n2);
}
function p(n2, r2, o2) {
  var i2 = m(t++, 2);
  return i2.t = n2, i2.__c || (i2.__ = [o2 ? o2(r2) : w(void 0, r2), function(n3) {
    var t2 = i2.t(i2.__[0], n3);
    i2.__[0] !== t2 && (i2.__ = [t2, i2.__[1]], i2.__c.setState({}));
  }], i2.__c = u), i2.__;
}
function y(r2, o2) {
  var i2 = m(t++, 3);
  !n.__s && k(i2.__H, o2) && (i2.__ = r2, i2.__H = o2, u.__H.__h.push(i2));
}
function h(r2, o2) {
  var i2 = m(t++, 4);
  !n.__s && k(i2.__H, o2) && (i2.__ = r2, i2.__H = o2, u.__h.push(i2));
}
function s(n2) {
  return o = 5, d(function() {
    return {current: n2};
  }, []);
}
function _(n2, t2, u2) {
  o = 6, h(function() {
    typeof n2 == \\"function\\" ? n2(t2()) : n2 && (n2.current = t2());
  }, u2 == null ? u2 : u2.concat(n2));
}
function d(n2, u2) {
  var r2 = m(t++, 7);
  return k(r2.__H, u2) && (r2.__ = n2(), r2.__H = u2, r2.__h = n2), r2.__;
}
function A(n2, t2) {
  return o = 8, d(function() {
    return n2;
  }, t2);
}
function F(n2) {
  var r2 = u.context[n2.__c], o2 = m(t++, 9);
  return o2.__c = n2, r2 ? (o2.__ == null && (o2.__ = true, r2.sub(u)), r2.props.value) : n2.__;
}
function T(t2, u2) {
  n.useDebugValue && n.useDebugValue(u2 ? u2(t2) : t2);
}
function q(n2) {
  var r2 = m(t++, 10), o2 = l();
  return r2.__ = n2, u.componentDidCatch || (u.componentDidCatch = function(n3) {
    r2.__ && r2.__(n3), o2[1](n3);
  }), [o2[0], function() {
    o2[1](void 0);
  }];
}
function x() {
  i.forEach(function(t2) {
    if (t2.__P)
      try {
        t2.__H.__h.forEach(g), t2.__H.__h.forEach(j), t2.__H.__h = [];
      } catch (u2) {
        t2.__H.__h = [], n.__e(u2, t2.__v);
      }
  }), i = [];
}
n.__b = function(n2) {
  u = null, c && c(n2);
}, n.__r = function(n2) {
  f && f(n2), t = 0;
  var r2 = (u = n2.__c).__H;
  r2 && (r2.__h.forEach(g), r2.__h.forEach(j), r2.__h = []);
}, n.diffed = function(t2) {
  e && e(t2);
  var o2 = t2.__c;
  o2 && o2.__H && o2.__H.__h.length && (i.push(o2) !== 1 && r === n.requestAnimationFrame || ((r = n.requestAnimationFrame) || function(n2) {
    var t3, u2 = function() {
      clearTimeout(r2), b && cancelAnimationFrame(t3), setTimeout(n2);
    }, r2 = setTimeout(u2, 100);
    b && (t3 = requestAnimationFrame(u2));
  })(x)), u = void 0;
}, n.__c = function(t2, u2) {
  u2.some(function(t3) {
    try {
      t3.__h.forEach(g), t3.__h = t3.__h.filter(function(n2) {
        return !n2.__ || j(n2);
      });
    } catch (r2) {
      u2.some(function(n2) {
        n2.__h && (n2.__h = []);
      }), u2 = [], n.__e(r2, t3.__v);
    }
  }), a && a(t2, u2);
}, n.unmount = function(t2) {
  v && v(t2);
  var u2 = t2.__c;
  if (u2 && u2.__H)
    try {
      u2.__H.__.forEach(g);
    } catch (t3) {
      n.__e(t3, u2.__v);
    }
};
var b = typeof requestAnimationFrame == \\"function\\";
function g(n2) {
  var t2 = u;
  typeof n2.__c == \\"function\\" && n2.__c(), u = t2;
}
function j(n2) {
  var t2 = u;
  n2.__c = n2.__(), u = t2;
}
function k(n2, t2) {
  return !n2 || n2.length !== t2.length || t2.some(function(t3, u2) {
    return t3 !== n2[u2];
  });
}
function w(n2, t2) {
  return typeof t2 == \\"function\\" ? t2(n2) : t2;
}
export {
  A as useCallback,
  F as useContext,
  T as useDebugValue,
  y as useEffect,
  q as useErrorBoundary,
  _ as useImperativeHandle,
  h as useLayoutEffect,
  d as useMemo,
  p as useReducer,
  s as useRef,
  l as useState
};
//# sourceMappingURL=hooks.js.map"
`;

exports[`create-snowpack-app app-template-preact > build: _snowpack/pkg/preact/hooks.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/preact/hooks.js.map\\";"`;

exports[`create-snowpack-app app-template-preact > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/chunk.2NDQU4AK.js",
  "_snowpack/pkg/chunk.VRNFUDSI.js.map",
  "_snowpack/pkg/chunk.VRNFUDSI.js.map.proxy.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/preact.js",
  "_snowpack/pkg/preact.js.map",
  "_snowpack/pkg/preact.js.map.proxy.js",
  "_snowpack/pkg/preact/devtools.js",
  "_snowpack/pkg/preact/devtools.js.map",
  "_snowpack/pkg/preact/devtools.js.map.proxy.js",
  "_snowpack/pkg/preact/hooks.js",
  "_snowpack/pkg/preact/hooks.js.map",
  "_snowpack/pkg/preact/hooks.js.map.proxy.js",
  "dist/App.css",
  "dist/App.css.proxy.js",
  "dist/App.js",
  "dist/index.css",
  "dist/index.css.proxy.js",
  "dist/index.js",
  "dist/logo.png",
  "dist/logo.png.proxy.js",
  "favicon.ico",
  "index.html",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-preact > build: dist/App.css 1`] = `
".App {
  text-align: center;
}
.App code {
  background: #FFF3;
  padding: 4px 8px;
  border-radius: 4px;
}
.App p {
  margin: 0.4rem;
}
.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
.App-link {
  color: #61dafb;
}
.App-logo {
  height: 36vmin;
  pointer-events: none;
  margin-bottom: 3rem;
  animation: App-logo-spin infinite 1.6s ease-in-out alternate;
}
@keyframes App-logo-spin {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.06);
  }
}"
`;

exports[`create-snowpack-app app-template-preact > build: dist/App.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\".App {  text-align: center;}.App code {  background: #FFF3;  padding: 4px 8px;  border-radius: 4px;}.App p {  margin: 0.4rem;}.App-header {  background-color: #282c34;  min-height: 100vh;  display: flex;  flex-direction: column;  align-items: center;  justify-content: center;  font-size: calc(10px + 2vmin);  color: white;}.App-link {  color: #61dafb;}.App-logo {  height: 36vmin;  pointer-events: none;  margin-bottom: 3rem;  animation: App-logo-spin infinite 1.6s ease-in-out alternate;}@keyframes App-logo-spin {  from {    transform: scale(1);  }  to {    transform: scale(1.06);  }}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-preact > build: dist/App.js 1`] = `
"import {h} from \\"../_snowpack/pkg/preact.js\\";
import {useState, useEffect} from \\"../_snowpack/pkg/preact/hooks.js\\";
import logo from \\"./logo.png.proxy.js\\";
import \\"./App.css.proxy.js\\";
function App() {
  const [count, setCount] = useState(0);
  useEffect(() => {
    const timer = setTimeout(() => setCount(count + 1), 1e3);
    return () => clearTimeout(timer);
  }, [count, setCount]);
  return /* @__PURE__ */ h(\\"div\\", {
    className: \\"App\\"
  }, /* @__PURE__ */ h(\\"header\\", {
    className: \\"App-header\\"
  }, /* @__PURE__ */ h(\\"img\\", {
    src: logo,
    className: \\"App-logo\\",
    alt: \\"logo\\"
  }), /* @__PURE__ */ h(\\"p\\", null, \\"Edit \\", /* @__PURE__ */ h(\\"code\\", null, \\"src/App.jsx\\"), \\" and save to reload.\\"), /* @__PURE__ */ h(\\"p\\", null, \\"Page has been open for \\", /* @__PURE__ */ h(\\"code\\", null, count), \\" seconds.\\"), /* @__PURE__ */ h(\\"p\\", null, /* @__PURE__ */ h(\\"a\\", {
    className: \\"App-link\\",
    href: \\"https://preactjs.com\\",
    target: \\"_blank\\",
    rel: \\"noopener noreferrer\\"
  }, \\"Learn Preact\\"))));
}
export default App;"
`;

exports[`create-snowpack-app app-template-preact > build: dist/index.css 1`] = `
"body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}"
`;

exports[`create-snowpack-app app-template-preact > build: dist/index.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\"body {  margin: 0;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',    sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}code {  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',    monospace;}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-preact > build: dist/index.js 1`] = `
"import {h, render} from \\"../_snowpack/pkg/preact.js\\";
import \\"../_snowpack/pkg/preact/devtools.js\\";
import App from \\"./App.js\\";
import \\"./index.css.proxy.js\\";
render(/* @__PURE__ */ h(App, null), document.getElementById(\\"root\\"));"
`;

exports[`create-snowpack-app app-template-preact > build: dist/logo.png.proxy.js 1`] = `"export default \\"/dist/logo.png\\";"`;

exports[`create-snowpack-app app-template-preact > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <div id=\\"root\\"></div>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/preact/dist/preact.module.js\\": {
      \\"bytes\\": 10267,
      \\"imports\\": []
    },
    \\"PKG/preact.js\\": {
      \\"bytes\\": 133,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/dist/preact.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/preact/devtools/dist/devtools.module.js\\": {
      \\"bytes\\": 240,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/dist/preact.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"PKG/preact/devtools.js\\": {
      \\"bytes\\": 138,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/devtools/dist/devtools.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/preact/hooks/dist/hooks.module.js\\": {
      \\"bytes\\": 2641,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/dist/preact.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"PKG/preact/hooks.js\\": {
      \\"bytes\\": 138,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/preact/hooks/dist/hooks.module.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/preact.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 56383
    },
    \\"build/_snowpack/pkg/preact.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [
        \\"Component\\",
        \\"Fragment\\",
        \\"cloneElement\\",
        \\"createContext\\",
        \\"createElement\\",
        \\"createRef\\",
        \\"h\\",
        \\"hydrate\\",
        \\"isValidElement\\",
        \\"options\\",
        \\"render\\",
        \\"toChildArray\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/preact/dist/preact.module.js\\": {
          \\"bytesInOutput\\": 1416
        },
        \\"PKG/preact.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 1831
    },
    \\"build/_snowpack/pkg/preact/devtools.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 530
    },
    \\"build/_snowpack/pkg/preact/devtools.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [],
      \\"inputs\\": {
        \\"../../node_modules/preact/devtools/dist/devtools.module.js\\": {
          \\"bytesInOutput\\": 145
        }
      },
      \\"bytes\\": 299
    },
    \\"build/_snowpack/pkg/preact/hooks.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 14217
    },
    \\"build/_snowpack/pkg/preact/hooks.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [
        \\"useCallback\\",
        \\"useContext\\",
        \\"useDebugValue\\",
        \\"useEffect\\",
        \\"useErrorBoundary\\",
        \\"useImperativeHandle\\",
        \\"useLayoutEffect\\",
        \\"useMemo\\",
        \\"useReducer\\",
        \\"useRef\\",
        \\"useState\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/preact/hooks/dist/hooks.module.js\\": {
          \\"bytesInOutput\\": 3448
        },
        \\"PKG/preact/hooks.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 3817
    },
    \\"build/_snowpack/pkg/chunk.VRNFUDSI.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 66687
    },
    \\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"$\\",
        \\"B\\",
        \\"d\\",
        \\"e\\",
        \\"f\\",
        \\"h\\",
        \\"j\\",
        \\"l\\",
        \\"n\\",
        \\"o\\",
        \\"p\\",
        \\"s\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/preact/dist/preact.module.js\\": {
          \\"bytesInOutput\\": 13227
        }
      },
      \\"bytes\\": 13393
    }
  }
}"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/preact/dist/preact.module.js\\":{\\"bytes\\":10267,\\"imports\\":[]},\\"PKG/preact.js\\":{\\"bytes\\":133,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/dist/preact.module.js\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/preact/devtools/dist/devtools.module.js\\":{\\"bytes\\":240,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/dist/preact.module.js\\",\\"kind\\":\\"import-statement\\"}]},\\"PKG/preact/devtools.js\\":{\\"bytes\\":138,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/devtools/dist/devtools.module.js\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/preact/hooks/dist/hooks.module.js\\":{\\"bytes\\":2641,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/dist/preact.module.js\\",\\"kind\\":\\"import-statement\\"}]},\\"PKG/preact/hooks.js\\":{\\"bytes\\":138,\\"imports\\":[{\\"path\\":\\"../../node_modules/preact/hooks/dist/hooks.module.js\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/preact.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":56383},\\"build/_snowpack/pkg/preact.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[\\"Component\\",\\"Fragment\\",\\"cloneElement\\",\\"createContext\\",\\"createElement\\",\\"createRef\\",\\"h\\",\\"hydrate\\",\\"isValidElement\\",\\"options\\",\\"render\\",\\"toChildArray\\"],\\"inputs\\":{\\"../../node_modules/preact/dist/preact.module.js\\":{\\"bytesInOutput\\":1416},\\"PKG/preact.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":1831},\\"build/_snowpack/pkg/preact/devtools.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":530},\\"build/_snowpack/pkg/preact/devtools.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[],\\"inputs\\":{\\"../../node_modules/preact/devtools/dist/devtools.module.js\\":{\\"bytesInOutput\\":145}},\\"bytes\\":299},\\"build/_snowpack/pkg/preact/hooks.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":14217},\\"build/_snowpack/pkg/preact/hooks.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[\\"useCallback\\",\\"useContext\\",\\"useDebugValue\\",\\"useEffect\\",\\"useErrorBoundary\\",\\"useImperativeHandle\\",\\"useLayoutEffect\\",\\"useMemo\\",\\"useReducer\\",\\"useRef\\",\\"useState\\"],\\"inputs\\":{\\"../../node_modules/preact/hooks/dist/hooks.module.js\\":{\\"bytesInOutput\\":3448},\\"PKG/preact/hooks.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":3817},\\"build/_snowpack/pkg/chunk.VRNFUDSI.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":66687},\\"build/_snowpack/pkg/chunk.2NDQU4AK.js\\":{\\"imports\\":[],\\"exports\\":[\\"$\\",\\"B\\",\\"d\\",\\"e\\",\\"f\\",\\"h\\",\\"j\\",\\"l\\",\\"n\\",\\"o\\",\\"p\\",\\"s\\"],\\"inputs\\":{\\"../../node_modules/preact/dist/preact.module.js\\":{\\"bytesInOutput\\":13227}},\\"bytes\\":13393}}};
export default json;"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/chunk.2NDQU4AK.js 1`] = `
"// ../../node_modules/preact/dist/preact.module.js
var n;
var l;
var u;
var i;
var t;
var o;
var r;
var f = {};
var e = [];
var c = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function s(n2, l2) {
  for (var u2 in l2)
    n2[u2] = l2[u2];
  return n2;
}
function a(n2) {
  var l2 = n2.parentNode;
  l2 && l2.removeChild(n2);
}
function h(l2, u2, i2, t2, o2) {
  var r2 = {type: l2, props: u2, key: i2, ref: t2, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: o2 == null ? ++n.__v : o2};
  return n.vnode != null && n.vnode(r2), r2;
}
function p(n2) {
  return n2.children;
}
function d(n2, l2) {
  this.props = n2, this.context = l2;
}
function _(n2, l2) {
  if (l2 == null)
    return n2.__ ? _(n2.__, n2.__.__k.indexOf(n2) + 1) : null;
  for (var u2; l2 < n2.__k.length; l2++)
    if ((u2 = n2.__k[l2]) != null && u2.__e != null)
      return u2.__e;
  return typeof n2.type == \\"function\\" ? _(n2) : null;
}
function w(n2) {
  var l2, u2;
  if ((n2 = n2.__) != null && n2.__c != null) {
    for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++)
      if ((u2 = n2.__k[l2]) != null && u2.__e != null) {
        n2.__e = n2.__c.base = u2.__e;
        break;
      }
    return w(n2);
  }
}
function k(l2) {
  (!l2.__d && (l2.__d = true) && u.push(l2) && !g.__r++ || t !== n.debounceRendering) && ((t = n.debounceRendering) || i)(g);
}
function g() {
  for (var n2; g.__r = u.length; )
    n2 = u.sort(function(n3, l2) {
      return n3.__v.__b - l2.__v.__b;
    }), u = [], n2.some(function(n3) {
      var l2, u2, i2, t2, o2, r2;
      n3.__d && (o2 = (t2 = (l2 = n3).__v).__e, (r2 = l2.__P) && (u2 = [], (i2 = s({}, t2)).__v = t2.__v + 1, $(r2, t2, i2, l2.__n, r2.ownerSVGElement !== void 0, t2.__h != null ? [o2] : null, u2, o2 == null ? _(t2) : o2, t2.__h), j(u2, t2), t2.__e != o2 && w(t2)));
    });
}
function m(n2, l2, u2, i2, t2, o2, r2, c2, s2, v) {
  var y, d2, w2, k2, g2, m2, x, P2 = i2 && i2.__k || e, C2 = P2.length;
  for (s2 == f && (s2 = r2 != null ? r2[0] : C2 ? _(i2, 0) : null), u2.__k = [], y = 0; y < l2.length; y++)
    if ((k2 = u2.__k[y] = (k2 = l2[y]) == null || typeof k2 == \\"boolean\\" ? null : typeof k2 == \\"string\\" || typeof k2 == \\"number\\" ? h(null, k2, null, null, k2) : Array.isArray(k2) ? h(p, {children: k2}, null, null, null) : k2.__b > 0 ? h(k2.type, k2.props, k2.key, null, k2.__v) : k2) != null) {
      if (k2.__ = u2, k2.__b = u2.__b + 1, (w2 = P2[y]) === null || w2 && k2.key == w2.key && k2.type === w2.type)
        P2[y] = void 0;
      else
        for (d2 = 0; d2 < C2; d2++) {
          if ((w2 = P2[d2]) && k2.key == w2.key && k2.type === w2.type) {
            P2[d2] = void 0;
            break;
          }
          w2 = null;
        }
      $(n2, k2, w2 = w2 || f, t2, o2, r2, c2, s2, v), g2 = k2.__e, (d2 = k2.ref) && w2.ref != d2 && (x || (x = []), w2.ref && x.push(w2.ref, null, k2), x.push(d2, k2.__c || g2, k2)), g2 != null ? (m2 == null && (m2 = g2), typeof k2.type == \\"function\\" && k2.__k != null && k2.__k === w2.__k ? k2.__d = s2 = b(k2, s2, n2) : s2 = A(n2, k2, w2, P2, r2, g2, s2), v || u2.type !== \\"option\\" ? typeof u2.type == \\"function\\" && (u2.__d = s2) : n2.value = \\"\\") : s2 && w2.__e == s2 && s2.parentNode != n2 && (s2 = _(w2));
    }
  if (u2.__e = m2, r2 != null && typeof u2.type != \\"function\\")
    for (y = r2.length; y--; )
      r2[y] != null && a(r2[y]);
  for (y = C2; y--; )
    P2[y] != null && (typeof u2.type == \\"function\\" && P2[y].__e != null && P2[y].__e == u2.__d && (u2.__d = _(i2, y + 1)), L(P2[y], P2[y]));
  if (x)
    for (y = 0; y < x.length; y++)
      I(x[y], x[++y], x[++y]);
}
function b(n2, l2, u2) {
  var i2, t2;
  for (i2 = 0; i2 < n2.__k.length; i2++)
    (t2 = n2.__k[i2]) && (t2.__ = n2, l2 = typeof t2.type == \\"function\\" ? b(t2, l2, u2) : A(u2, t2, t2, n2.__k, null, t2.__e, l2));
  return l2;
}
function A(n2, l2, u2, i2, t2, o2, r2) {
  var f2, e2, c2;
  if (l2.__d !== void 0)
    f2 = l2.__d, l2.__d = void 0;
  else if (t2 == u2 || o2 != r2 || o2.parentNode == null)
    n:
      if (r2 == null || r2.parentNode !== n2)
        n2.appendChild(o2), f2 = null;
      else {
        for (e2 = r2, c2 = 0; (e2 = e2.nextSibling) && c2 < i2.length; c2 += 2)
          if (e2 == o2)
            break n;
        n2.insertBefore(o2, r2), f2 = r2;
      }
  return f2 !== void 0 ? f2 : o2.nextSibling;
}
function P(n2, l2, u2, i2, t2) {
  var o2;
  for (o2 in u2)
    o2 === \\"children\\" || o2 === \\"key\\" || o2 in l2 || z(n2, o2, null, u2[o2], i2);
  for (o2 in l2)
    t2 && typeof l2[o2] != \\"function\\" || o2 === \\"children\\" || o2 === \\"key\\" || o2 === \\"value\\" || o2 === \\"checked\\" || u2[o2] === l2[o2] || z(n2, o2, l2[o2], u2[o2], i2);
}
function C(n2, l2, u2) {
  l2[0] === \\"-\\" ? n2.setProperty(l2, u2) : n2[l2] = u2 == null ? \\"\\" : typeof u2 != \\"number\\" || c.test(l2) ? u2 : u2 + \\"px\\";
}
function z(n2, l2, u2, i2, t2) {
  var o2, r2, f2;
  if (t2 && l2 == \\"className\\" && (l2 = \\"class\\"), l2 === \\"style\\")
    if (typeof u2 == \\"string\\")
      n2.style.cssText = u2;
    else {
      if (typeof i2 == \\"string\\" && (n2.style.cssText = i2 = \\"\\"), i2)
        for (l2 in i2)
          u2 && l2 in u2 || C(n2.style, l2, \\"\\");
      if (u2)
        for (l2 in u2)
          i2 && u2[l2] === i2[l2] || C(n2.style, l2, u2[l2]);
    }
  else
    l2[0] === \\"o\\" && l2[1] === \\"n\\" ? (o2 = l2 !== (l2 = l2.replace(/Capture$/, \\"\\")), (r2 = l2.toLowerCase()) in n2 && (l2 = r2), l2 = l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + o2] = u2, f2 = o2 ? T : N, u2 ? i2 || n2.addEventListener(l2, f2, o2) : n2.removeEventListener(l2, f2, o2)) : l2 !== \\"list\\" && l2 !== \\"tagName\\" && l2 !== \\"form\\" && l2 !== \\"type\\" && l2 !== \\"size\\" && l2 !== \\"download\\" && l2 !== \\"href\\" && !t2 && l2 in n2 ? n2[l2] = u2 == null ? \\"\\" : u2 : typeof u2 != \\"function\\" && l2 !== \\"dangerouslySetInnerHTML\\" && (l2 !== (l2 = l2.replace(/xlink:?/, \\"\\")) ? u2 == null || u2 === false ? n2.removeAttributeNS(\\"http://www.w3.org/1999/xlink\\", l2.toLowerCase()) : n2.setAttributeNS(\\"http://www.w3.org/1999/xlink\\", l2.toLowerCase(), u2) : u2 == null || u2 === false && !/^ar/.test(l2) ? n2.removeAttribute(l2) : n2.setAttribute(l2, u2));
}
function N(l2) {
  this.l[l2.type + false](n.event ? n.event(l2) : l2);
}
function T(l2) {
  this.l[l2.type + true](n.event ? n.event(l2) : l2);
}
function $(l2, u2, i2, t2, o2, r2, f2, e2, c2) {
  var a2, v, h2, y, _2, w2, k2, g2, b2, x, A2, P2 = u2.type;
  if (u2.constructor !== void 0)
    return null;
  i2.__h != null && (c2 = i2.__h, e2 = u2.__e = i2.__e, u2.__h = null, r2 = [e2]), (a2 = n.__b) && a2(u2);
  try {
    n:
      if (typeof P2 == \\"function\\") {
        if (g2 = u2.props, b2 = (a2 = P2.contextType) && t2[a2.__c], x = a2 ? b2 ? b2.props.value : a2.__ : t2, i2.__c ? k2 = (v = u2.__c = i2.__c).__ = v.__E : (\\"prototype\\" in P2 && P2.prototype.render ? u2.__c = v = new P2(g2, x) : (u2.__c = v = new d(g2, x), v.constructor = P2, v.render = M), b2 && b2.sub(v), v.props = g2, v.state || (v.state = {}), v.context = x, v.__n = t2, h2 = v.__d = true, v.__h = []), v.__s == null && (v.__s = v.state), P2.getDerivedStateFromProps != null && (v.__s == v.state && (v.__s = s({}, v.__s)), s(v.__s, P2.getDerivedStateFromProps(g2, v.__s))), y = v.props, _2 = v.state, h2)
          P2.getDerivedStateFromProps == null && v.componentWillMount != null && v.componentWillMount(), v.componentDidMount != null && v.__h.push(v.componentDidMount);
        else {
          if (P2.getDerivedStateFromProps == null && g2 !== y && v.componentWillReceiveProps != null && v.componentWillReceiveProps(g2, x), !v.__e && v.shouldComponentUpdate != null && v.shouldComponentUpdate(g2, v.__s, x) === false || u2.__v === i2.__v) {
            v.props = g2, v.state = v.__s, u2.__v !== i2.__v && (v.__d = false), v.__v = u2, u2.__e = i2.__e, u2.__k = i2.__k, v.__h.length && f2.push(v);
            break n;
          }
          v.componentWillUpdate != null && v.componentWillUpdate(g2, v.__s, x), v.componentDidUpdate != null && v.__h.push(function() {
            v.componentDidUpdate(y, _2, w2);
          });
        }
        v.context = x, v.props = g2, v.state = v.__s, (a2 = n.__r) && a2(u2), v.__d = false, v.__v = u2, v.__P = l2, a2 = v.render(v.props, v.state, v.context), v.state = v.__s, v.getChildContext != null && (t2 = s(s({}, t2), v.getChildContext())), h2 || v.getSnapshotBeforeUpdate == null || (w2 = v.getSnapshotBeforeUpdate(y, _2)), A2 = a2 != null && a2.type === p && a2.key == null ? a2.props.children : a2, m(l2, Array.isArray(A2) ? A2 : [A2], u2, i2, t2, o2, r2, f2, e2, c2), v.base = u2.__e, u2.__h = null, v.__h.length && f2.push(v), k2 && (v.__E = v.__ = null), v.__e = false;
      } else
        r2 == null && u2.__v === i2.__v ? (u2.__k = i2.__k, u2.__e = i2.__e) : u2.__e = H(i2.__e, u2, i2, t2, o2, r2, f2, c2);
    (a2 = n.diffed) && a2(u2);
  } catch (l3) {
    u2.__v = null, (c2 || r2 != null) && (u2.__e = e2, u2.__h = !!c2, r2[r2.indexOf(e2)] = null), n.__e(l3, u2, i2);
  }
}
function j(l2, u2) {
  n.__c && n.__c(u2, l2), l2.some(function(u3) {
    try {
      l2 = u3.__h, u3.__h = [], l2.some(function(n2) {
        n2.call(u3);
      });
    } catch (l3) {
      n.__e(l3, u3.__v);
    }
  });
}
function H(n2, l2, u2, i2, t2, o2, r2, c2) {
  var s2, a2, v, h2, y, p2 = u2.props, d2 = l2.props;
  if (t2 = l2.type === \\"svg\\" || t2, o2 != null) {
    for (s2 = 0; s2 < o2.length; s2++)
      if ((a2 = o2[s2]) != null && ((l2.type === null ? a2.nodeType === 3 : a2.localName === l2.type) || n2 == a2)) {
        n2 = a2, o2[s2] = null;
        break;
      }
  }
  if (n2 == null) {
    if (l2.type === null)
      return document.createTextNode(d2);
    n2 = t2 ? document.createElementNS(\\"http://www.w3.org/2000/svg\\", l2.type) : document.createElement(l2.type, d2.is && {is: d2.is}), o2 = null, c2 = false;
  }
  if (l2.type === null)
    p2 === d2 || c2 && n2.data === d2 || (n2.data = d2);
  else {
    if (o2 != null && (o2 = e.slice.call(n2.childNodes)), v = (p2 = u2.props || f).dangerouslySetInnerHTML, h2 = d2.dangerouslySetInnerHTML, !c2) {
      if (o2 != null)
        for (p2 = {}, y = 0; y < n2.attributes.length; y++)
          p2[n2.attributes[y].name] = n2.attributes[y].value;
      (h2 || v) && (h2 && (v && h2.__html == v.__html || h2.__html === n2.innerHTML) || (n2.innerHTML = h2 && h2.__html || \\"\\"));
    }
    P(n2, d2, p2, t2, c2), h2 ? l2.__k = [] : (s2 = l2.props.children, m(n2, Array.isArray(s2) ? s2 : [s2], l2, u2, i2, l2.type !== \\"foreignObject\\" && t2, o2, r2, f, c2)), c2 || (\\"value\\" in d2 && (s2 = d2.value) !== void 0 && (s2 !== n2.value || l2.type === \\"progress\\" && !s2) && z(n2, \\"value\\", s2, p2.value, false), \\"checked\\" in d2 && (s2 = d2.checked) !== void 0 && s2 !== n2.checked && z(n2, \\"checked\\", s2, p2.checked, false));
  }
  return n2;
}
function I(l2, u2, i2) {
  try {
    typeof l2 == \\"function\\" ? l2(u2) : l2.current = u2;
  } catch (l3) {
    n.__e(l3, i2);
  }
}
function L(l2, u2, i2) {
  var t2, o2, r2;
  if (n.unmount && n.unmount(l2), (t2 = l2.ref) && (t2.current && t2.current !== l2.__e || I(t2, null, u2)), i2 || typeof l2.type == \\"function\\" || (i2 = (o2 = l2.__e) != null), l2.__e = l2.__d = void 0, (t2 = l2.__c) != null) {
    if (t2.componentWillUnmount)
      try {
        t2.componentWillUnmount();
      } catch (l3) {
        n.__e(l3, u2);
      }
    t2.base = t2.__P = null;
  }
  if (t2 = l2.__k)
    for (r2 = 0; r2 < t2.length; r2++)
      t2[r2] && L(t2[r2], u2, i2);
  o2 != null && a(o2);
}
function M(n2, l2, u2) {
  return this.constructor(n2, u2);
}
function B(n2, l2) {
  var u2 = {__c: l2 = \\"__cC\\" + r++, __: n2, Consumer: function(n3, l3) {
    return n3.children(l3);
  }, Provider: function(n3) {
    var u3, i2;
    return this.getChildContext || (u3 = [], (i2 = {})[l2] = this, this.getChildContext = function() {
      return i2;
    }, this.shouldComponentUpdate = function(n4) {
      this.props.value !== n4.value && u3.some(k);
    }, this.sub = function(n4) {
      u3.push(n4);
      var l3 = n4.componentWillUnmount;
      n4.componentWillUnmount = function() {
        u3.splice(u3.indexOf(n4), 1), l3 && l3.call(n4);
      };
    }), n3.children;
  }};
  return u2.Provider.__ = u2.Consumer.contextType = u2;
}
n = {__e: function(n2, l2) {
  for (var u2, i2, t2, o2 = l2.__h; l2 = l2.__; )
    if ((u2 = l2.__c) && !u2.__)
      try {
        if ((i2 = u2.constructor) && i2.getDerivedStateFromError != null && (u2.setState(i2.getDerivedStateFromError(n2)), t2 = u2.__d), u2.componentDidCatch != null && (u2.componentDidCatch(n2), t2 = u2.__d), t2)
          return l2.__h = o2, u2.__E = u2;
      } catch (l3) {
        n2 = l3;
      }
  throw n2;
}, __v: 0}, l = function(n2) {
  return n2 != null && n2.constructor === void 0;
}, d.prototype.setState = function(n2, l2) {
  var u2;
  u2 = this.__s != null && this.__s !== this.state ? this.__s : this.__s = s({}, this.state), typeof n2 == \\"function\\" && (n2 = n2(s({}, u2), this.props)), n2 && s(u2, n2), n2 != null && this.__v && (l2 && this.__h.push(l2), k(this));
}, d.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), k(this));
}, d.prototype.render = p, u = [], i = typeof Promise == \\"function\\" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, g.__r = 0, o = f, r = 0;
export {
  n,
  l,
  o,
  f,
  e,
  s,
  h,
  p,
  d,
  $,
  j,
  B
};
//# sourceMappingURL=chunk.VRNFUDSI.js.map"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/chunk.VRNFUDSI.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/chunk.VRNFUDSI.js.map\\";"`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"preact\\": \\"./preact.js\\",
    \\"preact/devtools\\": \\"./preact/devtools.js\\",
    \\"preact/hooks\\": \\"./preact/hooks.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/preact.js 1`] = `
"import {
  $,
  B,
  d,
  e,
  f,
  h,
  j,
  l,
  n,
  o,
  p,
  s
} from \\"./chunk.2NDQU4AK.js\\";
// ../../node_modules/preact/dist/preact.module.js
function v(n2, l2, u) {
  var i, t, o2, r = arguments, f2 = {};
  for (o2 in l2)
    o2 == \\"key\\" ? i = l2[o2] : o2 == \\"ref\\" ? t = l2[o2] : f2[o2] = l2[o2];
  if (arguments.length > 3)
    for (u = [u], o2 = 3; o2 < arguments.length; o2++)
      u.push(r[o2]);
  if (u != null && (f2.children = u), typeof n2 == \\"function\\" && n2.defaultProps != null)
    for (o2 in n2.defaultProps)
      f2[o2] === void 0 && (f2[o2] = n2.defaultProps[o2]);
  return h(n2, f2, i, t, null);
}
function y() {
  return {current: null};
}
function x(n2, l2) {
  return l2 = l2 || [], n2 == null || typeof n2 == \\"boolean\\" || (Array.isArray(n2) ? n2.some(function(n3) {
    x(n3, l2);
  }) : l2.push(n2)), l2;
}
function O(l2, u, i) {
  var t, r, c;
  n.__ && n.__(l2, u), r = (t = i === o) ? null : i && i.__k || u.__k, l2 = v(p, null, [l2]), c = [], $(u, (t ? u : i || u).__k = l2, r || f, f, u.ownerSVGElement !== void 0, i && !t ? [i] : r ? null : u.childNodes.length ? e.slice.call(u.childNodes) : null, c, i || f, t), j(c, l2);
}
function S(n2, l2) {
  O(n2, l2, o);
}
function q(n2, l2, u) {
  var i, t, o2, r = arguments, f2 = s({}, n2.props);
  for (o2 in l2)
    o2 == \\"key\\" ? i = l2[o2] : o2 == \\"ref\\" ? t = l2[o2] : f2[o2] = l2[o2];
  if (arguments.length > 3)
    for (u = [u], o2 = 3; o2 < arguments.length; o2++)
      u.push(r[o2]);
  return u != null && (f2.children = u), h(n2.type, f2, i || n2.key, t || n2.ref, null);
}
export {
  d as Component,
  p as Fragment,
  q as cloneElement,
  B as createContext,
  v as createElement,
  y as createRef,
  v as h,
  S as hydrate,
  l as isValidElement,
  n as options,
  O as render,
  x as toChildArray
};
//# sourceMappingURL=preact.js.map"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/preact.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/preact.js.map\\";"`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/preact/devtools.js 1`] = `
"import {
  d,
  n,
  p
} from \\"../chunk.2NDQU4AK.js\\";
// ../../node_modules/preact/devtools/dist/devtools.module.js
typeof window != \\"undefined\\" && window.__PREACT_DEVTOOLS__ && window.__PREACT_DEVTOOLS__.attachPreact(\\"10.5.9\\", n, {Fragment: p, Component: d});
//# sourceMappingURL=devtools.js.map"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/preact/devtools.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/preact/devtools.js.map\\";"`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/preact/hooks.js 1`] = `
"import {
  n
} from \\"../chunk.2NDQU4AK.js\\";
// ../../node_modules/preact/hooks/dist/hooks.module.js
var t;
var u;
var r;
var o = 0;
var i = [];
var c = n.__b;
var f = n.__r;
var e = n.diffed;
var a = n.__c;
var v = n.unmount;
function m(t2, r2) {
  n.__h && n.__h(u, t2, o || r2), o = 0;
  var i2 = u.__H || (u.__H = {__: [], __h: []});
  return t2 >= i2.__.length && i2.__.push({}), i2.__[t2];
}
function l(n2) {
  return o = 1, p(w, n2);
}
function p(n2, r2, o2) {
  var i2 = m(t++, 2);
  return i2.t = n2, i2.__c || (i2.__ = [o2 ? o2(r2) : w(void 0, r2), function(n3) {
    var t2 = i2.t(i2.__[0], n3);
    i2.__[0] !== t2 && (i2.__ = [t2, i2.__[1]], i2.__c.setState({}));
  }], i2.__c = u), i2.__;
}
function y(r2, o2) {
  var i2 = m(t++, 3);
  !n.__s && k(i2.__H, o2) && (i2.__ = r2, i2.__H = o2, u.__H.__h.push(i2));
}
function h(r2, o2) {
  var i2 = m(t++, 4);
  !n.__s && k(i2.__H, o2) && (i2.__ = r2, i2.__H = o2, u.__h.push(i2));
}
function s(n2) {
  return o = 5, d(function() {
    return {current: n2};
  }, []);
}
function _(n2, t2, u2) {
  o = 6, h(function() {
    typeof n2 == \\"function\\" ? n2(t2()) : n2 && (n2.current = t2());
  }, u2 == null ? u2 : u2.concat(n2));
}
function d(n2, u2) {
  var r2 = m(t++, 7);
  return k(r2.__H, u2) && (r2.__ = n2(), r2.__H = u2, r2.__h = n2), r2.__;
}
function A(n2, t2) {
  return o = 8, d(function() {
    return n2;
  }, t2);
}
function F(n2) {
  var r2 = u.context[n2.__c], o2 = m(t++, 9);
  return o2.__c = n2, r2 ? (o2.__ == null && (o2.__ = true, r2.sub(u)), r2.props.value) : n2.__;
}
function T(t2, u2) {
  n.useDebugValue && n.useDebugValue(u2 ? u2(t2) : t2);
}
function q(n2) {
  var r2 = m(t++, 10), o2 = l();
  return r2.__ = n2, u.componentDidCatch || (u.componentDidCatch = function(n3) {
    r2.__ && r2.__(n3), o2[1](n3);
  }), [o2[0], function() {
    o2[1](void 0);
  }];
}
function x() {
  i.forEach(function(t2) {
    if (t2.__P)
      try {
        t2.__H.__h.forEach(g), t2.__H.__h.forEach(j), t2.__H.__h = [];
      } catch (u2) {
        t2.__H.__h = [], n.__e(u2, t2.__v);
      }
  }), i = [];
}
n.__b = function(n2) {
  u = null, c && c(n2);
}, n.__r = function(n2) {
  f && f(n2), t = 0;
  var r2 = (u = n2.__c).__H;
  r2 && (r2.__h.forEach(g), r2.__h.forEach(j), r2.__h = []);
}, n.diffed = function(t2) {
  e && e(t2);
  var o2 = t2.__c;
  o2 && o2.__H && o2.__H.__h.length && (i.push(o2) !== 1 && r === n.requestAnimationFrame || ((r = n.requestAnimationFrame) || function(n2) {
    var t3, u2 = function() {
      clearTimeout(r2), b && cancelAnimationFrame(t3), setTimeout(n2);
    }, r2 = setTimeout(u2, 100);
    b && (t3 = requestAnimationFrame(u2));
  })(x)), u = void 0;
}, n.__c = function(t2, u2) {
  u2.some(function(t3) {
    try {
      t3.__h.forEach(g), t3.__h = t3.__h.filter(function(n2) {
        return !n2.__ || j(n2);
      });
    } catch (r2) {
      u2.some(function(n2) {
        n2.__h && (n2.__h = []);
      }), u2 = [], n.__e(r2, t3.__v);
    }
  }), a && a(t2, u2);
}, n.unmount = function(t2) {
  v && v(t2);
  var u2 = t2.__c;
  if (u2 && u2.__H)
    try {
      u2.__H.__.forEach(g);
    } catch (t3) {
      n.__e(t3, u2.__v);
    }
};
var b = typeof requestAnimationFrame == \\"function\\";
function g(n2) {
  var t2 = u;
  typeof n2.__c == \\"function\\" && n2.__c(), u = t2;
}
function j(n2) {
  var t2 = u;
  n2.__c = n2.__(), u = t2;
}
function k(n2, t2) {
  return !n2 || n2.length !== t2.length || t2.some(function(t3, u2) {
    return t3 !== n2[u2];
  });
}
function w(n2, t2) {
  return typeof t2 == \\"function\\" ? t2(n2) : t2;
}
export {
  A as useCallback,
  F as useContext,
  T as useDebugValue,
  y as useEffect,
  q as useErrorBoundary,
  _ as useImperativeHandle,
  h as useLayoutEffect,
  d as useMemo,
  p as useReducer,
  s as useRef,
  l as useState
};
//# sourceMappingURL=hooks.js.map"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: _snowpack/pkg/preact/hooks.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/preact/hooks.js.map\\";"`;

exports[`create-snowpack-app app-template-preact-typescript > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/chunk.2NDQU4AK.js",
  "_snowpack/pkg/chunk.VRNFUDSI.js.map",
  "_snowpack/pkg/chunk.VRNFUDSI.js.map.proxy.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/preact.js",
  "_snowpack/pkg/preact.js.map",
  "_snowpack/pkg/preact.js.map.proxy.js",
  "_snowpack/pkg/preact/devtools.js",
  "_snowpack/pkg/preact/devtools.js.map",
  "_snowpack/pkg/preact/devtools.js.map.proxy.js",
  "_snowpack/pkg/preact/hooks.js",
  "_snowpack/pkg/preact/hooks.js.map",
  "_snowpack/pkg/preact/hooks.js.map.proxy.js",
  "dist/App.css",
  "dist/App.css.proxy.js",
  "dist/App.js",
  "dist/index.css",
  "dist/index.css.proxy.js",
  "dist/index.js",
  "dist/logo.png",
  "dist/logo.png.proxy.js",
  "favicon.ico",
  "index.html",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-preact-typescript > build: dist/App.css 1`] = `
".App {
  text-align: center;
}
.App code {
  background: #FFF3;
  padding: 4px 8px;
  border-radius: 4px;
}
.App p {
  margin: 0.4rem;
}
.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
.App-link {
  color: #61dafb;
}
.App-logo {
  height: 36vmin;
  pointer-events: none;
  margin-bottom: 3rem;
  animation: App-logo-spin infinite 1.6s ease-in-out alternate;
}
@keyframes App-logo-spin {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.06);
  }
}"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: dist/App.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\".App {  text-align: center;}.App code {  background: #FFF3;  padding: 4px 8px;  border-radius: 4px;}.App p {  margin: 0.4rem;}.App-header {  background-color: #282c34;  min-height: 100vh;  display: flex;  flex-direction: column;  align-items: center;  justify-content: center;  font-size: calc(10px + 2vmin);  color: white;}.App-link {  color: #61dafb;}.App-logo {  height: 36vmin;  pointer-events: none;  margin-bottom: 3rem;  animation: App-logo-spin infinite 1.6s ease-in-out alternate;}@keyframes App-logo-spin {  from {    transform: scale(1);  }  to {    transform: scale(1.06);  }}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: dist/App.js 1`] = `
"import {h} from \\"../_snowpack/pkg/preact.js\\";
import {useState, useEffect} from \\"../_snowpack/pkg/preact/hooks.js\\";
import logo from \\"./logo.png.proxy.js\\";
import \\"./App.css.proxy.js\\";
function App() {
  const [count, setCount] = useState(0);
  useEffect(() => {
    const timer = setTimeout(() => setCount(count + 1), 1e3);
    return () => clearTimeout(timer);
  }, [count, setCount]);
  return /* @__PURE__ */ h(\\"div\\", {
    className: \\"App\\"
  }, /* @__PURE__ */ h(\\"header\\", {
    className: \\"App-header\\"
  }, /* @__PURE__ */ h(\\"img\\", {
    src: logo,
    className: \\"App-logo\\",
    alt: \\"logo\\"
  }), /* @__PURE__ */ h(\\"p\\", null, \\"Edit \\", /* @__PURE__ */ h(\\"code\\", null, \\"src/App.jsx\\"), \\" and save to reload.\\"), /* @__PURE__ */ h(\\"p\\", null, \\"Page has been open for \\", /* @__PURE__ */ h(\\"code\\", null, count), \\" seconds.\\"), /* @__PURE__ */ h(\\"p\\", null, /* @__PURE__ */ h(\\"a\\", {
    className: \\"App-link\\",
    href: \\"https://preactjs.com\\",
    target: \\"_blank\\",
    rel: \\"noopener noreferrer\\"
  }, \\"Learn Preact\\"))));
}
export default App;"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: dist/index.css 1`] = `
"body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: dist/index.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\"body {  margin: 0;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',    sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}code {  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',    monospace;}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: dist/index.js 1`] = `
"import {h, render} from \\"../_snowpack/pkg/preact.js\\";
import \\"../_snowpack/pkg/preact/devtools.js\\";
import App from \\"./App.js\\";
import \\"./index.css.proxy.js\\";
const root = document.getElementById(\\"root\\");
if (root) {
  render(/* @__PURE__ */ h(App, null), root);
}"
`;

exports[`create-snowpack-app app-template-preact-typescript > build: dist/logo.png.proxy.js 1`] = `"export default \\"/dist/logo.png\\";"`;

exports[`create-snowpack-app app-template-preact-typescript > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <div id=\\"root\\"></div>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-react > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/react/index.js\\": {
      \\"bytes\\": 190,
      \\"imports\\": []
    },
    \\"PKG/react.js\\": {
      \\"bytes\\": 297,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/react/index.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/react-dom/index.js\\": {
      \\"bytes\\": 1363,
      \\"imports\\": []
    },
    \\"PKG/react-dom.js\\": {
      \\"bytes\\": 287,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/react-dom/index.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/react.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 798
    },
    \\"build/_snowpack/pkg/react.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [
        \\"default\\",
        \\"useEffect\\",
        \\"useState\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/react/index.js\\": {
          \\"bytesInOutput\\": 244
        },
        \\"PKG/react.js\\": {
          \\"bytesInOutput\\": 174
        }
      },
      \\"bytes\\": 637
    },
    \\"build/_snowpack/pkg/react-dom.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 2136
    },
    \\"build/_snowpack/pkg/react-dom.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [
        \\"default\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/react-dom/index.js\\": {
          \\"bytesInOutput\\": 622
        },
        \\"PKG/react-dom.js\\": {
          \\"bytesInOutput\\": 106
        }
      },
      \\"bytes\\": 938
    },
    \\"build/_snowpack/pkg/chunk.IXVMP6XR.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 93
    },
    \\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"__commonJS\\",
        \\"__toModule\\"
      ],
      \\"inputs\\": {},
      \\"bytes\\": 1243
    }
  }
}"
`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/react/index.js\\":{\\"bytes\\":190,\\"imports\\":[]},\\"PKG/react.js\\":{\\"bytes\\":297,\\"imports\\":[{\\"path\\":\\"../../node_modules/react/index.js\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/react-dom/index.js\\":{\\"bytes\\":1363,\\"imports\\":[]},\\"PKG/react-dom.js\\":{\\"bytes\\":287,\\"imports\\":[{\\"path\\":\\"../../node_modules/react-dom/index.js\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/react.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":798},\\"build/_snowpack/pkg/react.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[\\"default\\",\\"useEffect\\",\\"useState\\"],\\"inputs\\":{\\"../../node_modules/react/index.js\\":{\\"bytesInOutput\\":244},\\"PKG/react.js\\":{\\"bytesInOutput\\":174}},\\"bytes\\":637},\\"build/_snowpack/pkg/react-dom.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":2136},\\"build/_snowpack/pkg/react-dom.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[\\"default\\"],\\"inputs\\":{\\"../../node_modules/react-dom/index.js\\":{\\"bytesInOutput\\":622},\\"PKG/react-dom.js\\":{\\"bytesInOutput\\":106}},\\"bytes\\":938},\\"build/_snowpack/pkg/chunk.IXVMP6XR.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":93},\\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\":{\\"imports\\":[],\\"exports\\":[\\"__commonJS\\",\\"__toModule\\"],\\"inputs\\":{},\\"bytes\\":1243}}};
export default json;"
`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/chunk.IXVMP6XR.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/chunk.IXVMP6XR.js.map\\";"`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/chunk.QFICVUJ4.js 1`] = `
"var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, \\"__esModule\\", {value: true});
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};
var __exportStar = (target, module, desc) => {
  __markAsModule(target);
  if (module && typeof module === \\"object\\" || typeof module === \\"function\\") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== \\"default\\")
        __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module) => {
  if (module && module.__esModule)
    return module;
  return __exportStar(__defProp(module != null ? __create(__getProtoOf(module)) : {}, \\"default\\", {value: module, enumerable: true}), module);
};
export {
  __commonJS,
  __toModule
};
//# sourceMappingURL=chunk.IXVMP6XR.js.map"
`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"react\\": \\"./react.js\\",
    \\"react-dom\\": \\"./react-dom.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/react.js 1`] = `
"import {
  __commonJS,
  __toModule
} from \\"./chunk.QFICVUJ4.js\\";
// ../../node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  \\"use strict\\";
  if (true) {
    module.exports = require(\\"/Users/fks/Code/snowpack/node_modules/react/index.js/cjs/react.production.min.js\\");
  } else {
    module.exports = null;
  }
});
// PKG/react.js
var import_react = __toModule(require_react());
var {useState, useEffect} = \\"/Users/fks/Code/snowpack/node_modules/react/index.js\\";
var react_default = import_react.default;
export {
  react_default as default,
  useEffect,
  useState
};
//# sourceMappingURL=react.js.map"
`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/react.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/react.js.map\\";"`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/react-dom.js 1`] = `
"import {
  __commonJS,
  __toModule
} from \\"./chunk.QFICVUJ4.js\\";
// ../../node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  \\"use strict\\";
  function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \\"undefined\\" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== \\"function\\") {
      return;
    }
    if (false) {
      throw new Error(\\"^_^\\");
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  if (true) {
    checkDCE();
    module.exports = require(\\"/Users/fks/Code/snowpack/node_modules/react-dom/index.js/cjs/react-dom.production.min.js\\");
  } else {
    module.exports = null;
  }
});
// PKG/react-dom.js
var import_react_dom = __toModule(require_react_dom());
var react_dom_default = import_react_dom.default;
export {
  react_dom_default as default
};
//# sourceMappingURL=react-dom.js.map"
`;

exports[`create-snowpack-app app-template-react > build: _snowpack/pkg/react-dom.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/react-dom.js.map\\";"`;

exports[`create-snowpack-app app-template-react > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/chunk.IXVMP6XR.js.map",
  "_snowpack/pkg/chunk.IXVMP6XR.js.map.proxy.js",
  "_snowpack/pkg/chunk.QFICVUJ4.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/react-dom.js",
  "_snowpack/pkg/react-dom.js.map",
  "_snowpack/pkg/react-dom.js.map.proxy.js",
  "_snowpack/pkg/react.js",
  "_snowpack/pkg/react.js.map",
  "_snowpack/pkg/react.js.map.proxy.js",
  "dist/App.css",
  "dist/App.css.proxy.js",
  "dist/App.js",
  "dist/index.css",
  "dist/index.css.proxy.js",
  "dist/index.js",
  "dist/logo.svg",
  "dist/logo.svg.proxy.js",
  "favicon.ico",
  "index.html",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-react > build: dist/App.css 1`] = `
".App {
  text-align: center;
}
.App code {
  background: #FFF3;
  padding: 4px 8px;
  border-radius: 4px;
}
.App p {
  margin: 0.4rem;
}
.App-logo {
  height: 40vmin;
  pointer-events: none;
}
@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}
.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
.App-link {
  color: #61dafb;
}
@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}"
`;

exports[`create-snowpack-app app-template-react > build: dist/App.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\".App {  text-align: center;}.App code {  background: #FFF3;  padding: 4px 8px;  border-radius: 4px;}.App p {  margin: 0.4rem;}.App-logo {  height: 40vmin;  pointer-events: none;}@media (prefers-reduced-motion: no-preference) {  .App-logo {    animation: App-logo-spin infinite 20s linear;  }}.App-header {  background-color: #282c34;  min-height: 100vh;  display: flex;  flex-direction: column;  align-items: center;  justify-content: center;  font-size: calc(10px + 2vmin);  color: white;}.App-link {  color: #61dafb;}@keyframes App-logo-spin {  from {    transform: rotate(0deg);  }  to {    transform: rotate(360deg);  }}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-react > build: dist/App.js 1`] = `
"import React, {useState, useEffect} from \\"../_snowpack/pkg/react.js\\";
import logo from \\"./logo.svg.proxy.js\\";
import \\"./App.css.proxy.js\\";
function App() {
  const [count, setCount] = useState(0);
  useEffect(() => {
    const timer = setTimeout(() => setCount(count + 1), 1e3);
    return () => clearTimeout(timer);
  }, [count, setCount]);
  return /* @__PURE__ */ React.createElement(\\"div\\", {
    className: \\"App\\"
  }, /* @__PURE__ */ React.createElement(\\"header\\", {
    className: \\"App-header\\"
  }, /* @__PURE__ */ React.createElement(\\"img\\", {
    src: logo,
    className: \\"App-logo\\",
    alt: \\"logo\\"
  }), /* @__PURE__ */ React.createElement(\\"p\\", null, \\"Edit \\", /* @__PURE__ */ React.createElement(\\"code\\", null, \\"src/App.jsx\\"), \\" and save to reload.\\"), /* @__PURE__ */ React.createElement(\\"p\\", null, \\"Page has been open for \\", /* @__PURE__ */ React.createElement(\\"code\\", null, count), \\" seconds.\\"), /* @__PURE__ */ React.createElement(\\"p\\", null, /* @__PURE__ */ React.createElement(\\"a\\", {
    className: \\"App-link\\",
    href: \\"https://reactjs.org\\",
    target: \\"_blank\\",
    rel: \\"noopener noreferrer\\"
  }, \\"Learn React\\"))));
}
export default App;"
`;

exports[`create-snowpack-app app-template-react > build: dist/index.css 1`] = `
"body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}"
`;

exports[`create-snowpack-app app-template-react > build: dist/index.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\"body {  margin: 0;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',    sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}code {  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',    monospace;}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-react > build: dist/index.js 1`] = `
"import * as __SNOWPACK_ENV__ from '../_snowpack/env.js';
import.meta.env = __SNOWPACK_ENV__;
import React from \\"../_snowpack/pkg/react.js\\";
import ReactDOM from \\"../_snowpack/pkg/react-dom.js\\";
import App from \\"./App.js\\";
import \\"./index.css.proxy.js\\";
ReactDOM.render(/* @__PURE__ */ React.createElement(React.StrictMode, null, /* @__PURE__ */ React.createElement(App, null)), document.getElementById(\\"root\\"));
if (undefined /* [snowpack] import.meta.hot */ ) {
  undefined /* [snowpack] import.meta.hot */ .accept();
}"
`;

exports[`create-snowpack-app app-template-react > build: dist/logo.svg.proxy.js 1`] = `"export default \\"/dist/logo.svg\\";"`;

exports[`create-snowpack-app app-template-react > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <div id=\\"root\\"></div>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/react/index.js\\": {
      \\"bytes\\": 190,
      \\"imports\\": []
    },
    \\"PKG/react.js\\": {
      \\"bytes\\": 297,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/react/index.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/react-dom/index.js\\": {
      \\"bytes\\": 1363,
      \\"imports\\": []
    },
    \\"PKG/react-dom.js\\": {
      \\"bytes\\": 287,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/react-dom/index.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/react.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 798
    },
    \\"build/_snowpack/pkg/react.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [
        \\"default\\",
        \\"useEffect\\",
        \\"useState\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/react/index.js\\": {
          \\"bytesInOutput\\": 244
        },
        \\"PKG/react.js\\": {
          \\"bytesInOutput\\": 174
        }
      },
      \\"bytes\\": 637
    },
    \\"build/_snowpack/pkg/react-dom.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 2136
    },
    \\"build/_snowpack/pkg/react-dom.js\\": {
      \\"imports\\": [
        {
          \\"path\\": \\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ],
      \\"exports\\": [
        \\"default\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/react-dom/index.js\\": {
          \\"bytesInOutput\\": 622
        },
        \\"PKG/react-dom.js\\": {
          \\"bytesInOutput\\": 106
        }
      },
      \\"bytes\\": 938
    },
    \\"build/_snowpack/pkg/chunk.IXVMP6XR.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 93
    },
    \\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"__commonJS\\",
        \\"__toModule\\"
      ],
      \\"inputs\\": {},
      \\"bytes\\": 1243
    }
  }
}"
`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/react/index.js\\":{\\"bytes\\":190,\\"imports\\":[]},\\"PKG/react.js\\":{\\"bytes\\":297,\\"imports\\":[{\\"path\\":\\"../../node_modules/react/index.js\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/react-dom/index.js\\":{\\"bytes\\":1363,\\"imports\\":[]},\\"PKG/react-dom.js\\":{\\"bytes\\":287,\\"imports\\":[{\\"path\\":\\"../../node_modules/react-dom/index.js\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/react.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":798},\\"build/_snowpack/pkg/react.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[\\"default\\",\\"useEffect\\",\\"useState\\"],\\"inputs\\":{\\"../../node_modules/react/index.js\\":{\\"bytesInOutput\\":244},\\"PKG/react.js\\":{\\"bytesInOutput\\":174}},\\"bytes\\":637},\\"build/_snowpack/pkg/react-dom.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":2136},\\"build/_snowpack/pkg/react-dom.js\\":{\\"imports\\":[{\\"path\\":\\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\",\\"kind\\":\\"import-statement\\"}],\\"exports\\":[\\"default\\"],\\"inputs\\":{\\"../../node_modules/react-dom/index.js\\":{\\"bytesInOutput\\":622},\\"PKG/react-dom.js\\":{\\"bytesInOutput\\":106}},\\"bytes\\":938},\\"build/_snowpack/pkg/chunk.IXVMP6XR.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":93},\\"build/_snowpack/pkg/chunk.QFICVUJ4.js\\":{\\"imports\\":[],\\"exports\\":[\\"__commonJS\\",\\"__toModule\\"],\\"inputs\\":{},\\"bytes\\":1243}}};
export default json;"
`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/chunk.IXVMP6XR.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/chunk.IXVMP6XR.js.map\\";"`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/chunk.QFICVUJ4.js 1`] = `
"var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, \\"__esModule\\", {value: true});
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};
var __exportStar = (target, module, desc) => {
  __markAsModule(target);
  if (module && typeof module === \\"object\\" || typeof module === \\"function\\") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== \\"default\\")
        __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module) => {
  if (module && module.__esModule)
    return module;
  return __exportStar(__defProp(module != null ? __create(__getProtoOf(module)) : {}, \\"default\\", {value: module, enumerable: true}), module);
};
export {
  __commonJS,
  __toModule
};
//# sourceMappingURL=chunk.IXVMP6XR.js.map"
`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"react\\": \\"./react.js\\",
    \\"react-dom\\": \\"./react-dom.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/react.js 1`] = `
"import {
  __commonJS,
  __toModule
} from \\"./chunk.QFICVUJ4.js\\";
// ../../node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  \\"use strict\\";
  if (true) {
    module.exports = require(\\"/Users/fks/Code/snowpack/node_modules/react/index.js/cjs/react.production.min.js\\");
  } else {
    module.exports = null;
  }
});
// PKG/react.js
var import_react = __toModule(require_react());
var {useState, useEffect} = \\"/Users/fks/Code/snowpack/node_modules/react/index.js\\";
var react_default = import_react.default;
export {
  react_default as default,
  useEffect,
  useState
};
//# sourceMappingURL=react.js.map"
`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/react.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/react.js.map\\";"`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/react-dom.js 1`] = `
"import {
  __commonJS,
  __toModule
} from \\"./chunk.QFICVUJ4.js\\";
// ../../node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  \\"use strict\\";
  function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \\"undefined\\" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== \\"function\\") {
      return;
    }
    if (false) {
      throw new Error(\\"^_^\\");
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  if (true) {
    checkDCE();
    module.exports = require(\\"/Users/fks/Code/snowpack/node_modules/react-dom/index.js/cjs/react-dom.production.min.js\\");
  } else {
    module.exports = null;
  }
});
// PKG/react-dom.js
var import_react_dom = __toModule(require_react_dom());
var react_dom_default = import_react_dom.default;
export {
  react_dom_default as default
};
//# sourceMappingURL=react-dom.js.map"
`;

exports[`create-snowpack-app app-template-react-typescript > build: _snowpack/pkg/react-dom.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/react-dom.js.map\\";"`;

exports[`create-snowpack-app app-template-react-typescript > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/chunk.IXVMP6XR.js.map",
  "_snowpack/pkg/chunk.IXVMP6XR.js.map.proxy.js",
  "_snowpack/pkg/chunk.QFICVUJ4.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/react-dom.js",
  "_snowpack/pkg/react-dom.js.map",
  "_snowpack/pkg/react-dom.js.map.proxy.js",
  "_snowpack/pkg/react.js",
  "_snowpack/pkg/react.js.map",
  "_snowpack/pkg/react.js.map.proxy.js",
  "dist/App.css",
  "dist/App.css.proxy.js",
  "dist/App.js",
  "dist/index.css",
  "dist/index.css.proxy.js",
  "dist/index.js",
  "dist/logo.svg",
  "dist/logo.svg.proxy.js",
  "favicon.ico",
  "index.html",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-react-typescript > build: dist/App.css 1`] = `
".App {
  text-align: center;
}
.App code {
  background: #FFF3;
  padding: 4px 8px;
  border-radius: 4px;
}
.App p {
  margin: 0.4rem;
}
.App-logo {
  height: 40vmin;
  pointer-events: none;
}
@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}
.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
.App-link {
  color: #61dafb;
}
@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}"
`;

exports[`create-snowpack-app app-template-react-typescript > build: dist/App.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\".App {  text-align: center;}.App code {  background: #FFF3;  padding: 4px 8px;  border-radius: 4px;}.App p {  margin: 0.4rem;}.App-logo {  height: 40vmin;  pointer-events: none;}@media (prefers-reduced-motion: no-preference) {  .App-logo {    animation: App-logo-spin infinite 20s linear;  }}.App-header {  background-color: #282c34;  min-height: 100vh;  display: flex;  flex-direction: column;  align-items: center;  justify-content: center;  font-size: calc(10px + 2vmin);  color: white;}.App-link {  color: #61dafb;}@keyframes App-logo-spin {  from {    transform: rotate(0deg);  }  to {    transform: rotate(360deg);  }}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-react-typescript > build: dist/App.js 1`] = `
"import React, {useState, useEffect} from \\"../_snowpack/pkg/react.js\\";
import logo from \\"./logo.svg.proxy.js\\";
import \\"./App.css.proxy.js\\";
function App({}) {
  const [count, setCount] = useState(0);
  useEffect(() => {
    const timer = setTimeout(() => setCount(count + 1), 1e3);
    return () => clearTimeout(timer);
  }, [count, setCount]);
  return /* @__PURE__ */ React.createElement(\\"div\\", {
    className: \\"App\\"
  }, /* @__PURE__ */ React.createElement(\\"header\\", {
    className: \\"App-header\\"
  }, /* @__PURE__ */ React.createElement(\\"img\\", {
    src: logo,
    className: \\"App-logo\\",
    alt: \\"logo\\"
  }), /* @__PURE__ */ React.createElement(\\"p\\", null, \\"Edit \\", /* @__PURE__ */ React.createElement(\\"code\\", null, \\"src/App.tsx\\"), \\" and save to reload.\\"), /* @__PURE__ */ React.createElement(\\"p\\", null, \\"Page has been open for \\", /* @__PURE__ */ React.createElement(\\"code\\", null, count), \\" seconds.\\"), /* @__PURE__ */ React.createElement(\\"p\\", null, /* @__PURE__ */ React.createElement(\\"a\\", {
    className: \\"App-link\\",
    href: \\"https://reactjs.org\\",
    target: \\"_blank\\",
    rel: \\"noopener noreferrer\\"
  }, \\"Learn React\\"))));
}
export default App;"
`;

exports[`create-snowpack-app app-template-react-typescript > build: dist/index.css 1`] = `
"body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\",
    \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, \\"Courier New\\",
    monospace;
}"
`;

exports[`create-snowpack-app app-template-react-typescript > build: dist/index.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\"body {  margin: 0;  font-family: -apple-system, BlinkMacSystemFont, \\\\\\"Segoe UI\\\\\\", \\\\\\"Roboto\\\\\\", \\\\\\"Oxygen\\\\\\",    \\\\\\"Ubuntu\\\\\\", \\\\\\"Cantarell\\\\\\", \\\\\\"Fira Sans\\\\\\", \\\\\\"Droid Sans\\\\\\", \\\\\\"Helvetica Neue\\\\\\",    sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}code {  font-family: source-code-pro, Menlo, Monaco, Consolas, \\\\\\"Courier New\\\\\\",    monospace;}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-react-typescript > build: dist/index.js 1`] = `
"import * as __SNOWPACK_ENV__ from '../_snowpack/env.js';
import.meta.env = __SNOWPACK_ENV__;
import React from \\"../_snowpack/pkg/react.js\\";
import ReactDOM from \\"../_snowpack/pkg/react-dom.js\\";
import App from \\"./App.js\\";
import \\"./index.css.proxy.js\\";
ReactDOM.render(/* @__PURE__ */ React.createElement(React.StrictMode, null, /* @__PURE__ */ React.createElement(App, null)), document.getElementById(\\"root\\"));
if (undefined /* [snowpack] import.meta.hot */ ) {
  undefined /* [snowpack] import.meta.hot */ .accept();
}"
`;

exports[`create-snowpack-app app-template-react-typescript > build: dist/logo.svg.proxy.js 1`] = `"export default \\"/dist/logo.svg\\";"`;

exports[`create-snowpack-app app-template-react-typescript > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <div id=\\"root\\"></div>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-svelte > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-svelte > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/svelte/index.mjs\\": {
      \\"bytes\\": 212,
      \\"imports\\": []
    },
    \\"PKG/svelte.js\\": {
      \\"bytes\\": 121,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/svelte/index.mjs\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/svelte/internal/index.mjs\\": {
      \\"bytes\\": 54836,
      \\"imports\\": []
    },
    \\"PKG/svelte/internal.js\\": {
      \\"bytes\\": 130,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/svelte/internal/index.mjs\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/svelte.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 360
    },
    \\"build/_snowpack/pkg/svelte.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"SvelteComponent\\",
        \\"SvelteComponentTyped\\",
        \\"afterUpdate\\",
        \\"beforeUpdate\\",
        \\"createEventDispatcher\\",
        \\"getContext\\",
        \\"hasContext\\",
        \\"onDestroy\\",
        \\"onMount\\",
        \\"setContext\\",
        \\"tick\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/svelte/index.mjs\\": {
          \\"bytesInOutput\\": 244
        },
        \\"PKG/svelte.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 524
    },
    \\"build/_snowpack/pkg/svelte/internal.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 81978
    },
    \\"build/_snowpack/pkg/svelte/internal.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"HtmlTag\\",
        \\"SvelteComponent\\",
        \\"SvelteComponentDev\\",
        \\"SvelteComponentTyped\\",
        \\"SvelteElement\\",
        \\"action_destroyer\\",
        \\"add_attribute\\",
        \\"add_classes\\",
        \\"add_flush_callback\\",
        \\"add_location\\",
        \\"add_render_callback\\",
        \\"add_resize_listener\\",
        \\"add_transform\\",
        \\"afterUpdate\\",
        \\"append\\",
        \\"append_dev\\",
        \\"assign\\",
        \\"attr\\",
        \\"attr_dev\\",
        \\"attribute_to_object\\",
        \\"beforeUpdate\\",
        \\"bind\\",
        \\"binding_callbacks\\",
        \\"blank_object\\",
        \\"bubble\\",
        \\"check_outros\\",
        \\"children\\",
        \\"claim_component\\",
        \\"claim_element\\",
        \\"claim_space\\",
        \\"claim_text\\",
        \\"clear_loops\\",
        \\"component_subscribe\\",
        \\"compute_rest_props\\",
        \\"compute_slots\\",
        \\"createEventDispatcher\\",
        \\"create_animation\\",
        \\"create_bidirectional_transition\\",
        \\"create_component\\",
        \\"create_in_transition\\",
        \\"create_out_transition\\",
        \\"create_slot\\",
        \\"create_ssr_component\\",
        \\"current_component\\",
        \\"custom_event\\",
        \\"dataset_dev\\",
        \\"debug\\",
        \\"destroy_block\\",
        \\"destroy_component\\",
        \\"destroy_each\\",
        \\"detach\\",
        \\"detach_after_dev\\",
        \\"detach_before_dev\\",
        \\"detach_between_dev\\",
        \\"detach_dev\\",
        \\"dirty_components\\",
        \\"dispatch_dev\\",
        \\"each\\",
        \\"element\\",
        \\"element_is\\",
        \\"empty\\",
        \\"escape\\",
        \\"escaped\\",
        \\"exclude_internal_props\\",
        \\"fix_and_destroy_block\\",
        \\"fix_and_outro_and_destroy_block\\",
        \\"fix_position\\",
        \\"flush\\",
        \\"getContext\\",
        \\"get_binding_group_value\\",
        \\"get_current_component\\",
        \\"get_custom_elements_slots\\",
        \\"get_slot_changes\\",
        \\"get_slot_context\\",
        \\"get_spread_object\\",
        \\"get_spread_update\\",
        \\"get_store_value\\",
        \\"globals\\",
        \\"group_outros\\",
        \\"handle_promise\\",
        \\"hasContext\\",
        \\"has_prop\\",
        \\"identity\\",
        \\"init\\",
        \\"insert\\",
        \\"insert_dev\\",
        \\"intros\\",
        \\"invalid_attribute_name_character\\",
        \\"is_client\\",
        \\"is_crossorigin\\",
        \\"is_empty\\",
        \\"is_function\\",
        \\"is_promise\\",
        \\"listen\\",
        \\"listen_dev\\",
        \\"loop\\",
        \\"loop_guard\\",
        \\"missing_component\\",
        \\"mount_component\\",
        \\"noop\\",
        \\"not_equal\\",
        \\"now\\",
        \\"null_to_empty\\",
        \\"object_without_properties\\",
        \\"onDestroy\\",
        \\"onMount\\",
        \\"once\\",
        \\"outro_and_destroy_block\\",
        \\"prevent_default\\",
        \\"prop_dev\\",
        \\"query_selector_all\\",
        \\"raf\\",
        \\"run\\",
        \\"run_all\\",
        \\"safe_not_equal\\",
        \\"schedule_update\\",
        \\"select_multiple_value\\",
        \\"select_option\\",
        \\"select_options\\",
        \\"select_value\\",
        \\"self\\",
        \\"setContext\\",
        \\"set_attributes\\",
        \\"set_current_component\\",
        \\"set_custom_element_data\\",
        \\"set_data\\",
        \\"set_data_dev\\",
        \\"set_input_type\\",
        \\"set_input_value\\",
        \\"set_now\\",
        \\"set_raf\\",
        \\"set_store_value\\",
        \\"set_style\\",
        \\"set_svg_attributes\\",
        \\"space\\",
        \\"spread\\",
        \\"stop_propagation\\",
        \\"subscribe\\",
        \\"svg_element\\",
        \\"text\\",
        \\"tick\\",
        \\"time_ranges_to_array\\",
        \\"to_number\\",
        \\"toggle_class\\",
        \\"transition_in\\",
        \\"transition_out\\",
        \\"update_keyed_each\\",
        \\"update_slot\\",
        \\"update_slot_spread\\",
        \\"validate_component\\",
        \\"validate_each_argument\\",
        \\"validate_each_keys\\",
        \\"validate_slots\\",
        \\"validate_store\\",
        \\"xlink_attr\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/svelte/internal/index.mjs\\": {
          \\"bytesInOutput\\": 42857
        },
        \\"PKG/svelte/internal.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 45553
    }
  }
}"
`;

exports[`create-snowpack-app app-template-svelte > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/svelte/index.mjs\\":{\\"bytes\\":212,\\"imports\\":[]},\\"PKG/svelte.js\\":{\\"bytes\\":121,\\"imports\\":[{\\"path\\":\\"../../node_modules/svelte/index.mjs\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/svelte/internal/index.mjs\\":{\\"bytes\\":54836,\\"imports\\":[]},\\"PKG/svelte/internal.js\\":{\\"bytes\\":130,\\"imports\\":[{\\"path\\":\\"../../node_modules/svelte/internal/index.mjs\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/svelte.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":360},\\"build/_snowpack/pkg/svelte.js\\":{\\"imports\\":[],\\"exports\\":[\\"SvelteComponent\\",\\"SvelteComponentTyped\\",\\"afterUpdate\\",\\"beforeUpdate\\",\\"createEventDispatcher\\",\\"getContext\\",\\"hasContext\\",\\"onDestroy\\",\\"onMount\\",\\"setContext\\",\\"tick\\"],\\"inputs\\":{\\"../../node_modules/svelte/index.mjs\\":{\\"bytesInOutput\\":244},\\"PKG/svelte.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":524},\\"build/_snowpack/pkg/svelte/internal.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":81978},\\"build/_snowpack/pkg/svelte/internal.js\\":{\\"imports\\":[],\\"exports\\":[\\"HtmlTag\\",\\"SvelteComponent\\",\\"SvelteComponentDev\\",\\"SvelteComponentTyped\\",\\"SvelteElement\\",\\"action_destroyer\\",\\"add_attribute\\",\\"add_classes\\",\\"add_flush_callback\\",\\"add_location\\",\\"add_render_callback\\",\\"add_resize_listener\\",\\"add_transform\\",\\"afterUpdate\\",\\"append\\",\\"append_dev\\",\\"assign\\",\\"attr\\",\\"attr_dev\\",\\"attribute_to_object\\",\\"beforeUpdate\\",\\"bind\\",\\"binding_callbacks\\",\\"blank_object\\",\\"bubble\\",\\"check_outros\\",\\"children\\",\\"claim_component\\",\\"claim_element\\",\\"claim_space\\",\\"claim_text\\",\\"clear_loops\\",\\"component_subscribe\\",\\"compute_rest_props\\",\\"compute_slots\\",\\"createEventDispatcher\\",\\"create_animation\\",\\"create_bidirectional_transition\\",\\"create_component\\",\\"create_in_transition\\",\\"create_out_transition\\",\\"create_slot\\",\\"create_ssr_component\\",\\"current_component\\",\\"custom_event\\",\\"dataset_dev\\",\\"debug\\",\\"destroy_block\\",\\"destroy_component\\",\\"destroy_each\\",\\"detach\\",\\"detach_after_dev\\",\\"detach_before_dev\\",\\"detach_between_dev\\",\\"detach_dev\\",\\"dirty_components\\",\\"dispatch_dev\\",\\"each\\",\\"element\\",\\"element_is\\",\\"empty\\",\\"escape\\",\\"escaped\\",\\"exclude_internal_props\\",\\"fix_and_destroy_block\\",\\"fix_and_outro_and_destroy_block\\",\\"fix_position\\",\\"flush\\",\\"getContext\\",\\"get_binding_group_value\\",\\"get_current_component\\",\\"get_custom_elements_slots\\",\\"get_slot_changes\\",\\"get_slot_context\\",\\"get_spread_object\\",\\"get_spread_update\\",\\"get_store_value\\",\\"globals\\",\\"group_outros\\",\\"handle_promise\\",\\"hasContext\\",\\"has_prop\\",\\"identity\\",\\"init\\",\\"insert\\",\\"insert_dev\\",\\"intros\\",\\"invalid_attribute_name_character\\",\\"is_client\\",\\"is_crossorigin\\",\\"is_empty\\",\\"is_function\\",\\"is_promise\\",\\"listen\\",\\"listen_dev\\",\\"loop\\",\\"loop_guard\\",\\"missing_component\\",\\"mount_component\\",\\"noop\\",\\"not_equal\\",\\"now\\",\\"null_to_empty\\",\\"object_without_properties\\",\\"onDestroy\\",\\"onMount\\",\\"once\\",\\"outro_and_destroy_block\\",\\"prevent_default\\",\\"prop_dev\\",\\"query_selector_all\\",\\"raf\\",\\"run\\",\\"run_all\\",\\"safe_not_equal\\",\\"schedule_update\\",\\"select_multiple_value\\",\\"select_option\\",\\"select_options\\",\\"select_value\\",\\"self\\",\\"setContext\\",\\"set_attributes\\",\\"set_current_component\\",\\"set_custom_element_data\\",\\"set_data\\",\\"set_data_dev\\",\\"set_input_type\\",\\"set_input_value\\",\\"set_now\\",\\"set_raf\\",\\"set_store_value\\",\\"set_style\\",\\"set_svg_attributes\\",\\"space\\",\\"spread\\",\\"stop_propagation\\",\\"subscribe\\",\\"svg_element\\",\\"text\\",\\"tick\\",\\"time_ranges_to_array\\",\\"to_number\\",\\"toggle_class\\",\\"transition_in\\",\\"transition_out\\",\\"update_keyed_each\\",\\"update_slot\\",\\"update_slot_spread\\",\\"validate_component\\",\\"validate_each_argument\\",\\"validate_each_keys\\",\\"validate_slots\\",\\"validate_store\\",\\"xlink_attr\\"],\\"inputs\\":{\\"../../node_modules/svelte/internal/index.mjs\\":{\\"bytesInOutput\\":42857},\\"PKG/svelte/internal.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":45553}}};
export default json;"
`;

exports[`create-snowpack-app app-template-svelte > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"svelte\\": \\"./svelte.js\\",
    \\"svelte/internal\\": \\"./svelte/internal.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-svelte > build: _snowpack/pkg/svelte.js 1`] = `
"// ../../node_modules/svelte/index.mjs
import {SvelteComponentDev, SvelteComponentTyped, afterUpdate, beforeUpdate, createEventDispatcher, getContext, hasContext, onDestroy, onMount, setContext, tick} from \\"/Users/fks/Code/snowpack/node_modules/svelte/index.mjs/internal/index.mjs\\";
export {
  SvelteComponentDev as SvelteComponent,
  SvelteComponentTyped,
  afterUpdate,
  beforeUpdate,
  createEventDispatcher,
  getContext,
  hasContext,
  onDestroy,
  onMount,
  setContext,
  tick
};
//# sourceMappingURL=svelte.js.map"
`;

exports[`create-snowpack-app app-template-svelte > build: _snowpack/pkg/svelte.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/svelte.js.map\\";"`;

exports[`create-snowpack-app app-template-svelte > build: _snowpack/pkg/svelte/internal.js 1`] = `
"// ../../node_modules/svelte/internal/index.mjs
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return tar;
}
function is_promise(value) {
  return value && typeof value === \\"object\\" && typeof value.then === \\"function\\";
}
function add_location(element2, file, line, column, char) {
  element2.__svelte_meta = {
    loc: {file, line, column, char}
  };
}
function run(fn) {
  return fn();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === \\"function\\";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === \\"object\\" || typeof a === \\"function\\");
}
function not_equal(a, b) {
  return a != a ? b == b : a !== b;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function validate_store(store, name) {
  if (store != null && typeof store.subscribe !== \\"function\\") {
    throw new Error(\`'\${name}' is not a store with a 'subscribe' method\`);
  }
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_) => value = _)();
  return value;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === \\"object\\") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
  const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {
  const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function exclude_internal_props(props) {
  const result = {};
  for (const k in props)
    if (k[0] !== \\"$\\")
      result[k] = props[k];
  return result;
}
function compute_rest_props(props, keys) {
  const rest = {};
  keys = new Set(keys);
  for (const k in props)
    if (!keys.has(k) && k[0] !== \\"$\\")
      rest[k] = props[k];
  return rest;
}
function compute_slots(slots) {
  const result = {};
  for (const key in slots) {
    result[key] = true;
  }
  return result;
}
function once(fn) {
  let ran = false;
  return function(...args) {
    if (ran)
      return;
    ran = true;
    fn.call(this, ...args);
  };
}
function null_to_empty(value) {
  return value == null ? \\"\\" : value;
}
function set_store_value(store, ret, value = ret) {
  store.set(value);
  return ret;
}
var has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
var is_client = typeof window !== \\"undefined\\";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
function set_now(fn) {
  now = fn;
}
function set_raf(fn) {
  raf = fn;
}
var tasks = new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function clear_loops() {
  tasks.clear();
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = {c: callback, f: fulfill});
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function element_is(name, is) {
  return document.createElement(name, {is});
}
function object_without_properties(obj, exclude) {
  const target = {};
  for (const k in obj) {
    if (has_prop(obj, k) && exclude.indexOf(k) === -1) {
      target[k] = obj[k];
    }
  }
  return target;
}
function svg_element(name) {
  return document.createElementNS(\\"http://www.w3.org/2000/svg\\", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(\\" \\");
}
function empty() {
  return text(\\"\\");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function stop_propagation(fn) {
  return function(event) {
    event.stopPropagation();
    return fn.call(this, event);
  };
}
function self(fn) {
  return function(event) {
    if (event.target === this)
      fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
  const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
  for (const key in attributes) {
    if (attributes[key] == null) {
      node.removeAttribute(key);
    } else if (key === \\"style\\") {
      node.style.cssText = attributes[key];
    } else if (key === \\"__value\\") {
      node.value = node[key] = attributes[key];
    } else if (descriptors[key] && descriptors[key].set) {
      node[key] = attributes[key];
    } else {
      attr(node, key, attributes[key]);
    }
  }
}
function set_svg_attributes(node, attributes) {
  for (const key in attributes) {
    attr(node, key, attributes[key]);
  }
}
function set_custom_element_data(node, prop, value) {
  if (prop in node) {
    node[prop] = value;
  } else {
    attr(node, prop, value);
  }
}
function xlink_attr(node, attribute, value) {
  node.setAttributeNS(\\"http://www.w3.org/1999/xlink\\", attribute, value);
}
function get_binding_group_value(group, __value, checked) {
  const value = new Set();
  for (let i = 0; i < group.length; i += 1) {
    if (group[i].checked)
      value.add(group[i].__value);
  }
  if (!checked) {
    value.delete(__value);
  }
  return Array.from(value);
}
function to_number(value) {
  return value === \\"\\" ? null : +value;
}
function time_ranges_to_array(ranges) {
  const array = [];
  for (let i = 0; i < ranges.length; i += 1) {
    array.push({start: ranges.start(i), end: ranges.end(i)});
  }
  return array;
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function claim_element(nodes, name, attributes, svg) {
  for (let i = 0; i < nodes.length; i += 1) {
    const node = nodes[i];
    if (node.nodeName === name) {
      let j = 0;
      const remove = [];
      while (j < node.attributes.length) {
        const attribute = node.attributes[j++];
        if (!attributes[attribute.name]) {
          remove.push(attribute.name);
        }
      }
      for (let k = 0; k < remove.length; k++) {
        node.removeAttribute(remove[k]);
      }
      return nodes.splice(i, 1)[0];
    }
  }
  return svg ? svg_element(name) : element(name);
}
function claim_text(nodes, data) {
  for (let i = 0; i < nodes.length; i += 1) {
    const node = nodes[i];
    if (node.nodeType === 3) {
      node.data = \\"\\" + data;
      return nodes.splice(i, 1)[0];
    }
  }
  return text(data);
}
function claim_space(nodes) {
  return claim_text(nodes, \\" \\");
}
function set_data(text2, data) {
  data = \\"\\" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? \\"\\" : value;
}
function set_input_type(input, type) {
  try {
    input.type = type;
  } catch (e) {
  }
}
function set_style(node, key, value, important) {
  node.style.setProperty(key, value, important ? \\"important\\" : \\"\\");
}
function select_option(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
}
function select_options(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    option.selected = ~value.indexOf(option.__value);
  }
}
function select_value(select) {
  const selected_option = select.querySelector(\\":checked\\") || select.options[0];
  return selected_option && selected_option.__value;
}
function select_multiple_value(select) {
  return [].map.call(select.querySelectorAll(\\":checked\\"), (option) => option.__value);
}
var crossorigin;
function is_crossorigin() {
  if (crossorigin === void 0) {
    crossorigin = false;
    try {
      if (typeof window !== \\"undefined\\" && window.parent) {
        void window.parent.document;
      }
    } catch (error) {
      crossorigin = true;
    }
  }
  return crossorigin;
}
function add_resize_listener(node, fn) {
  const computed_style = getComputedStyle(node);
  if (computed_style.position === \\"static\\") {
    node.style.position = \\"relative\\";
  }
  const iframe = element(\\"iframe\\");
  iframe.setAttribute(\\"style\\", \\"display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;\\");
  iframe.setAttribute(\\"aria-hidden\\", \\"true\\");
  iframe.tabIndex = -1;
  const crossorigin2 = is_crossorigin();
  let unsubscribe;
  if (crossorigin2) {
    iframe.src = \\"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\\";
    unsubscribe = listen(window, \\"message\\", (event) => {
      if (event.source === iframe.contentWindow)
        fn();
    });
  } else {
    iframe.src = \\"about:blank\\";
    iframe.onload = () => {
      unsubscribe = listen(iframe.contentWindow, \\"resize\\", fn);
    };
  }
  append(node, iframe);
  return () => {
    if (crossorigin2) {
      unsubscribe();
    } else if (unsubscribe && iframe.contentWindow) {
      unsubscribe();
    }
    detach(iframe);
  };
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? \\"add\\" : \\"remove\\"](name);
}
function custom_event(type, detail) {
  const e = document.createEvent(\\"CustomEvent\\");
  e.initCustomEvent(type, false, false, detail);
  return e;
}
function query_selector_all(selector, parent = document.body) {
  return Array.from(parent.querySelectorAll(selector));
}
var HtmlTag = class {
  constructor(anchor = null) {
    this.a = anchor;
    this.e = this.n = null;
  }
  m(html, target, anchor = null) {
    if (!this.e) {
      this.e = element(target.nodeName);
      this.t = target;
      this.h(html);
    }
    this.i(anchor);
  }
  h(html) {
    this.e.innerHTML = html;
    this.n = Array.from(this.e.childNodes);
  }
  i(anchor) {
    for (let i = 0; i < this.n.length; i += 1) {
      insert(this.t, this.n[i], anchor);
    }
  }
  p(html) {
    this.d();
    this.h(html);
    this.i(this.a);
  }
  d() {
    this.n.forEach(detach);
  }
};
function attribute_to_object(attributes) {
  const result = {};
  for (const attribute of attributes) {
    result[attribute.name] = attribute.value;
  }
  return result;
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach((node) => {
    result[node.slot || \\"default\\"] = true;
  });
  return result;
}
var active_docs = new Set();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = \\"{\\";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + \`%{\${fn(t, 1 - t)}}
\`;
  }
  const rule = keyframes + \`100% {\${fn(b, 1 - b)}}
}\`;
  const name = \`__svelte_\${hash(rule)}_\${uid}\`;
  const doc = node.ownerDocument;
  active_docs.add(doc);
  const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element(\\"style\\")).sheet);
  const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
  if (!current_rules[name]) {
    current_rules[name] = true;
    stylesheet.insertRule(\`@keyframes \${name} \${rule}\`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || \\"\\";
  node.style.animation = \`\${animation ? \`\${animation}, \` : \\"\\"}\${name} \${duration}ms linear \${delay}ms 1 both\`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || \\"\\").split(\\", \\");
  const next = previous.filter(name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf(\\"__svelte\\") === -1);
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(\\", \\");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    active_docs.forEach((doc) => {
      const stylesheet = doc.__svelte_stylesheet;
      let i = stylesheet.cssRules.length;
      while (i--)
        stylesheet.deleteRule(i);
      doc.__svelte_rules = {};
    });
    active_docs.clear();
  });
}
function create_animation(node, from, fn, params) {
  if (!from)
    return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    start: start_time = now() + delay,
    end = start_time + duration,
    tick: tick2 = noop,
    css
  } = fn(node, {from, to}, params);
  let running = true;
  let started = false;
  let name;
  function start() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css)
      delete_rule(node, name);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t = 0 + 1 * easing(p / duration);
      tick2(t, 1 - t);
    }
    return true;
  });
  start();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== \\"absolute\\" && style.position !== \\"fixed\\") {
    const {width, height} = style;
    const a = node.getBoundingClientRect();
    node.style.position = \\"absolute\\";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b = node.getBoundingClientRect();
  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === \\"none\\" ? \\"\\" : style.transform;
    node.style.transform = \`\${transform} translate(\${a.left - b.left}px, \${a.top - b.top}px)\`;
  }
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error(\\"Function called outside component initialization\\");
  return current_component;
}
function beforeUpdate(fn) {
  get_current_component().$$.before_update.push(fn);
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail);
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
    }
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function hasContext(key) {
  return get_current_component().$$.context.has(key);
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn) => fn(event));
  }
}
var dirty_components = [];
var intros = {enabled: false};
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var flushing = false;
var seen_callbacks = new Set();
function flush() {
  if (flushing)
    return;
  flushing = true;
  do {
    for (let i = 0; i < dirty_components.length; i += 1) {
      const component = dirty_components[i];
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  flushing = false;
  seen_callbacks.clear();
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(\`\${direction ? \\"intro\\" : \\"outro\\"}\${kind}\`));
}
var outroing = new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
var null_transition = {duration: 0};
function create_in_transition(node, fn, params) {
  let config = fn(node, params);
  let running = false;
  let animation_name;
  let task;
  let uid = 0;
  function cleanup() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function go() {
    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;
    if (css)
      animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
    tick2(0, 1);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    if (task)
      task.abort();
    running = true;
    add_render_callback(() => dispatch(node, true, \\"start\\"));
    task = loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick2(1, 0);
          dispatch(node, true, \\"end\\");
          cleanup();
          return running = false;
        }
        if (now2 >= start_time) {
          const t = easing((now2 - start_time) / duration);
          tick2(t, 1 - t);
        }
      }
      return running;
    });
  }
  let started = false;
  return {
    start() {
      if (started)
        return;
      delete_rule(node);
      if (is_function(config)) {
        config = config();
        wait().then(go);
      } else {
        go();
      }
    },
    invalidate() {
      started = false;
    },
    end() {
      if (running) {
        cleanup();
        running = false;
      }
    }
  };
}
function create_out_transition(node, fn, params) {
  let config = fn(node, params);
  let running = true;
  let animation_name;
  const group = outros;
  group.r += 1;
  function go() {
    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;
    if (css)
      animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    add_render_callback(() => dispatch(node, false, \\"start\\"));
    loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick2(0, 1);
          dispatch(node, false, \\"end\\");
          if (!--group.r) {
            run_all(group.c);
          }
          return false;
        }
        if (now2 >= start_time) {
          const t = easing((now2 - start_time) / duration);
          tick2(1 - t, t);
        }
      }
      return running;
    });
  }
  if (is_function(config)) {
    wait().then(() => {
      config = config();
      go();
    });
  } else {
    go();
  }
  return {
    end(reset) {
      if (reset && config.tick) {
        config.tick(1, 0);
      }
      if (running) {
        if (animation_name)
          delete_rule(node, animation_name);
        running = false;
      }
    }
  };
}
function create_bidirectional_transition(node, fn, params, intro) {
  let config = fn(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }
      if (b)
        tick2(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, \\"start\\"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, \\"start\\");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick2(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, \\"end\\");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick2(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          config = config();
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
function handle_promise(promise2, info) {
  const token = info.token = {};
  function update2(type, index, key, value) {
    if (info.token !== token)
      return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i) => {
          if (i !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i] === block2) {
                info.blocks[i] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks)
      info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise2)) {
    const current_component2 = get_current_component();
    promise2.then((value) => {
      set_current_component(current_component2);
      update2(info.then, 1, info.value, value);
      set_current_component(null);
    }, (error) => {
      set_current_component(current_component2);
      update2(info.catch, 2, info.error, error);
      set_current_component(null);
      if (!info.hasCatch) {
        throw error;
      }
    });
    if (info.current !== info.pending) {
      update2(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update2(info.then, 1, info.value, promise2);
      return true;
    }
    info.resolved = promise2;
  }
}
var globals = typeof window !== \\"undefined\\" ? window : typeof globalThis !== \\"undefined\\" ? globalThis : global;
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function fix_and_destroy_block(block, lookup) {
  block.f();
  destroy_block(block, lookup);
}
function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = new Map();
  const deltas = new Map();
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = new Set();
  const did_move = new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
function validate_each_keys(ctx, list, get_context, get_key) {
  const keys = new Set();
  for (let i = 0; i < list.length; i++) {
    const key = get_key(get_context(ctx, list, i));
    if (keys.has(key)) {
      throw new Error(\\"Cannot have duplicate keys in a keyed each\\");
    }
    keys.add(key);
  }
}
function get_spread_update(levels, updates) {
  const update2 = {};
  const to_null_out = {};
  const accounted_for = {$$scope: 1};
  let i = levels.length;
  while (i--) {
    const o = levels[i];
    const n = updates[i];
    if (n) {
      for (const key in o) {
        if (!(key in n))
          to_null_out[key] = 1;
      }
      for (const key in n) {
        if (!accounted_for[key]) {
          update2[key] = n[key];
          accounted_for[key] = 1;
        }
      }
      levels[i] = n;
    } else {
      for (const key in o) {
        accounted_for[key] = 1;
      }
    }
  }
  for (const key in to_null_out) {
    if (!(key in update2))
      update2[key] = void 0;
  }
  return update2;
}
function get_spread_object(spread_props) {
  return typeof spread_props === \\"object\\" && spread_props !== null ? spread_props : {};
}
var boolean_attributes = new Set([
  \\"allowfullscreen\\",
  \\"allowpaymentrequest\\",
  \\"async\\",
  \\"autofocus\\",
  \\"autoplay\\",
  \\"checked\\",
  \\"controls\\",
  \\"default\\",
  \\"defer\\",
  \\"disabled\\",
  \\"formnovalidate\\",
  \\"hidden\\",
  \\"ismap\\",
  \\"loop\\",
  \\"multiple\\",
  \\"muted\\",
  \\"nomodule\\",
  \\"novalidate\\",
  \\"open\\",
  \\"playsinline\\",
  \\"readonly\\",
  \\"required\\",
  \\"reversed\\",
  \\"selected\\"
]);
var invalid_attribute_name_character = /[\\\\s'\\">/=\\\\u{FDD0}-\\\\u{FDEF}\\\\u{FFFE}\\\\u{FFFF}\\\\u{1FFFE}\\\\u{1FFFF}\\\\u{2FFFE}\\\\u{2FFFF}\\\\u{3FFFE}\\\\u{3FFFF}\\\\u{4FFFE}\\\\u{4FFFF}\\\\u{5FFFE}\\\\u{5FFFF}\\\\u{6FFFE}\\\\u{6FFFF}\\\\u{7FFFE}\\\\u{7FFFF}\\\\u{8FFFE}\\\\u{8FFFF}\\\\u{9FFFE}\\\\u{9FFFF}\\\\u{AFFFE}\\\\u{AFFFF}\\\\u{BFFFE}\\\\u{BFFFF}\\\\u{CFFFE}\\\\u{CFFFF}\\\\u{DFFFE}\\\\u{DFFFF}\\\\u{EFFFE}\\\\u{EFFFF}\\\\u{FFFFE}\\\\u{FFFFF}\\\\u{10FFFE}\\\\u{10FFFF}]/u;
function spread(args, classes_to_add) {
  const attributes = Object.assign({}, ...args);
  if (classes_to_add) {
    if (attributes.class == null) {
      attributes.class = classes_to_add;
    } else {
      attributes.class += \\" \\" + classes_to_add;
    }
  }
  let str = \\"\\";
  Object.keys(attributes).forEach((name) => {
    if (invalid_attribute_name_character.test(name))
      return;
    const value = attributes[name];
    if (value === true)
      str += \\" \\" + name;
    else if (boolean_attributes.has(name.toLowerCase())) {
      if (value)
        str += \\" \\" + name;
    } else if (value != null) {
      str += \` \${name}=\\"\${String(value).replace(/\\"/g, \\"&#34;\\").replace(/'/g, \\"&#39;\\")}\\"\`;
    }
  });
  return str;
}
var escaped = {
  '\\"': \\"&quot;\\",
  \\"'\\": \\"&#39;\\",
  \\"&\\": \\"&amp;\\",
  \\"<\\": \\"&lt;\\",
  \\">\\": \\"&gt;\\"
};
function escape(html) {
  return String(html).replace(/[\\"'&<>]/g, (match) => escaped[match]);
}
function each(items, fn) {
  let str = \\"\\";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
var missing_component = {
  $$render: () => \\"\\"
};
function validate_component(component, name) {
  if (!component || !component.$$render) {
    if (name === \\"svelte:component\\")
      name += \\" this={...}\\";
    throw new Error(\`<\${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules\`);
  }
  return component;
}
function debug(file, line, column, values) {
  console.log(\`{@debug} \${file ? file + \\" \\" : \\"\\"}(\${line}:\${column})\`);
  console.log(values);
  return \\"\\";
}
var on_destroy;
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(parent_component ? parent_component.$$.context : []),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({$$});
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, options = {}) => {
      on_destroy = [];
      const result = {title: \\"\\", head: \\"\\", css: new Set()};
      const html = $$render(result, props, {}, options);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css) => css.code).join(\\"\\"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name, value, boolean) {
  if (value == null || boolean && !value)
    return \\"\\";
  return \` \${name}\${value === true ? \\"\\" : \`=\${typeof value === \\"string\\" ? JSON.stringify(escape(value)) : \`\\"\${value}\\"\`}\`}\`;
}
function add_classes(classes) {
  return classes ? \` class=\\"\${classes}\\"\` : \\"\\";
}
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function claim_component(block, parent_nodes) {
  block && block.l(parent_nodes);
}
function mount_component(component, target, anchor) {
  const {fragment, on_mount, on_destroy: on_destroy2, after_update} = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = on_mount.map(run).filter(is_function);
    if (on_destroy2) {
      on_destroy2.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance, create_fragment, not_equal2, props, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const prop_values = options.props || {};
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal: not_equal2,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    before_update: [],
    after_update: [],
    context: new Map(parent_component ? parent_component.$$.context : []),
    callbacks: blank_object(),
    dirty,
    skip_bound: false
  };
  let ready = false;
  $$.ctx = instance ? instance(component, prop_values, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal2($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === \\"function\\") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({mode: \\"open\\"});
    }
    connectedCallback() {
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};
function dispatch_dev(type, detail) {
  document.dispatchEvent(custom_event(type, Object.assign({version: \\"3.31.2\\"}, detail)));
}
function append_dev(target, node) {
  dispatch_dev(\\"SvelteDOMInsert\\", {target, node});
  append(target, node);
}
function insert_dev(target, node, anchor) {
  dispatch_dev(\\"SvelteDOMInsert\\", {target, node, anchor});
  insert(target, node, anchor);
}
function detach_dev(node) {
  dispatch_dev(\\"SvelteDOMRemove\\", {node});
  detach(node);
}
function detach_between_dev(before, after) {
  while (before.nextSibling && before.nextSibling !== after) {
    detach_dev(before.nextSibling);
  }
}
function detach_before_dev(after) {
  while (after.previousSibling) {
    detach_dev(after.previousSibling);
  }
}
function detach_after_dev(before) {
  while (before.nextSibling) {
    detach_dev(before.nextSibling);
  }
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
  const modifiers = options === true ? [\\"capture\\"] : options ? Array.from(Object.keys(options)) : [];
  if (has_prevent_default)
    modifiers.push(\\"preventDefault\\");
  if (has_stop_propagation)
    modifiers.push(\\"stopPropagation\\");
  dispatch_dev(\\"SvelteDOMAddEventListener\\", {node, event, handler, modifiers});
  const dispose = listen(node, event, handler, options);
  return () => {
    dispatch_dev(\\"SvelteDOMRemoveEventListener\\", {node, event, handler, modifiers});
    dispose();
  };
}
function attr_dev(node, attribute, value) {
  attr(node, attribute, value);
  if (value == null)
    dispatch_dev(\\"SvelteDOMRemoveAttribute\\", {node, attribute});
  else
    dispatch_dev(\\"SvelteDOMSetAttribute\\", {node, attribute, value});
}
function prop_dev(node, property, value) {
  node[property] = value;
  dispatch_dev(\\"SvelteDOMSetProperty\\", {node, property, value});
}
function dataset_dev(node, property, value) {
  node.dataset[property] = value;
  dispatch_dev(\\"SvelteDOMSetDataset\\", {node, property, value});
}
function set_data_dev(text2, data) {
  data = \\"\\" + data;
  if (text2.wholeText === data)
    return;
  dispatch_dev(\\"SvelteDOMSetData\\", {node: text2, data});
  text2.data = data;
}
function validate_each_argument(arg) {
  if (typeof arg !== \\"string\\" && !(arg && typeof arg === \\"object\\" && \\"length\\" in arg)) {
    let msg = \\"{#each} only iterates over array-like objects.\\";
    if (typeof Symbol === \\"function\\" && arg && Symbol.iterator in arg) {
      msg += \\" You can use a spread to convert this iterable into an array.\\";
    }
    throw new Error(msg);
  }
}
function validate_slots(name, slot, keys) {
  for (const slot_key of Object.keys(slot)) {
    if (!~keys.indexOf(slot_key)) {
      console.warn(\`<\${name}> received an unexpected slot \\"\${slot_key}\\".\`);
    }
  }
}
var SvelteComponentDev = class extends SvelteComponent {
  constructor(options) {
    if (!options || !options.target && !options.$$inline) {
      throw new Error(\\"'target' is a required option\\");
    }
    super();
  }
  $destroy() {
    super.$destroy();
    this.$destroy = () => {
      console.warn(\\"Component was already destroyed\\");
    };
  }
  $capture_state() {
  }
  $inject_state() {
  }
};
var SvelteComponentTyped = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
  }
};
function loop_guard(timeout) {
  const start = Date.now();
  return () => {
    if (Date.now() - start > timeout) {
      throw new Error(\\"Infinite loop detected\\");
    }
  };
}
export {
  HtmlTag,
  SvelteComponent,
  SvelteComponentDev,
  SvelteComponentTyped,
  SvelteElement,
  action_destroyer,
  add_attribute,
  add_classes,
  add_flush_callback,
  add_location,
  add_render_callback,
  add_resize_listener,
  add_transform,
  afterUpdate,
  append,
  append_dev,
  assign,
  attr,
  attr_dev,
  attribute_to_object,
  beforeUpdate,
  bind,
  binding_callbacks,
  blank_object,
  bubble,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  claim_text,
  clear_loops,
  component_subscribe,
  compute_rest_props,
  compute_slots,
  createEventDispatcher,
  create_animation,
  create_bidirectional_transition,
  create_component,
  create_in_transition,
  create_out_transition,
  create_slot,
  create_ssr_component,
  current_component,
  custom_event,
  dataset_dev,
  debug,
  destroy_block,
  destroy_component,
  destroy_each,
  detach,
  detach_after_dev,
  detach_before_dev,
  detach_between_dev,
  detach_dev,
  dirty_components,
  dispatch_dev,
  each,
  element,
  element_is,
  empty,
  escape,
  escaped,
  exclude_internal_props,
  fix_and_destroy_block,
  fix_and_outro_and_destroy_block,
  fix_position,
  flush,
  getContext,
  get_binding_group_value,
  get_current_component,
  get_custom_elements_slots,
  get_slot_changes,
  get_slot_context,
  get_spread_object,
  get_spread_update,
  get_store_value,
  globals,
  group_outros,
  handle_promise,
  hasContext,
  has_prop,
  identity,
  init,
  insert,
  insert_dev,
  intros,
  invalid_attribute_name_character,
  is_client,
  is_crossorigin,
  is_empty,
  is_function,
  is_promise,
  listen,
  listen_dev,
  loop,
  loop_guard,
  missing_component,
  mount_component,
  noop,
  not_equal,
  now,
  null_to_empty,
  object_without_properties,
  onDestroy,
  onMount,
  once,
  outro_and_destroy_block,
  prevent_default,
  prop_dev,
  query_selector_all,
  raf,
  run,
  run_all,
  safe_not_equal,
  schedule_update,
  select_multiple_value,
  select_option,
  select_options,
  select_value,
  self,
  setContext,
  set_attributes,
  set_current_component,
  set_custom_element_data,
  set_data,
  set_data_dev,
  set_input_type,
  set_input_value,
  set_now,
  set_raf,
  set_store_value,
  set_style,
  set_svg_attributes,
  space,
  spread,
  stop_propagation,
  subscribe,
  svg_element,
  text,
  tick,
  time_ranges_to_array,
  to_number,
  toggle_class,
  transition_in,
  transition_out,
  update_keyed_each,
  update_slot,
  update_slot_spread,
  validate_component,
  validate_each_argument,
  validate_each_keys,
  validate_slots,
  validate_store,
  xlink_attr
};
//# sourceMappingURL=internal.js.map"
`;

exports[`create-snowpack-app app-template-svelte > build: _snowpack/pkg/svelte/internal.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/svelte/internal.js.map\\";"`;

exports[`create-snowpack-app app-template-svelte > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/svelte.js",
  "_snowpack/pkg/svelte.js.map",
  "_snowpack/pkg/svelte.js.map.proxy.js",
  "_snowpack/pkg/svelte/internal.js",
  "_snowpack/pkg/svelte/internal.js.map",
  "_snowpack/pkg/svelte/internal.js.map.proxy.js",
  "dist/App.svelte.css",
  "dist/App.svelte.css.proxy.js",
  "dist/App.svelte.js",
  "dist/index.js",
  "favicon.ico",
  "index.html",
  "logo.svg",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-svelte > build: dist/App.svelte.css 1`] = `"body{margin:0;font-family:Arial, Helvetica, sans-serif}.App.svelte-rq4gzr.svelte-rq4gzr{text-align:center}.App.svelte-rq4gzr code.svelte-rq4gzr{background:#0002;padding:4px 8px;border-radius:4px}.App.svelte-rq4gzr p.svelte-rq4gzr{margin:0.4rem}.App-header.svelte-rq4gzr.svelte-rq4gzr{background-color:#f9f6f6;color:#333;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:center;font-size:calc(10px + 2vmin)}.App-link.svelte-rq4gzr.svelte-rq4gzr{color:#ff3e00}.App-logo.svelte-rq4gzr.svelte-rq4gzr{height:36vmin;pointer-events:none;margin-bottom:3rem;animation:svelte-rq4gzr-App-logo-pulse infinite 1.6s ease-in-out alternate}@keyframes svelte-rq4gzr-App-logo-pulse{from{transform:scale(1)}to{transform:scale(1.06)}}"`;

exports[`create-snowpack-app app-template-svelte > build: dist/App.svelte.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\"body{margin:0;font-family:Arial, Helvetica, sans-serif}.App.svelte-rq4gzr.svelte-rq4gzr{text-align:center}.App.svelte-rq4gzr code.svelte-rq4gzr{background:#0002;padding:4px 8px;border-radius:4px}.App.svelte-rq4gzr p.svelte-rq4gzr{margin:0.4rem}.App-header.svelte-rq4gzr.svelte-rq4gzr{background-color:#f9f6f6;color:#333;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:center;font-size:calc(10px + 2vmin)}.App-link.svelte-rq4gzr.svelte-rq4gzr{color:#ff3e00}.App-logo.svelte-rq4gzr.svelte-rq4gzr{height:36vmin;pointer-events:none;margin-bottom:3rem;animation:svelte-rq4gzr-App-logo-pulse infinite 1.6s ease-in-out alternate}@keyframes svelte-rq4gzr-App-logo-pulse{from{transform:scale(1)}to{transform:scale(1.06)}}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-svelte > build: dist/App.svelte.js 1`] = `
"import './App.svelte.css.proxy.js';
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from \\"../_snowpack/pkg/svelte/internal.js\\";
import { onMount } from \\"../_snowpack/pkg/svelte.js\\";
function create_fragment(ctx) {
	let div;
	let header;
	let img;
	let img_src_value;
	let t0;
	let p0;
	let t4;
	let p1;
	let t5;
	let code1;
	let t6;
	let t7;
	let t8;
	let p2;
	return {
		c() {
			div = element(\\"div\\");
			header = element(\\"header\\");
			img = element(\\"img\\");
			t0 = space();
			p0 = element(\\"p\\");
			p0.innerHTML = \`Edit <code class=\\"svelte-rq4gzr\\">src/App.svelte</code> and save to reload.\`;
			t4 = space();
			p1 = element(\\"p\\");
			t5 = text(\\"Page has been open for \\");
			code1 = element(\\"code\\");
			t6 = text(/*count*/ ctx[0]);
			t7 = text(\\" seconds.\\");
			t8 = space();
			p2 = element(\\"p\\");
			p2.innerHTML = \`<a class=\\"App-link svelte-rq4gzr\\" href=\\"https://svelte.dev\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Learn Svelte</a>\`;
			if (img.src !== (img_src_value = \\"/logo.svg\\")) attr(img, \\"src\\", img_src_value);
			attr(img, \\"class\\", \\"App-logo svelte-rq4gzr\\");
			attr(img, \\"alt\\", \\"logo\\");
			attr(p0, \\"class\\", \\"svelte-rq4gzr\\");
			attr(code1, \\"class\\", \\"svelte-rq4gzr\\");
			attr(p1, \\"class\\", \\"svelte-rq4gzr\\");
			attr(p2, \\"class\\", \\"svelte-rq4gzr\\");
			attr(header, \\"class\\", \\"App-header svelte-rq4gzr\\");
			attr(div, \\"class\\", \\"App svelte-rq4gzr\\");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, header);
			append(header, img);
			append(header, t0);
			append(header, p0);
			append(header, t4);
			append(header, p1);
			append(p1, t5);
			append(p1, code1);
			append(code1, t6);
			append(p1, t7);
			append(header, t8);
			append(header, p2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 1) set_data(t6, /*count*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}
function instance($$self, $$props, $$invalidate) {
	let count = 0;
	onMount(() => {
		const interval = setInterval(() => $$invalidate(0, count++, count), 1000);
		return () => {
			clearInterval(interval);
		};
	});
	return [count];
}
class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}
export default App;"
`;

exports[`create-snowpack-app app-template-svelte > build: dist/index.js 1`] = `
"import * as __SNOWPACK_ENV__ from '../_snowpack/env.js';
import.meta.env = __SNOWPACK_ENV__;
import App from './App.svelte.js';
let app = new App({
  target: document.body,
});
export default app;
// Hot Module Replacement (HMR) - Remove this snippet to remove HMR.
// Learn more: https://www.snowpack.dev/concepts/hot-module-replacement
if (undefined /* [snowpack] import.meta.hot */ ) {
  undefined /* [snowpack] import.meta.hot */ .accept();
  undefined /* [snowpack] import.meta.hot */ .dispose(() => {
    app.$destroy();
  });
}"
`;

exports[`create-snowpack-app app-template-svelte > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/svelte/index.mjs\\": {
      \\"bytes\\": 212,
      \\"imports\\": []
    },
    \\"PKG/svelte.js\\": {
      \\"bytes\\": 121,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/svelte/index.mjs\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/svelte/internal/index.mjs\\": {
      \\"bytes\\": 54836,
      \\"imports\\": []
    },
    \\"PKG/svelte/internal.js\\": {
      \\"bytes\\": 130,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/svelte/internal/index.mjs\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/svelte.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 360
    },
    \\"build/_snowpack/pkg/svelte.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"SvelteComponent\\",
        \\"SvelteComponentTyped\\",
        \\"afterUpdate\\",
        \\"beforeUpdate\\",
        \\"createEventDispatcher\\",
        \\"getContext\\",
        \\"hasContext\\",
        \\"onDestroy\\",
        \\"onMount\\",
        \\"setContext\\",
        \\"tick\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/svelte/index.mjs\\": {
          \\"bytesInOutput\\": 244
        },
        \\"PKG/svelte.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 524
    },
    \\"build/_snowpack/pkg/svelte/internal.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 81978
    },
    \\"build/_snowpack/pkg/svelte/internal.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"HtmlTag\\",
        \\"SvelteComponent\\",
        \\"SvelteComponentDev\\",
        \\"SvelteComponentTyped\\",
        \\"SvelteElement\\",
        \\"action_destroyer\\",
        \\"add_attribute\\",
        \\"add_classes\\",
        \\"add_flush_callback\\",
        \\"add_location\\",
        \\"add_render_callback\\",
        \\"add_resize_listener\\",
        \\"add_transform\\",
        \\"afterUpdate\\",
        \\"append\\",
        \\"append_dev\\",
        \\"assign\\",
        \\"attr\\",
        \\"attr_dev\\",
        \\"attribute_to_object\\",
        \\"beforeUpdate\\",
        \\"bind\\",
        \\"binding_callbacks\\",
        \\"blank_object\\",
        \\"bubble\\",
        \\"check_outros\\",
        \\"children\\",
        \\"claim_component\\",
        \\"claim_element\\",
        \\"claim_space\\",
        \\"claim_text\\",
        \\"clear_loops\\",
        \\"component_subscribe\\",
        \\"compute_rest_props\\",
        \\"compute_slots\\",
        \\"createEventDispatcher\\",
        \\"create_animation\\",
        \\"create_bidirectional_transition\\",
        \\"create_component\\",
        \\"create_in_transition\\",
        \\"create_out_transition\\",
        \\"create_slot\\",
        \\"create_ssr_component\\",
        \\"current_component\\",
        \\"custom_event\\",
        \\"dataset_dev\\",
        \\"debug\\",
        \\"destroy_block\\",
        \\"destroy_component\\",
        \\"destroy_each\\",
        \\"detach\\",
        \\"detach_after_dev\\",
        \\"detach_before_dev\\",
        \\"detach_between_dev\\",
        \\"detach_dev\\",
        \\"dirty_components\\",
        \\"dispatch_dev\\",
        \\"each\\",
        \\"element\\",
        \\"element_is\\",
        \\"empty\\",
        \\"escape\\",
        \\"escaped\\",
        \\"exclude_internal_props\\",
        \\"fix_and_destroy_block\\",
        \\"fix_and_outro_and_destroy_block\\",
        \\"fix_position\\",
        \\"flush\\",
        \\"getContext\\",
        \\"get_binding_group_value\\",
        \\"get_current_component\\",
        \\"get_custom_elements_slots\\",
        \\"get_slot_changes\\",
        \\"get_slot_context\\",
        \\"get_spread_object\\",
        \\"get_spread_update\\",
        \\"get_store_value\\",
        \\"globals\\",
        \\"group_outros\\",
        \\"handle_promise\\",
        \\"hasContext\\",
        \\"has_prop\\",
        \\"identity\\",
        \\"init\\",
        \\"insert\\",
        \\"insert_dev\\",
        \\"intros\\",
        \\"invalid_attribute_name_character\\",
        \\"is_client\\",
        \\"is_crossorigin\\",
        \\"is_empty\\",
        \\"is_function\\",
        \\"is_promise\\",
        \\"listen\\",
        \\"listen_dev\\",
        \\"loop\\",
        \\"loop_guard\\",
        \\"missing_component\\",
        \\"mount_component\\",
        \\"noop\\",
        \\"not_equal\\",
        \\"now\\",
        \\"null_to_empty\\",
        \\"object_without_properties\\",
        \\"onDestroy\\",
        \\"onMount\\",
        \\"once\\",
        \\"outro_and_destroy_block\\",
        \\"prevent_default\\",
        \\"prop_dev\\",
        \\"query_selector_all\\",
        \\"raf\\",
        \\"run\\",
        \\"run_all\\",
        \\"safe_not_equal\\",
        \\"schedule_update\\",
        \\"select_multiple_value\\",
        \\"select_option\\",
        \\"select_options\\",
        \\"select_value\\",
        \\"self\\",
        \\"setContext\\",
        \\"set_attributes\\",
        \\"set_current_component\\",
        \\"set_custom_element_data\\",
        \\"set_data\\",
        \\"set_data_dev\\",
        \\"set_input_type\\",
        \\"set_input_value\\",
        \\"set_now\\",
        \\"set_raf\\",
        \\"set_store_value\\",
        \\"set_style\\",
        \\"set_svg_attributes\\",
        \\"space\\",
        \\"spread\\",
        \\"stop_propagation\\",
        \\"subscribe\\",
        \\"svg_element\\",
        \\"text\\",
        \\"tick\\",
        \\"time_ranges_to_array\\",
        \\"to_number\\",
        \\"toggle_class\\",
        \\"transition_in\\",
        \\"transition_out\\",
        \\"update_keyed_each\\",
        \\"update_slot\\",
        \\"update_slot_spread\\",
        \\"validate_component\\",
        \\"validate_each_argument\\",
        \\"validate_each_keys\\",
        \\"validate_slots\\",
        \\"validate_store\\",
        \\"xlink_attr\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/svelte/internal/index.mjs\\": {
          \\"bytesInOutput\\": 42857
        },
        \\"PKG/svelte/internal.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 45553
    }
  }
}"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/svelte/index.mjs\\":{\\"bytes\\":212,\\"imports\\":[]},\\"PKG/svelte.js\\":{\\"bytes\\":121,\\"imports\\":[{\\"path\\":\\"../../node_modules/svelte/index.mjs\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/svelte/internal/index.mjs\\":{\\"bytes\\":54836,\\"imports\\":[]},\\"PKG/svelte/internal.js\\":{\\"bytes\\":130,\\"imports\\":[{\\"path\\":\\"../../node_modules/svelte/internal/index.mjs\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/svelte.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":360},\\"build/_snowpack/pkg/svelte.js\\":{\\"imports\\":[],\\"exports\\":[\\"SvelteComponent\\",\\"SvelteComponentTyped\\",\\"afterUpdate\\",\\"beforeUpdate\\",\\"createEventDispatcher\\",\\"getContext\\",\\"hasContext\\",\\"onDestroy\\",\\"onMount\\",\\"setContext\\",\\"tick\\"],\\"inputs\\":{\\"../../node_modules/svelte/index.mjs\\":{\\"bytesInOutput\\":244},\\"PKG/svelte.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":524},\\"build/_snowpack/pkg/svelte/internal.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":81978},\\"build/_snowpack/pkg/svelte/internal.js\\":{\\"imports\\":[],\\"exports\\":[\\"HtmlTag\\",\\"SvelteComponent\\",\\"SvelteComponentDev\\",\\"SvelteComponentTyped\\",\\"SvelteElement\\",\\"action_destroyer\\",\\"add_attribute\\",\\"add_classes\\",\\"add_flush_callback\\",\\"add_location\\",\\"add_render_callback\\",\\"add_resize_listener\\",\\"add_transform\\",\\"afterUpdate\\",\\"append\\",\\"append_dev\\",\\"assign\\",\\"attr\\",\\"attr_dev\\",\\"attribute_to_object\\",\\"beforeUpdate\\",\\"bind\\",\\"binding_callbacks\\",\\"blank_object\\",\\"bubble\\",\\"check_outros\\",\\"children\\",\\"claim_component\\",\\"claim_element\\",\\"claim_space\\",\\"claim_text\\",\\"clear_loops\\",\\"component_subscribe\\",\\"compute_rest_props\\",\\"compute_slots\\",\\"createEventDispatcher\\",\\"create_animation\\",\\"create_bidirectional_transition\\",\\"create_component\\",\\"create_in_transition\\",\\"create_out_transition\\",\\"create_slot\\",\\"create_ssr_component\\",\\"current_component\\",\\"custom_event\\",\\"dataset_dev\\",\\"debug\\",\\"destroy_block\\",\\"destroy_component\\",\\"destroy_each\\",\\"detach\\",\\"detach_after_dev\\",\\"detach_before_dev\\",\\"detach_between_dev\\",\\"detach_dev\\",\\"dirty_components\\",\\"dispatch_dev\\",\\"each\\",\\"element\\",\\"element_is\\",\\"empty\\",\\"escape\\",\\"escaped\\",\\"exclude_internal_props\\",\\"fix_and_destroy_block\\",\\"fix_and_outro_and_destroy_block\\",\\"fix_position\\",\\"flush\\",\\"getContext\\",\\"get_binding_group_value\\",\\"get_current_component\\",\\"get_custom_elements_slots\\",\\"get_slot_changes\\",\\"get_slot_context\\",\\"get_spread_object\\",\\"get_spread_update\\",\\"get_store_value\\",\\"globals\\",\\"group_outros\\",\\"handle_promise\\",\\"hasContext\\",\\"has_prop\\",\\"identity\\",\\"init\\",\\"insert\\",\\"insert_dev\\",\\"intros\\",\\"invalid_attribute_name_character\\",\\"is_client\\",\\"is_crossorigin\\",\\"is_empty\\",\\"is_function\\",\\"is_promise\\",\\"listen\\",\\"listen_dev\\",\\"loop\\",\\"loop_guard\\",\\"missing_component\\",\\"mount_component\\",\\"noop\\",\\"not_equal\\",\\"now\\",\\"null_to_empty\\",\\"object_without_properties\\",\\"onDestroy\\",\\"onMount\\",\\"once\\",\\"outro_and_destroy_block\\",\\"prevent_default\\",\\"prop_dev\\",\\"query_selector_all\\",\\"raf\\",\\"run\\",\\"run_all\\",\\"safe_not_equal\\",\\"schedule_update\\",\\"select_multiple_value\\",\\"select_option\\",\\"select_options\\",\\"select_value\\",\\"self\\",\\"setContext\\",\\"set_attributes\\",\\"set_current_component\\",\\"set_custom_element_data\\",\\"set_data\\",\\"set_data_dev\\",\\"set_input_type\\",\\"set_input_value\\",\\"set_now\\",\\"set_raf\\",\\"set_store_value\\",\\"set_style\\",\\"set_svg_attributes\\",\\"space\\",\\"spread\\",\\"stop_propagation\\",\\"subscribe\\",\\"svg_element\\",\\"text\\",\\"tick\\",\\"time_ranges_to_array\\",\\"to_number\\",\\"toggle_class\\",\\"transition_in\\",\\"transition_out\\",\\"update_keyed_each\\",\\"update_slot\\",\\"update_slot_spread\\",\\"validate_component\\",\\"validate_each_argument\\",\\"validate_each_keys\\",\\"validate_slots\\",\\"validate_store\\",\\"xlink_attr\\"],\\"inputs\\":{\\"../../node_modules/svelte/internal/index.mjs\\":{\\"bytesInOutput\\":42857},\\"PKG/svelte/internal.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":45553}}};
export default json;"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"svelte\\": \\"./svelte.js\\",
    \\"svelte/internal\\": \\"./svelte/internal.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: _snowpack/pkg/svelte.js 1`] = `
"// ../../node_modules/svelte/index.mjs
import {SvelteComponentDev, SvelteComponentTyped, afterUpdate, beforeUpdate, createEventDispatcher, getContext, hasContext, onDestroy, onMount, setContext, tick} from \\"/Users/fks/Code/snowpack/node_modules/svelte/index.mjs/internal/index.mjs\\";
export {
  SvelteComponentDev as SvelteComponent,
  SvelteComponentTyped,
  afterUpdate,
  beforeUpdate,
  createEventDispatcher,
  getContext,
  hasContext,
  onDestroy,
  onMount,
  setContext,
  tick
};
//# sourceMappingURL=svelte.js.map"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: _snowpack/pkg/svelte.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/svelte.js.map\\";"`;

exports[`create-snowpack-app app-template-svelte-typescript > build: _snowpack/pkg/svelte/internal.js 1`] = `
"// ../../node_modules/svelte/internal/index.mjs
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return tar;
}
function is_promise(value) {
  return value && typeof value === \\"object\\" && typeof value.then === \\"function\\";
}
function add_location(element2, file, line, column, char) {
  element2.__svelte_meta = {
    loc: {file, line, column, char}
  };
}
function run(fn) {
  return fn();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === \\"function\\";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === \\"object\\" || typeof a === \\"function\\");
}
function not_equal(a, b) {
  return a != a ? b == b : a !== b;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function validate_store(store, name) {
  if (store != null && typeof store.subscribe !== \\"function\\") {
    throw new Error(\`'\${name}' is not a store with a 'subscribe' method\`);
  }
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_) => value = _)();
  return value;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === \\"object\\") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
  const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {
  const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function exclude_internal_props(props) {
  const result = {};
  for (const k in props)
    if (k[0] !== \\"$\\")
      result[k] = props[k];
  return result;
}
function compute_rest_props(props, keys) {
  const rest = {};
  keys = new Set(keys);
  for (const k in props)
    if (!keys.has(k) && k[0] !== \\"$\\")
      rest[k] = props[k];
  return rest;
}
function compute_slots(slots) {
  const result = {};
  for (const key in slots) {
    result[key] = true;
  }
  return result;
}
function once(fn) {
  let ran = false;
  return function(...args) {
    if (ran)
      return;
    ran = true;
    fn.call(this, ...args);
  };
}
function null_to_empty(value) {
  return value == null ? \\"\\" : value;
}
function set_store_value(store, ret, value = ret) {
  store.set(value);
  return ret;
}
var has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
var is_client = typeof window !== \\"undefined\\";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
function set_now(fn) {
  now = fn;
}
function set_raf(fn) {
  raf = fn;
}
var tasks = new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function clear_loops() {
  tasks.clear();
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = {c: callback, f: fulfill});
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function element_is(name, is) {
  return document.createElement(name, {is});
}
function object_without_properties(obj, exclude) {
  const target = {};
  for (const k in obj) {
    if (has_prop(obj, k) && exclude.indexOf(k) === -1) {
      target[k] = obj[k];
    }
  }
  return target;
}
function svg_element(name) {
  return document.createElementNS(\\"http://www.w3.org/2000/svg\\", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(\\" \\");
}
function empty() {
  return text(\\"\\");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function stop_propagation(fn) {
  return function(event) {
    event.stopPropagation();
    return fn.call(this, event);
  };
}
function self(fn) {
  return function(event) {
    if (event.target === this)
      fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
  const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
  for (const key in attributes) {
    if (attributes[key] == null) {
      node.removeAttribute(key);
    } else if (key === \\"style\\") {
      node.style.cssText = attributes[key];
    } else if (key === \\"__value\\") {
      node.value = node[key] = attributes[key];
    } else if (descriptors[key] && descriptors[key].set) {
      node[key] = attributes[key];
    } else {
      attr(node, key, attributes[key]);
    }
  }
}
function set_svg_attributes(node, attributes) {
  for (const key in attributes) {
    attr(node, key, attributes[key]);
  }
}
function set_custom_element_data(node, prop, value) {
  if (prop in node) {
    node[prop] = value;
  } else {
    attr(node, prop, value);
  }
}
function xlink_attr(node, attribute, value) {
  node.setAttributeNS(\\"http://www.w3.org/1999/xlink\\", attribute, value);
}
function get_binding_group_value(group, __value, checked) {
  const value = new Set();
  for (let i = 0; i < group.length; i += 1) {
    if (group[i].checked)
      value.add(group[i].__value);
  }
  if (!checked) {
    value.delete(__value);
  }
  return Array.from(value);
}
function to_number(value) {
  return value === \\"\\" ? null : +value;
}
function time_ranges_to_array(ranges) {
  const array = [];
  for (let i = 0; i < ranges.length; i += 1) {
    array.push({start: ranges.start(i), end: ranges.end(i)});
  }
  return array;
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function claim_element(nodes, name, attributes, svg) {
  for (let i = 0; i < nodes.length; i += 1) {
    const node = nodes[i];
    if (node.nodeName === name) {
      let j = 0;
      const remove = [];
      while (j < node.attributes.length) {
        const attribute = node.attributes[j++];
        if (!attributes[attribute.name]) {
          remove.push(attribute.name);
        }
      }
      for (let k = 0; k < remove.length; k++) {
        node.removeAttribute(remove[k]);
      }
      return nodes.splice(i, 1)[0];
    }
  }
  return svg ? svg_element(name) : element(name);
}
function claim_text(nodes, data) {
  for (let i = 0; i < nodes.length; i += 1) {
    const node = nodes[i];
    if (node.nodeType === 3) {
      node.data = \\"\\" + data;
      return nodes.splice(i, 1)[0];
    }
  }
  return text(data);
}
function claim_space(nodes) {
  return claim_text(nodes, \\" \\");
}
function set_data(text2, data) {
  data = \\"\\" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? \\"\\" : value;
}
function set_input_type(input, type) {
  try {
    input.type = type;
  } catch (e) {
  }
}
function set_style(node, key, value, important) {
  node.style.setProperty(key, value, important ? \\"important\\" : \\"\\");
}
function select_option(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
}
function select_options(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    option.selected = ~value.indexOf(option.__value);
  }
}
function select_value(select) {
  const selected_option = select.querySelector(\\":checked\\") || select.options[0];
  return selected_option && selected_option.__value;
}
function select_multiple_value(select) {
  return [].map.call(select.querySelectorAll(\\":checked\\"), (option) => option.__value);
}
var crossorigin;
function is_crossorigin() {
  if (crossorigin === void 0) {
    crossorigin = false;
    try {
      if (typeof window !== \\"undefined\\" && window.parent) {
        void window.parent.document;
      }
    } catch (error) {
      crossorigin = true;
    }
  }
  return crossorigin;
}
function add_resize_listener(node, fn) {
  const computed_style = getComputedStyle(node);
  if (computed_style.position === \\"static\\") {
    node.style.position = \\"relative\\";
  }
  const iframe = element(\\"iframe\\");
  iframe.setAttribute(\\"style\\", \\"display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;\\");
  iframe.setAttribute(\\"aria-hidden\\", \\"true\\");
  iframe.tabIndex = -1;
  const crossorigin2 = is_crossorigin();
  let unsubscribe;
  if (crossorigin2) {
    iframe.src = \\"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\\";
    unsubscribe = listen(window, \\"message\\", (event) => {
      if (event.source === iframe.contentWindow)
        fn();
    });
  } else {
    iframe.src = \\"about:blank\\";
    iframe.onload = () => {
      unsubscribe = listen(iframe.contentWindow, \\"resize\\", fn);
    };
  }
  append(node, iframe);
  return () => {
    if (crossorigin2) {
      unsubscribe();
    } else if (unsubscribe && iframe.contentWindow) {
      unsubscribe();
    }
    detach(iframe);
  };
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? \\"add\\" : \\"remove\\"](name);
}
function custom_event(type, detail) {
  const e = document.createEvent(\\"CustomEvent\\");
  e.initCustomEvent(type, false, false, detail);
  return e;
}
function query_selector_all(selector, parent = document.body) {
  return Array.from(parent.querySelectorAll(selector));
}
var HtmlTag = class {
  constructor(anchor = null) {
    this.a = anchor;
    this.e = this.n = null;
  }
  m(html, target, anchor = null) {
    if (!this.e) {
      this.e = element(target.nodeName);
      this.t = target;
      this.h(html);
    }
    this.i(anchor);
  }
  h(html) {
    this.e.innerHTML = html;
    this.n = Array.from(this.e.childNodes);
  }
  i(anchor) {
    for (let i = 0; i < this.n.length; i += 1) {
      insert(this.t, this.n[i], anchor);
    }
  }
  p(html) {
    this.d();
    this.h(html);
    this.i(this.a);
  }
  d() {
    this.n.forEach(detach);
  }
};
function attribute_to_object(attributes) {
  const result = {};
  for (const attribute of attributes) {
    result[attribute.name] = attribute.value;
  }
  return result;
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach((node) => {
    result[node.slot || \\"default\\"] = true;
  });
  return result;
}
var active_docs = new Set();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = \\"{\\";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + \`%{\${fn(t, 1 - t)}}
\`;
  }
  const rule = keyframes + \`100% {\${fn(b, 1 - b)}}
}\`;
  const name = \`__svelte_\${hash(rule)}_\${uid}\`;
  const doc = node.ownerDocument;
  active_docs.add(doc);
  const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element(\\"style\\")).sheet);
  const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
  if (!current_rules[name]) {
    current_rules[name] = true;
    stylesheet.insertRule(\`@keyframes \${name} \${rule}\`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || \\"\\";
  node.style.animation = \`\${animation ? \`\${animation}, \` : \\"\\"}\${name} \${duration}ms linear \${delay}ms 1 both\`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || \\"\\").split(\\", \\");
  const next = previous.filter(name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf(\\"__svelte\\") === -1);
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(\\", \\");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    active_docs.forEach((doc) => {
      const stylesheet = doc.__svelte_stylesheet;
      let i = stylesheet.cssRules.length;
      while (i--)
        stylesheet.deleteRule(i);
      doc.__svelte_rules = {};
    });
    active_docs.clear();
  });
}
function create_animation(node, from, fn, params) {
  if (!from)
    return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    start: start_time = now() + delay,
    end = start_time + duration,
    tick: tick2 = noop,
    css
  } = fn(node, {from, to}, params);
  let running = true;
  let started = false;
  let name;
  function start() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css)
      delete_rule(node, name);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t = 0 + 1 * easing(p / duration);
      tick2(t, 1 - t);
    }
    return true;
  });
  start();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== \\"absolute\\" && style.position !== \\"fixed\\") {
    const {width, height} = style;
    const a = node.getBoundingClientRect();
    node.style.position = \\"absolute\\";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b = node.getBoundingClientRect();
  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === \\"none\\" ? \\"\\" : style.transform;
    node.style.transform = \`\${transform} translate(\${a.left - b.left}px, \${a.top - b.top}px)\`;
  }
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error(\\"Function called outside component initialization\\");
  return current_component;
}
function beforeUpdate(fn) {
  get_current_component().$$.before_update.push(fn);
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail);
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
    }
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function hasContext(key) {
  return get_current_component().$$.context.has(key);
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn) => fn(event));
  }
}
var dirty_components = [];
var intros = {enabled: false};
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var flushing = false;
var seen_callbacks = new Set();
function flush() {
  if (flushing)
    return;
  flushing = true;
  do {
    for (let i = 0; i < dirty_components.length; i += 1) {
      const component = dirty_components[i];
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  flushing = false;
  seen_callbacks.clear();
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(\`\${direction ? \\"intro\\" : \\"outro\\"}\${kind}\`));
}
var outroing = new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
var null_transition = {duration: 0};
function create_in_transition(node, fn, params) {
  let config = fn(node, params);
  let running = false;
  let animation_name;
  let task;
  let uid = 0;
  function cleanup() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function go() {
    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;
    if (css)
      animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
    tick2(0, 1);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    if (task)
      task.abort();
    running = true;
    add_render_callback(() => dispatch(node, true, \\"start\\"));
    task = loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick2(1, 0);
          dispatch(node, true, \\"end\\");
          cleanup();
          return running = false;
        }
        if (now2 >= start_time) {
          const t = easing((now2 - start_time) / duration);
          tick2(t, 1 - t);
        }
      }
      return running;
    });
  }
  let started = false;
  return {
    start() {
      if (started)
        return;
      delete_rule(node);
      if (is_function(config)) {
        config = config();
        wait().then(go);
      } else {
        go();
      }
    },
    invalidate() {
      started = false;
    },
    end() {
      if (running) {
        cleanup();
        running = false;
      }
    }
  };
}
function create_out_transition(node, fn, params) {
  let config = fn(node, params);
  let running = true;
  let animation_name;
  const group = outros;
  group.r += 1;
  function go() {
    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;
    if (css)
      animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    add_render_callback(() => dispatch(node, false, \\"start\\"));
    loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick2(0, 1);
          dispatch(node, false, \\"end\\");
          if (!--group.r) {
            run_all(group.c);
          }
          return false;
        }
        if (now2 >= start_time) {
          const t = easing((now2 - start_time) / duration);
          tick2(1 - t, t);
        }
      }
      return running;
    });
  }
  if (is_function(config)) {
    wait().then(() => {
      config = config();
      go();
    });
  } else {
    go();
  }
  return {
    end(reset) {
      if (reset && config.tick) {
        config.tick(1, 0);
      }
      if (running) {
        if (animation_name)
          delete_rule(node, animation_name);
        running = false;
      }
    }
  };
}
function create_bidirectional_transition(node, fn, params, intro) {
  let config = fn(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }
      if (b)
        tick2(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, \\"start\\"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, \\"start\\");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick2(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, \\"end\\");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick2(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          config = config();
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
function handle_promise(promise2, info) {
  const token = info.token = {};
  function update2(type, index, key, value) {
    if (info.token !== token)
      return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i) => {
          if (i !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i] === block2) {
                info.blocks[i] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks)
      info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise2)) {
    const current_component2 = get_current_component();
    promise2.then((value) => {
      set_current_component(current_component2);
      update2(info.then, 1, info.value, value);
      set_current_component(null);
    }, (error) => {
      set_current_component(current_component2);
      update2(info.catch, 2, info.error, error);
      set_current_component(null);
      if (!info.hasCatch) {
        throw error;
      }
    });
    if (info.current !== info.pending) {
      update2(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update2(info.then, 1, info.value, promise2);
      return true;
    }
    info.resolved = promise2;
  }
}
var globals = typeof window !== \\"undefined\\" ? window : typeof globalThis !== \\"undefined\\" ? globalThis : global;
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function fix_and_destroy_block(block, lookup) {
  block.f();
  destroy_block(block, lookup);
}
function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = new Map();
  const deltas = new Map();
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = new Set();
  const did_move = new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
function validate_each_keys(ctx, list, get_context, get_key) {
  const keys = new Set();
  for (let i = 0; i < list.length; i++) {
    const key = get_key(get_context(ctx, list, i));
    if (keys.has(key)) {
      throw new Error(\\"Cannot have duplicate keys in a keyed each\\");
    }
    keys.add(key);
  }
}
function get_spread_update(levels, updates) {
  const update2 = {};
  const to_null_out = {};
  const accounted_for = {$$scope: 1};
  let i = levels.length;
  while (i--) {
    const o = levels[i];
    const n = updates[i];
    if (n) {
      for (const key in o) {
        if (!(key in n))
          to_null_out[key] = 1;
      }
      for (const key in n) {
        if (!accounted_for[key]) {
          update2[key] = n[key];
          accounted_for[key] = 1;
        }
      }
      levels[i] = n;
    } else {
      for (const key in o) {
        accounted_for[key] = 1;
      }
    }
  }
  for (const key in to_null_out) {
    if (!(key in update2))
      update2[key] = void 0;
  }
  return update2;
}
function get_spread_object(spread_props) {
  return typeof spread_props === \\"object\\" && spread_props !== null ? spread_props : {};
}
var boolean_attributes = new Set([
  \\"allowfullscreen\\",
  \\"allowpaymentrequest\\",
  \\"async\\",
  \\"autofocus\\",
  \\"autoplay\\",
  \\"checked\\",
  \\"controls\\",
  \\"default\\",
  \\"defer\\",
  \\"disabled\\",
  \\"formnovalidate\\",
  \\"hidden\\",
  \\"ismap\\",
  \\"loop\\",
  \\"multiple\\",
  \\"muted\\",
  \\"nomodule\\",
  \\"novalidate\\",
  \\"open\\",
  \\"playsinline\\",
  \\"readonly\\",
  \\"required\\",
  \\"reversed\\",
  \\"selected\\"
]);
var invalid_attribute_name_character = /[\\\\s'\\">/=\\\\u{FDD0}-\\\\u{FDEF}\\\\u{FFFE}\\\\u{FFFF}\\\\u{1FFFE}\\\\u{1FFFF}\\\\u{2FFFE}\\\\u{2FFFF}\\\\u{3FFFE}\\\\u{3FFFF}\\\\u{4FFFE}\\\\u{4FFFF}\\\\u{5FFFE}\\\\u{5FFFF}\\\\u{6FFFE}\\\\u{6FFFF}\\\\u{7FFFE}\\\\u{7FFFF}\\\\u{8FFFE}\\\\u{8FFFF}\\\\u{9FFFE}\\\\u{9FFFF}\\\\u{AFFFE}\\\\u{AFFFF}\\\\u{BFFFE}\\\\u{BFFFF}\\\\u{CFFFE}\\\\u{CFFFF}\\\\u{DFFFE}\\\\u{DFFFF}\\\\u{EFFFE}\\\\u{EFFFF}\\\\u{FFFFE}\\\\u{FFFFF}\\\\u{10FFFE}\\\\u{10FFFF}]/u;
function spread(args, classes_to_add) {
  const attributes = Object.assign({}, ...args);
  if (classes_to_add) {
    if (attributes.class == null) {
      attributes.class = classes_to_add;
    } else {
      attributes.class += \\" \\" + classes_to_add;
    }
  }
  let str = \\"\\";
  Object.keys(attributes).forEach((name) => {
    if (invalid_attribute_name_character.test(name))
      return;
    const value = attributes[name];
    if (value === true)
      str += \\" \\" + name;
    else if (boolean_attributes.has(name.toLowerCase())) {
      if (value)
        str += \\" \\" + name;
    } else if (value != null) {
      str += \` \${name}=\\"\${String(value).replace(/\\"/g, \\"&#34;\\").replace(/'/g, \\"&#39;\\")}\\"\`;
    }
  });
  return str;
}
var escaped = {
  '\\"': \\"&quot;\\",
  \\"'\\": \\"&#39;\\",
  \\"&\\": \\"&amp;\\",
  \\"<\\": \\"&lt;\\",
  \\">\\": \\"&gt;\\"
};
function escape(html) {
  return String(html).replace(/[\\"'&<>]/g, (match) => escaped[match]);
}
function each(items, fn) {
  let str = \\"\\";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
var missing_component = {
  $$render: () => \\"\\"
};
function validate_component(component, name) {
  if (!component || !component.$$render) {
    if (name === \\"svelte:component\\")
      name += \\" this={...}\\";
    throw new Error(\`<\${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules\`);
  }
  return component;
}
function debug(file, line, column, values) {
  console.log(\`{@debug} \${file ? file + \\" \\" : \\"\\"}(\${line}:\${column})\`);
  console.log(values);
  return \\"\\";
}
var on_destroy;
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(parent_component ? parent_component.$$.context : []),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({$$});
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, options = {}) => {
      on_destroy = [];
      const result = {title: \\"\\", head: \\"\\", css: new Set()};
      const html = $$render(result, props, {}, options);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css) => css.code).join(\\"\\"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name, value, boolean) {
  if (value == null || boolean && !value)
    return \\"\\";
  return \` \${name}\${value === true ? \\"\\" : \`=\${typeof value === \\"string\\" ? JSON.stringify(escape(value)) : \`\\"\${value}\\"\`}\`}\`;
}
function add_classes(classes) {
  return classes ? \` class=\\"\${classes}\\"\` : \\"\\";
}
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function claim_component(block, parent_nodes) {
  block && block.l(parent_nodes);
}
function mount_component(component, target, anchor) {
  const {fragment, on_mount, on_destroy: on_destroy2, after_update} = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = on_mount.map(run).filter(is_function);
    if (on_destroy2) {
      on_destroy2.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance, create_fragment, not_equal2, props, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const prop_values = options.props || {};
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal: not_equal2,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    before_update: [],
    after_update: [],
    context: new Map(parent_component ? parent_component.$$.context : []),
    callbacks: blank_object(),
    dirty,
    skip_bound: false
  };
  let ready = false;
  $$.ctx = instance ? instance(component, prop_values, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal2($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === \\"function\\") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({mode: \\"open\\"});
    }
    connectedCallback() {
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};
function dispatch_dev(type, detail) {
  document.dispatchEvent(custom_event(type, Object.assign({version: \\"3.31.2\\"}, detail)));
}
function append_dev(target, node) {
  dispatch_dev(\\"SvelteDOMInsert\\", {target, node});
  append(target, node);
}
function insert_dev(target, node, anchor) {
  dispatch_dev(\\"SvelteDOMInsert\\", {target, node, anchor});
  insert(target, node, anchor);
}
function detach_dev(node) {
  dispatch_dev(\\"SvelteDOMRemove\\", {node});
  detach(node);
}
function detach_between_dev(before, after) {
  while (before.nextSibling && before.nextSibling !== after) {
    detach_dev(before.nextSibling);
  }
}
function detach_before_dev(after) {
  while (after.previousSibling) {
    detach_dev(after.previousSibling);
  }
}
function detach_after_dev(before) {
  while (before.nextSibling) {
    detach_dev(before.nextSibling);
  }
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
  const modifiers = options === true ? [\\"capture\\"] : options ? Array.from(Object.keys(options)) : [];
  if (has_prevent_default)
    modifiers.push(\\"preventDefault\\");
  if (has_stop_propagation)
    modifiers.push(\\"stopPropagation\\");
  dispatch_dev(\\"SvelteDOMAddEventListener\\", {node, event, handler, modifiers});
  const dispose = listen(node, event, handler, options);
  return () => {
    dispatch_dev(\\"SvelteDOMRemoveEventListener\\", {node, event, handler, modifiers});
    dispose();
  };
}
function attr_dev(node, attribute, value) {
  attr(node, attribute, value);
  if (value == null)
    dispatch_dev(\\"SvelteDOMRemoveAttribute\\", {node, attribute});
  else
    dispatch_dev(\\"SvelteDOMSetAttribute\\", {node, attribute, value});
}
function prop_dev(node, property, value) {
  node[property] = value;
  dispatch_dev(\\"SvelteDOMSetProperty\\", {node, property, value});
}
function dataset_dev(node, property, value) {
  node.dataset[property] = value;
  dispatch_dev(\\"SvelteDOMSetDataset\\", {node, property, value});
}
function set_data_dev(text2, data) {
  data = \\"\\" + data;
  if (text2.wholeText === data)
    return;
  dispatch_dev(\\"SvelteDOMSetData\\", {node: text2, data});
  text2.data = data;
}
function validate_each_argument(arg) {
  if (typeof arg !== \\"string\\" && !(arg && typeof arg === \\"object\\" && \\"length\\" in arg)) {
    let msg = \\"{#each} only iterates over array-like objects.\\";
    if (typeof Symbol === \\"function\\" && arg && Symbol.iterator in arg) {
      msg += \\" You can use a spread to convert this iterable into an array.\\";
    }
    throw new Error(msg);
  }
}
function validate_slots(name, slot, keys) {
  for (const slot_key of Object.keys(slot)) {
    if (!~keys.indexOf(slot_key)) {
      console.warn(\`<\${name}> received an unexpected slot \\"\${slot_key}\\".\`);
    }
  }
}
var SvelteComponentDev = class extends SvelteComponent {
  constructor(options) {
    if (!options || !options.target && !options.$$inline) {
      throw new Error(\\"'target' is a required option\\");
    }
    super();
  }
  $destroy() {
    super.$destroy();
    this.$destroy = () => {
      console.warn(\\"Component was already destroyed\\");
    };
  }
  $capture_state() {
  }
  $inject_state() {
  }
};
var SvelteComponentTyped = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
  }
};
function loop_guard(timeout) {
  const start = Date.now();
  return () => {
    if (Date.now() - start > timeout) {
      throw new Error(\\"Infinite loop detected\\");
    }
  };
}
export {
  HtmlTag,
  SvelteComponent,
  SvelteComponentDev,
  SvelteComponentTyped,
  SvelteElement,
  action_destroyer,
  add_attribute,
  add_classes,
  add_flush_callback,
  add_location,
  add_render_callback,
  add_resize_listener,
  add_transform,
  afterUpdate,
  append,
  append_dev,
  assign,
  attr,
  attr_dev,
  attribute_to_object,
  beforeUpdate,
  bind,
  binding_callbacks,
  blank_object,
  bubble,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  claim_text,
  clear_loops,
  component_subscribe,
  compute_rest_props,
  compute_slots,
  createEventDispatcher,
  create_animation,
  create_bidirectional_transition,
  create_component,
  create_in_transition,
  create_out_transition,
  create_slot,
  create_ssr_component,
  current_component,
  custom_event,
  dataset_dev,
  debug,
  destroy_block,
  destroy_component,
  destroy_each,
  detach,
  detach_after_dev,
  detach_before_dev,
  detach_between_dev,
  detach_dev,
  dirty_components,
  dispatch_dev,
  each,
  element,
  element_is,
  empty,
  escape,
  escaped,
  exclude_internal_props,
  fix_and_destroy_block,
  fix_and_outro_and_destroy_block,
  fix_position,
  flush,
  getContext,
  get_binding_group_value,
  get_current_component,
  get_custom_elements_slots,
  get_slot_changes,
  get_slot_context,
  get_spread_object,
  get_spread_update,
  get_store_value,
  globals,
  group_outros,
  handle_promise,
  hasContext,
  has_prop,
  identity,
  init,
  insert,
  insert_dev,
  intros,
  invalid_attribute_name_character,
  is_client,
  is_crossorigin,
  is_empty,
  is_function,
  is_promise,
  listen,
  listen_dev,
  loop,
  loop_guard,
  missing_component,
  mount_component,
  noop,
  not_equal,
  now,
  null_to_empty,
  object_without_properties,
  onDestroy,
  onMount,
  once,
  outro_and_destroy_block,
  prevent_default,
  prop_dev,
  query_selector_all,
  raf,
  run,
  run_all,
  safe_not_equal,
  schedule_update,
  select_multiple_value,
  select_option,
  select_options,
  select_value,
  self,
  setContext,
  set_attributes,
  set_current_component,
  set_custom_element_data,
  set_data,
  set_data_dev,
  set_input_type,
  set_input_value,
  set_now,
  set_raf,
  set_store_value,
  set_style,
  set_svg_attributes,
  space,
  spread,
  stop_propagation,
  subscribe,
  svg_element,
  text,
  tick,
  time_ranges_to_array,
  to_number,
  toggle_class,
  transition_in,
  transition_out,
  update_keyed_each,
  update_slot,
  update_slot_spread,
  validate_component,
  validate_each_argument,
  validate_each_keys,
  validate_slots,
  validate_store,
  xlink_attr
};
//# sourceMappingURL=internal.js.map"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: _snowpack/pkg/svelte/internal.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/svelte/internal.js.map\\";"`;

exports[`create-snowpack-app app-template-svelte-typescript > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/svelte.js",
  "_snowpack/pkg/svelte.js.map",
  "_snowpack/pkg/svelte.js.map.proxy.js",
  "_snowpack/pkg/svelte/internal.js",
  "_snowpack/pkg/svelte/internal.js.map",
  "_snowpack/pkg/svelte/internal.js.map.proxy.js",
  "dist/App.svelte.css",
  "dist/App.svelte.css.proxy.js",
  "dist/App.svelte.js",
  "dist/index.js",
  "favicon.ico",
  "index.html",
  "logo.svg",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: dist/App.svelte.css 1`] = `"body{margin:0;font-family:Arial, Helvetica, sans-serif}.App.svelte-1sqyd3v.svelte-1sqyd3v{text-align:center}.App.svelte-1sqyd3v code.svelte-1sqyd3v{background:#0002;padding:4px 8px;border-radius:4px}.App.svelte-1sqyd3v p.svelte-1sqyd3v{margin:0.4rem}.App-header.svelte-1sqyd3v.svelte-1sqyd3v{background-color:#f9f6f6;color:#333;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:center;font-size:calc(10px + 2vmin)}.App-link.svelte-1sqyd3v.svelte-1sqyd3v{color:#ff3e00}.App-logo.svelte-1sqyd3v.svelte-1sqyd3v{height:36vmin;pointer-events:none;margin-bottom:3rem;animation:svelte-1sqyd3v-App-logo-spin infinite 1.6s ease-in-out alternate}@keyframes svelte-1sqyd3v-App-logo-spin{from{transform:scale(1)}to{transform:scale(1.06)}}"`;

exports[`create-snowpack-app app-template-svelte-typescript > build: dist/App.svelte.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\"body{margin:0;font-family:Arial, Helvetica, sans-serif}.App.svelte-1sqyd3v.svelte-1sqyd3v{text-align:center}.App.svelte-1sqyd3v code.svelte-1sqyd3v{background:#0002;padding:4px 8px;border-radius:4px}.App.svelte-1sqyd3v p.svelte-1sqyd3v{margin:0.4rem}.App-header.svelte-1sqyd3v.svelte-1sqyd3v{background-color:#f9f6f6;color:#333;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:center;font-size:calc(10px + 2vmin)}.App-link.svelte-1sqyd3v.svelte-1sqyd3v{color:#ff3e00}.App-logo.svelte-1sqyd3v.svelte-1sqyd3v{height:36vmin;pointer-events:none;margin-bottom:3rem;animation:svelte-1sqyd3v-App-logo-spin infinite 1.6s ease-in-out alternate}@keyframes svelte-1sqyd3v-App-logo-spin{from{transform:scale(1)}to{transform:scale(1.06)}}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: dist/App.svelte.js 1`] = `
"import './App.svelte.css.proxy.js';
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from \\"../_snowpack/pkg/svelte/internal.js\\";
import { onMount } from \\"../_snowpack/pkg/svelte.js\\";
function create_fragment(ctx) {
	let div;
	let header;
	let img;
	let img_src_value;
	let t0;
	let p0;
	let t4;
	let p1;
	let t5;
	let code1;
	let t6;
	let t7;
	let t8;
	let p2;
	return {
		c() {
			div = element(\\"div\\");
			header = element(\\"header\\");
			img = element(\\"img\\");
			t0 = space();
			p0 = element(\\"p\\");
			p0.innerHTML = \`Edit <code class=\\"svelte-1sqyd3v\\">src/App.svelte</code> and save to reload.\`;
			t4 = space();
			p1 = element(\\"p\\");
			t5 = text(\\"Page has been open for \\");
			code1 = element(\\"code\\");
			t6 = text(/*count*/ ctx[0]);
			t7 = text(\\" seconds.\\");
			t8 = space();
			p2 = element(\\"p\\");
			p2.innerHTML = \`<a class=\\"App-link svelte-1sqyd3v\\" href=\\"https://svelte.dev\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Learn Svelte</a>\`;
			if (img.src !== (img_src_value = \\"/logo.svg\\")) attr(img, \\"src\\", img_src_value);
			attr(img, \\"class\\", \\"App-logo svelte-1sqyd3v\\");
			attr(img, \\"alt\\", \\"logo\\");
			attr(p0, \\"class\\", \\"svelte-1sqyd3v\\");
			attr(code1, \\"class\\", \\"svelte-1sqyd3v\\");
			attr(p1, \\"class\\", \\"svelte-1sqyd3v\\");
			attr(p2, \\"class\\", \\"svelte-1sqyd3v\\");
			attr(header, \\"class\\", \\"App-header svelte-1sqyd3v\\");
			attr(div, \\"class\\", \\"App svelte-1sqyd3v\\");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, header);
			append(header, img);
			append(header, t0);
			append(header, p0);
			append(header, t4);
			append(header, p1);
			append(p1, t5);
			append(p1, code1);
			append(code1, t6);
			append(p1, t7);
			append(header, t8);
			append(header, p2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 1) set_data(t6, /*count*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}
function instance($$self, $$props, $$invalidate) {
	let count = 0;
	onMount(() => {
		const interval = setInterval(() => $$invalidate(0, count++, count), 1000);
		return () => {
			clearInterval(interval);
		};
	});
	return [count];
}
class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}
export default App;"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: dist/index.js 1`] = `
"import * as __SNOWPACK_ENV__ from '../_snowpack/env.js';
import.meta.env = __SNOWPACK_ENV__;
import App from \\"./App.svelte.js\\";
var app = new App({
  target: document.body
});
export default app;
if (undefined /* [snowpack] import.meta.hot */ ) {
  undefined /* [snowpack] import.meta.hot */ .accept();
  undefined /* [snowpack] import.meta.hot */ .dispose(() => {
    app.$destroy();
  });
}"
`;

exports[`create-snowpack-app app-template-svelte-typescript > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-vue > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-vue > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\": {
      \\"bytes\\": 19004,
      \\"imports\\": []
    },
    \\"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\": {
      \\"bytes\\": 28918,
      \\"imports\\": [
        {
          \\"path\\": \\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\": {
      \\"bytes\\": 264904,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\": {
      \\"bytes\\": 44823,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\": {
      \\"bytes\\": 903,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"PKG/vue.js\\": {
      \\"bytes\\": 177,
      \\"imports\\": [
        {
          \\"path\\": \\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/vue.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 493063
    },
    \\"build/_snowpack/pkg/vue.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"BaseTransition\\",
        \\"Comment\\",
        \\"Fragment\\",
        \\"KeepAlive\\",
        \\"Static\\",
        \\"Suspense\\",
        \\"Teleport\\",
        \\"Text\\",
        \\"Transition\\",
        \\"TransitionGroup\\",
        \\"callWithAsyncErrorHandling\\",
        \\"callWithErrorHandling\\",
        \\"camelize\\",
        \\"capitalize\\",
        \\"cloneVNode\\",
        \\"compile\\",
        \\"computed\\",
        \\"createApp\\",
        \\"createBlock\\",
        \\"createCommentVNode\\",
        \\"createHydrationRenderer\\",
        \\"createRenderer\\",
        \\"createSSRApp\\",
        \\"createSlots\\",
        \\"createStaticVNode\\",
        \\"createTextVNode\\",
        \\"createVNode\\",
        \\"customRef\\",
        \\"defineAsyncComponent\\",
        \\"defineComponent\\",
        \\"devtools\\",
        \\"getCurrentInstance\\",
        \\"getTransitionRawChildren\\",
        \\"h\\",
        \\"handleError\\",
        \\"hydrate\\",
        \\"inject\\",
        \\"isProxy\\",
        \\"isReactive\\",
        \\"isReadonly\\",
        \\"isRef\\",
        \\"isVNode\\",
        \\"markRaw\\",
        \\"mergeProps\\",
        \\"nextTick\\",
        \\"onActivated\\",
        \\"onBeforeMount\\",
        \\"onBeforeUnmount\\",
        \\"onBeforeUpdate\\",
        \\"onDeactivated\\",
        \\"onErrorCaptured\\",
        \\"onMounted\\",
        \\"onRenderTracked\\",
        \\"onRenderTriggered\\",
        \\"onUnmounted\\",
        \\"onUpdated\\",
        \\"openBlock\\",
        \\"popScopeId\\",
        \\"provide\\",
        \\"proxyRefs\\",
        \\"pushScopeId\\",
        \\"queuePostFlushCb\\",
        \\"reactive\\",
        \\"readonly\\",
        \\"ref\\",
        \\"registerRuntimeCompiler\\",
        \\"render\\",
        \\"renderList\\",
        \\"renderSlot\\",
        \\"resolveComponent\\",
        \\"resolveDirective\\",
        \\"resolveDynamicComponent\\",
        \\"resolveTransitionHooks\\",
        \\"setBlockTracking\\",
        \\"setDevtoolsHook\\",
        \\"setTransitionHooks\\",
        \\"shallowReactive\\",
        \\"shallowReadonly\\",
        \\"shallowRef\\",
        \\"ssrContextKey\\",
        \\"ssrUtils\\",
        \\"toDisplayString\\",
        \\"toHandlers\\",
        \\"toRaw\\",
        \\"toRef\\",
        \\"toRefs\\",
        \\"transformVNodeArgs\\",
        \\"triggerRef\\",
        \\"unref\\",
        \\"useCssModule\\",
        \\"useCssVars\\",
        \\"useSSRContext\\",
        \\"useTransitionState\\",
        \\"vModelCheckbox\\",
        \\"vModelDynamic\\",
        \\"vModelRadio\\",
        \\"vModelSelect\\",
        \\"vModelText\\",
        \\"vShow\\",
        \\"version\\",
        \\"warn\\",
        \\"watch\\",
        \\"watchEffect\\",
        \\"withCtx\\",
        \\"withDirectives\\",
        \\"withKeys\\",
        \\"withModifiers\\",
        \\"withScopeId\\"
      ],
      \\"inputs\\": {
        \\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\": {
          \\"bytesInOutput\\": 7148
        },
        \\"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\": {
          \\"bytesInOutput\\": 20847
        },
        \\"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\": {
          \\"bytesInOutput\\": 154098
        },
        \\"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\": {
          \\"bytesInOutput\\": 30831
        },
        \\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\": {
          \\"bytesInOutput\\": 189
        },
        \\"PKG/vue.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 215171
    }
  }
}"
`;

exports[`create-snowpack-app app-template-vue > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\":{\\"bytes\\":19004,\\"imports\\":[]},\\"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\":{\\"bytes\\":28918,\\"imports\\":[{\\"path\\":\\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\":{\\"bytes\\":264904,\\"imports\\":[{\\"path\\":\\"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]},\\"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\":{\\"bytes\\":44823,\\"imports\\":[{\\"path\\":\\"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]},\\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\":{\\"bytes\\":903,\\"imports\\":[{\\"path\\":\\"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]},\\"PKG/vue.js\\":{\\"bytes\\":177,\\"imports\\":[{\\"path\\":\\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/vue.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":493063},\\"build/_snowpack/pkg/vue.js\\":{\\"imports\\":[],\\"exports\\":[\\"BaseTransition\\",\\"Comment\\",\\"Fragment\\",\\"KeepAlive\\",\\"Static\\",\\"Suspense\\",\\"Teleport\\",\\"Text\\",\\"Transition\\",\\"TransitionGroup\\",\\"callWithAsyncErrorHandling\\",\\"callWithErrorHandling\\",\\"camelize\\",\\"capitalize\\",\\"cloneVNode\\",\\"compile\\",\\"computed\\",\\"createApp\\",\\"createBlock\\",\\"createCommentVNode\\",\\"createHydrationRenderer\\",\\"createRenderer\\",\\"createSSRApp\\",\\"createSlots\\",\\"createStaticVNode\\",\\"createTextVNode\\",\\"createVNode\\",\\"customRef\\",\\"defineAsyncComponent\\",\\"defineComponent\\",\\"devtools\\",\\"getCurrentInstance\\",\\"getTransitionRawChildren\\",\\"h\\",\\"handleError\\",\\"hydrate\\",\\"inject\\",\\"isProxy\\",\\"isReactive\\",\\"isReadonly\\",\\"isRef\\",\\"isVNode\\",\\"markRaw\\",\\"mergeProps\\",\\"nextTick\\",\\"onActivated\\",\\"onBeforeMount\\",\\"onBeforeUnmount\\",\\"onBeforeUpdate\\",\\"onDeactivated\\",\\"onErrorCaptured\\",\\"onMounted\\",\\"onRenderTracked\\",\\"onRenderTriggered\\",\\"onUnmounted\\",\\"onUpdated\\",\\"openBlock\\",\\"popScopeId\\",\\"provide\\",\\"proxyRefs\\",\\"pushScopeId\\",\\"queuePostFlushCb\\",\\"reactive\\",\\"readonly\\",\\"ref\\",\\"registerRuntimeCompiler\\",\\"render\\",\\"renderList\\",\\"renderSlot\\",\\"resolveComponent\\",\\"resolveDirective\\",\\"resolveDynamicComponent\\",\\"resolveTransitionHooks\\",\\"setBlockTracking\\",\\"setDevtoolsHook\\",\\"setTransitionHooks\\",\\"shallowReactive\\",\\"shallowReadonly\\",\\"shallowRef\\",\\"ssrContextKey\\",\\"ssrUtils\\",\\"toDisplayString\\",\\"toHandlers\\",\\"toRaw\\",\\"toRef\\",\\"toRefs\\",\\"transformVNodeArgs\\",\\"triggerRef\\",\\"unref\\",\\"useCssModule\\",\\"useCssVars\\",\\"useSSRContext\\",\\"useTransitionState\\",\\"vModelCheckbox\\",\\"vModelDynamic\\",\\"vModelRadio\\",\\"vModelSelect\\",\\"vModelText\\",\\"vShow\\",\\"version\\",\\"warn\\",\\"watch\\",\\"watchEffect\\",\\"withCtx\\",\\"withDirectives\\",\\"withKeys\\",\\"withModifiers\\",\\"withScopeId\\"],\\"inputs\\":{\\"node_modules/@vue/shared/dist/shared.esm-bundler.js\\":{\\"bytesInOutput\\":7148},\\"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\":{\\"bytesInOutput\\":20847},\\"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\":{\\"bytesInOutput\\":154098},\\"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\":{\\"bytesInOutput\\":30831},\\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\":{\\"bytesInOutput\\":189},\\"PKG/vue.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":215171}}};
export default json;"
`;

exports[`create-snowpack-app app-template-vue > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"vue\\": \\"./vue.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-vue > build: _snowpack/pkg/vue.js 1`] = `
"// node_modules/@vue/shared/dist/shared.esm-bundler.js
function makeMap(str, expectsLowerCase) {
  const map2 = Object.create(null);
  const list = str.split(\\",\\");
  for (let i = 0; i < list.length; i++) {
    map2[list[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
var PatchFlagNames = {
  [1]: \`TEXT\`,
  [2]: \`CLASS\`,
  [4]: \`STYLE\`,
  [8]: \`PROPS\`,
  [16]: \`FULL_PROPS\`,
  [32]: \`HYDRATE_EVENTS\`,
  [64]: \`STABLE_FRAGMENT\`,
  [128]: \`KEYED_FRAGMENT\`,
  [256]: \`UNKEYED_FRAGMENT\`,
  [1024]: \`DYNAMIC_SLOTS\`,
  [512]: \`NEED_PATCH\`,
  [-1]: \`HOISTED\`,
  [-2]: \`BAIL\`
};
var GLOBALS_WHITE_LISTED = \\"Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl\\";
var isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
var specialBooleanAttrs = \`itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly\`;
var isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
var isBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs + \`,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected\`);
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isObject(value)) {
    return value;
  }
}
var listDelimiterRE = /;(?![^(]*\\\\))/g;
var propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = \\"\\";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      res += normalizeClass(value[i]) + \\" \\";
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + \\" \\";
      }
    }
  }
  return res.trim();
}
function looseCompareArrays(a, b) {
  if (a.length !== b.length)
    return false;
  let equal = true;
  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }
  return equal;
}
function looseEqual(a, b) {
  if (a === b)
    return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isArray(a);
  bValidType = isArray(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject(a);
  bValidType = isObject(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
function looseHas(set2, val) {
  for (let item of set2) {
    if (looseEqual(item, val))
      return true;
  }
  return false;
}
var toDisplayString = (val) => {
  return val == null ? \\"\\" : isObject(val) ? JSON.stringify(val, replacer, 2) : String(val);
};
var replacer = (_key, val) => {
  if (isMap(val)) {
    return {
      [\`Map(\${val.size})\`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[\`\${key} =>\`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [\`Set(\${val.size})\`]: [...val.values()]
    };
  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};
var EMPTY_OBJ = false ? Object.freeze({}) : {};
var EMPTY_ARR = [];
var NOOP = () => {
};
var NO = () => false;
var onRE = /^on[^a-z]/;
var isOn = (key) => onRE.test(key);
var isModelListener = (key) => key.startsWith(\\"onUpdate:\\");
var extend = Object.assign;
var remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = (val, key) => hasOwnProperty.call(val, key);
var isArray = Array.isArray;
var isMap = (val) => toTypeString(val) === \\"[object Map]\\";
var isSet = (val) => toTypeString(val) === \\"[object Set]\\";
var isDate = (val) => val instanceof Date;
var isFunction = (val) => typeof val === \\"function\\";
var isString = (val) => typeof val === \\"string\\";
var isSymbol = (val) => typeof val === \\"symbol\\";
var isObject = (val) => val !== null && typeof val === \\"object\\";
var isPromise = (val) => {
  return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
var objectToString = Object.prototype.toString;
var toTypeString = (value) => objectToString.call(value);
var toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
var isPlainObject = (val) => toTypeString(val) === \\"[object Object]\\";
var isIntegerKey = (key) => isString(key) && key !== \\"NaN\\" && key[0] !== \\"-\\" && \\"\\" + parseInt(key, 10) === key;
var isReservedProp = /* @__PURE__ */ makeMap(\\"key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted\\");
var cacheStringFunction = (fn) => {
  const cache = Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
var camelizeRE = /-(\\\\w)/g;
var camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \\"\\");
});
var hyphenateRE = /\\\\B([A-Z])/g;
var hyphenate = cacheStringFunction((str) => {
  return str.replace(hyphenateRE, \\"-$1\\").toLowerCase();
});
var capitalize = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
var hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);
var invokeArrayFns = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};
var def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
var toNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
var _globalThis;
var getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== \\"undefined\\" ? globalThis : typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : typeof global !== \\"undefined\\" ? global : {});
};
// ../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var targetMap = new WeakMap();
var effectStack = [];
var activeEffect;
var ITERATE_KEY = Symbol(false ? \\"iterate\\" : \\"\\");
var MAP_KEY_ITERATE_KEY = Symbol(false ? \\"Map key iterate\\" : \\"\\");
function isEffect(fn) {
  return fn && fn._isEffect === true;
}
function effect(fn, options = EMPTY_OBJ) {
  if (isEffect(fn)) {
    fn = fn.raw;
  }
  const effect2 = createReactiveEffect(fn, options);
  if (!options.lazy) {
    effect2();
  }
  return effect2;
}
function stop(effect2) {
  if (effect2.active) {
    cleanup(effect2);
    if (effect2.options.onStop) {
      effect2.options.onStop();
    }
    effect2.active = false;
  }
}
var uid = 0;
function createReactiveEffect(fn, options) {
  const effect2 = function reactiveEffect() {
    if (!effect2.active) {
      return options.scheduler ? void 0 : fn();
    }
    if (!effectStack.includes(effect2)) {
      cleanup(effect2);
      try {
        enableTracking();
        effectStack.push(effect2);
        activeEffect = effect2;
        return fn();
      } finally {
        effectStack.pop();
        resetTracking();
        activeEffect = effectStack[effectStack.length - 1];
      }
    }
  };
  effect2.id = uid++;
  effect2._isEffect = true;
  effect2.active = true;
  effect2.raw = fn;
  effect2.deps = [];
  effect2.options = options;
  return effect2;
}
function cleanup(effect2) {
  const {deps} = effect2;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect2);
    }
    deps.length = 0;
  }
}
var shouldTrack = true;
var trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function enableTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = true;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (!shouldTrack || activeEffect === void 0) {
    return;
  }
  let depsMap = targetMap.get(target);
  if (!depsMap) {
    targetMap.set(target, depsMap = new Map());
  }
  let dep = depsMap.get(key);
  if (!dep) {
    depsMap.set(key, dep = new Set());
  }
  if (!dep.has(activeEffect)) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
    if (false) {
      activeEffect.options.onTrack({
        effect: activeEffect,
        target,
        type,
        key
      });
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  const effects = new Set();
  const add2 = (effectsToAdd) => {
    if (effectsToAdd) {
      effectsToAdd.forEach((effect2) => {
        if (effect2 !== activeEffect || effect2.options.allowRecurse) {
          effects.add(effect2);
        }
      });
    }
  };
  if (type === \\"clear\\") {
    depsMap.forEach(add2);
  } else if (key === \\"length\\" && isArray(target)) {
    depsMap.forEach((dep, key2) => {
      if (key2 === \\"length\\" || key2 >= newValue) {
        add2(dep);
      }
    });
  } else {
    if (key !== void 0) {
      add2(depsMap.get(key));
    }
    switch (type) {
      case \\"add\\":
        if (!isArray(target)) {
          add2(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            add2(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          add2(depsMap.get(\\"length\\"));
        }
        break;
      case \\"delete\\":
        if (!isArray(target)) {
          add2(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            add2(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case \\"set\\":
        if (isMap(target)) {
          add2(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  const run = (effect2) => {
    if (false) {
      effect2.options.onTrigger({
        effect: effect2,
        target,
        key,
        type,
        newValue,
        oldValue,
        oldTarget
      });
    }
    if (effect2.options.scheduler) {
      effect2.options.scheduler(effect2);
    } else {
      effect2();
    }
  };
  effects.forEach(run);
}
var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
var get = /* @__PURE__ */ createGetter();
var shallowGet = /* @__PURE__ */ createGetter(false, true);
var readonlyGet = /* @__PURE__ */ createGetter(true);
var shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
var arrayInstrumentations = {};
[\\"includes\\", \\"indexOf\\", \\"lastIndexOf\\"].forEach((key) => {
  const method = Array.prototype[key];
  arrayInstrumentations[key] = function(...args) {
    const arr = toRaw(this);
    for (let i = 0, l = this.length; i < l; i++) {
      track(arr, \\"get\\", i + \\"\\");
    }
    const res = method.apply(arr, args);
    if (res === -1 || res === false) {
      return method.apply(arr, args.map(toRaw));
    } else {
      return res;
    }
  };
});
[\\"push\\", \\"pop\\", \\"shift\\", \\"unshift\\", \\"splice\\"].forEach((key) => {
  const method = Array.prototype[key];
  arrayInstrumentations[key] = function(...args) {
    pauseTracking();
    const res = method.apply(this, args);
    enableTracking();
    return res;
  };
});
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === \\"__v_isReactive\\") {
      return !isReadonly2;
    } else if (key === \\"__v_isReadonly\\") {
      return isReadonly2;
    } else if (key === \\"__v_raw\\" && receiver === (isReadonly2 ? readonlyMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray(target);
    if (targetIsArray && hasOwn(arrayInstrumentations, key)) {
      return Reflect.get(arrayInstrumentations, key, receiver);
    }
    const res = Reflect.get(target, key, receiver);
    const keyIsSymbol = isSymbol(key);
    if (keyIsSymbol ? builtInSymbols.has(key) : key === \`__proto__\` || key === \`__v_isRef\`) {
      return res;
    }
    if (!isReadonly2) {
      track(target, \\"get\\", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
      return shouldUnwrap ? res.value : res;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
var set = /* @__PURE__ */ createSetter();
var shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    const oldValue = target[key];
    if (!shallow) {
      value = toRaw(value);
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, \\"add\\", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, \\"set\\", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, \\"delete\\", key, void 0, oldValue);
  }
  return result;
}
function has(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, \\"has\\", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, \\"iterate\\", ITERATE_KEY);
  return Reflect.ownKeys(target);
}
var mutableHandlers = {
  get,
  set,
  deleteProperty,
  has,
  ownKeys
};
var readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    if (false) {
      console.warn(\`Set operation on key \\"\${String(key)}\\" failed: target is readonly.\`, target);
    }
    return true;
  },
  deleteProperty(target, key) {
    if (false) {
      console.warn(\`Delete operation on key \\"\${String(key)}\\" failed: target is readonly.\`, target);
    }
    return true;
  }
};
var shallowReactiveHandlers = extend({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
var shallowReadonlyHandlers = extend({}, readonlyHandlers, {
  get: shallowReadonlyGet
});
var toReactive = (value) => isObject(value) ? reactive(value) : value;
var toReadonly = (value) => isObject(value) ? readonly(value) : value;
var toShallow = (value) => value;
var getProto = (v) => Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly2 = false, isShallow = false) {
  target = target[\\"__v_raw\\"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, \\"get\\", key);
  }
  !isReadonly2 && track(rawTarget, \\"get\\", rawKey);
  const {has: has2} = getProto(rawTarget);
  const wrap = isReadonly2 ? toReadonly : isShallow ? toShallow : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  }
}
function has$1(key, isReadonly2 = false) {
  const target = this[\\"__v_raw\\"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, \\"has\\", key);
  }
  !isReadonly2 && track(rawTarget, \\"has\\", rawKey);
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target[\\"__v_raw\\"];
  !isReadonly2 && track(toRaw(target), \\"iterate\\", ITERATE_KEY);
  return Reflect.get(target, \\"size\\", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  const result = target.add(value);
  if (!hadKey) {
    trigger(target, \\"add\\", value, value);
  }
  return result;
}
function set$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const {has: has2, get: get2} = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (false) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  const result = target.set(key, value);
  if (!hadKey) {
    trigger(target, \\"add\\", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, \\"set\\", key, value, oldValue);
  }
  return result;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const {has: has2, get: get2} = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (false) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, \\"delete\\", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = false ? isMap(target) ? new Map(target) : new Set(target) : void 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, \\"clear\\", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed[\\"__v_raw\\"];
    const rawTarget = toRaw(target);
    const wrap = isReadonly2 ? toReadonly : isShallow ? toShallow : toReactive;
    !isReadonly2 && track(rawTarget, \\"iterate\\", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow) {
  return function(...args) {
    const target = this[\\"__v_raw\\"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === \\"entries\\" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === \\"keys\\" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isReadonly2 ? toReadonly : isShallow ? toShallow : toReactive;
    !isReadonly2 && track(rawTarget, \\"iterate\\", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const {value, done} = innerIterator.next();
        return done ? {value, done} : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    if (false) {
      const key = args[0] ? \`on key \\"\${args[0]}\\" \` : \`\`;
      console.warn(\`\${capitalize(type)} operation \${key}failed: target is readonly.\`, toRaw(this));
    }
    return type === \\"delete\\" ? false : this;
  };
}
var mutableInstrumentations = {
  get(key) {
    return get$1(this, key);
  },
  get size() {
    return size(this);
  },
  has: has$1,
  add,
  set: set$1,
  delete: deleteEntry,
  clear,
  forEach: createForEach(false, false)
};
var shallowInstrumentations = {
  get(key) {
    return get$1(this, key, false, true);
  },
  get size() {
    return size(this);
  },
  has: has$1,
  add,
  set: set$1,
  delete: deleteEntry,
  clear,
  forEach: createForEach(false, true)
};
var readonlyInstrumentations = {
  get(key) {
    return get$1(this, key, true);
  },
  get size() {
    return size(this, true);
  },
  has(key) {
    return has$1.call(this, key, true);
  },
  add: createReadonlyMethod(\\"add\\"),
  set: createReadonlyMethod(\\"set\\"),
  delete: createReadonlyMethod(\\"delete\\"),
  clear: createReadonlyMethod(\\"clear\\"),
  forEach: createForEach(true, false)
};
var iteratorMethods = [\\"keys\\", \\"values\\", \\"entries\\", Symbol.iterator];
iteratorMethods.forEach((method) => {
  mutableInstrumentations[method] = createIterableMethod(method, false, false);
  readonlyInstrumentations[method] = createIterableMethod(method, true, false);
  shallowInstrumentations[method] = createIterableMethod(method, false, true);
});
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === \\"__v_isReactive\\") {
      return !isReadonly2;
    } else if (key === \\"__v_isReadonly\\") {
      return isReadonly2;
    } else if (key === \\"__v_raw\\") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
var mutableCollectionHandlers = {
  get: createInstrumentationGetter(false, false)
};
var shallowCollectionHandlers = {
  get: createInstrumentationGetter(false, true)
};
var readonlyCollectionHandlers = {
  get: createInstrumentationGetter(true, false)
};
var reactiveMap = new WeakMap();
var readonlyMap = new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case \\"Object\\":
    case \\"Array\\":
      return 1;
    case \\"Map\\":
    case \\"Set\\":
    case \\"WeakMap\\":
    case \\"WeakSet\\":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value[\\"__v_skip\\"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (target && target[\\"__v_isReadonly\\"]) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers);
}
function shallowReadonly(target) {
  return createReactiveObject(target, true, shallowReadonlyHandlers, readonlyCollectionHandlers);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers) {
  if (!isObject(target)) {
    if (false) {
      console.warn(\`value cannot be made reactive: \${String(target)}\`);
    }
    return target;
  }
  if (target[\\"__v_raw\\"] && !(isReadonly2 && target[\\"__v_isReactive\\"])) {
    return target;
  }
  const proxyMap = isReadonly2 ? readonlyMap : reactiveMap;
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value[\\"__v_raw\\"]);
  }
  return !!(value && value[\\"__v_isReactive\\"]);
}
function isReadonly(value) {
  return !!(value && value[\\"__v_isReadonly\\"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  return observed && toRaw(observed[\\"__v_raw\\"]) || observed;
}
function markRaw(value) {
  def(value, \\"__v_skip\\", true);
  return value;
}
var convert = (val) => isObject(val) ? reactive(val) : val;
function isRef(r) {
  return Boolean(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value);
}
function shallowRef(value) {
  return createRef(value, true);
}
var RefImpl = class {
  constructor(_rawValue, _shallow = false) {
    this._rawValue = _rawValue;
    this._shallow = _shallow;
    this.__v_isRef = true;
    this._value = _shallow ? _rawValue : convert(_rawValue);
  }
  get value() {
    track(toRaw(this), \\"get\\", \\"value\\");
    return this._value;
  }
  set value(newVal) {
    if (hasChanged(toRaw(newVal), this._rawValue)) {
      this._rawValue = newVal;
      this._value = this._shallow ? newVal : convert(newVal);
      trigger(toRaw(this), \\"set\\", \\"value\\", newVal);
    }
  }
};
function createRef(rawValue, shallow = false) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
function triggerRef(ref2) {
  trigger(ref2, \\"set\\", \\"value\\", false ? ref2.value : void 0);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
var shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
var CustomRefImpl = class {
  constructor(factory) {
    this.__v_isRef = true;
    const {get: get2, set: set2} = factory(() => track(this, \\"get\\", \\"value\\"), () => trigger(this, \\"set\\", \\"value\\"));
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
};
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  if (false) {
    console.warn(\`toRefs() expects a reactive object but received a plain one.\`);
  }
  const ret = isArray(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef(object, key);
  }
  return ret;
}
var ObjectRefImpl = class {
  constructor(_object, _key) {
    this._object = _object;
    this._key = _key;
    this.__v_isRef = true;
  }
  get value() {
    return this._object[this._key];
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
};
function toRef(object, key) {
  return isRef(object[key]) ? object[key] : new ObjectRefImpl(object, key);
}
var ComputedRefImpl = class {
  constructor(getter, _setter, isReadonly2) {
    this._setter = _setter;
    this._dirty = true;
    this.__v_isRef = true;
    this.effect = effect(getter, {
      lazy: true,
      scheduler: () => {
        if (!this._dirty) {
          this._dirty = true;
          trigger(toRaw(this), \\"set\\", \\"value\\");
        }
      }
    });
    this[\\"__v_isReadonly\\"] = isReadonly2;
  }
  get value() {
    if (this._dirty) {
      this._value = this.effect();
      this._dirty = false;
    }
    track(toRaw(this), \\"get\\", \\"value\\");
    return this._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
};
function computed(getterOrOptions) {
  let getter;
  let setter;
  if (isFunction(getterOrOptions)) {
    getter = getterOrOptions;
    setter = false ? () => {
      console.warn(\\"Write operation failed: computed value is readonly\\");
    } : NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  return new ComputedRefImpl(getter, setter, isFunction(getterOrOptions) || !getterOrOptions.set);
}
// ../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var stack = [];
function warn(msg, ...args) {
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(appWarnHandler, instance, 11, [
      msg + args.join(\\"\\"),
      instance && instance.proxy,
      trace.map(({vnode}) => \`at <\${formatComponentName(instance, vnode.type)}>\`).join(\\"\\"),
      trace
    ]);
  } else {
    const warnArgs = [\`[Vue warn]: \${msg}\`, ...args];
    if (trace.length && true) {
      warnArgs.push(\`
\`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i) => {
    logs.push(...i === 0 ? [] : [\`
\`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({vnode, recurseCount}) {
  const postfix = recurseCount > 0 ? \`... (\${recurseCount} recursive calls)\` : \`\`;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = \` at <\${formatComponentName(vnode.component, vnode.type, isRoot)}\`;
  const close = \`>\` + postfix;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(\` ...\`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString(value)) {
    value = JSON.stringify(value);
    return raw ? value : [\`\${key}=\${value}\`];
  } else if (typeof value === \\"number\\" || typeof value === \\"boolean\\" || value == null) {
    return raw ? value : [\`\${key}=\${value}\`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [\`\${key}=Ref<\`, value, \`>\`];
  } else if (isFunction(value)) {
    return [\`\${key}=fn\${value.name ? \`<\${value.name}>\` : \`\`}\`];
  } else {
    value = toRaw(value);
    return raw ? value : [\`\${key}=\`, value];
  }
}
var ErrorTypeStrings = {
  [\\"bc\\"]: \\"beforeCreate hook\\",
  [\\"c\\"]: \\"created hook\\",
  [\\"bm\\"]: \\"beforeMount hook\\",
  [\\"m\\"]: \\"mounted hook\\",
  [\\"bu\\"]: \\"beforeUpdate hook\\",
  [\\"u\\"]: \\"updated\\",
  [\\"bum\\"]: \\"beforeUnmount hook\\",
  [\\"um\\"]: \\"unmounted hook\\",
  [\\"a\\"]: \\"activated hook\\",
  [\\"da\\"]: \\"deactivated hook\\",
  [\\"ec\\"]: \\"errorCaptured hook\\",
  [\\"rtc\\"]: \\"renderTracked hook\\",
  [\\"rtg\\"]: \\"renderTriggered hook\\",
  [0]: \\"setup function\\",
  [1]: \\"render function\\",
  [2]: \\"watcher getter\\",
  [3]: \\"watcher callback\\",
  [4]: \\"watcher cleanup function\\",
  [5]: \\"native event handler\\",
  [6]: \\"component event handler\\",
  [7]: \\"vnode hook\\",
  [8]: \\"directive hook\\",
  [9]: \\"transition hook\\",
  [10]: \\"app errorHandler\\",
  [11]: \\"app warnHandler\\",
  [12]: \\"ref function\\",
  [13]: \\"async component loader\\",
  [14]: \\"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next\\"
};
function callWithErrorHandling(fn, instance, type, args) {
  let res;
  try {
    res = args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
  if (isFunction(fn)) {
    const res = callWithErrorHandling(fn, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i = 0; i < fn.length; i++) {
    values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = false ? ErrorTypeStrings[type] : type;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo)) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  if (false) {
    const info = ErrorTypeStrings[type];
    if (contextVNode) {
      pushWarningContext(contextVNode);
    }
    warn(\`Unhandled error\${info ? \` during execution of \${info}\` : \`\`}\`);
    if (contextVNode) {
      popWarningContext();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  } else {
    console.error(err);
  }
}
var isFlushing = false;
var isFlushPending = false;
var queue = [];
var flushIndex = 0;
var pendingPreFlushCbs = [];
var activePreFlushCbs = null;
var preFlushIndex = 0;
var pendingPostFlushCbs = [];
var activePostFlushCbs = null;
var postFlushIndex = 0;
var resolvedPromise = Promise.resolve();
var currentFlushPromise = null;
var currentPreFlushParentJob = null;
function nextTick(fn) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn ? p2.then(fn) : p2;
}
function queueJob(job) {
  if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
    queue.push(job);
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i = queue.indexOf(job);
  if (i > -1) {
    queue[i] = null;
  }
}
function queueCb(cb, activeQueue, pendingQueue, index) {
  if (!isArray(cb)) {
    if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {
      pendingQueue.push(cb);
    }
  } else {
    pendingQueue.push(...cb);
  }
  queueFlush();
}
function queuePreFlushCb(cb) {
  queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
  queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
  if (pendingPreFlushCbs.length) {
    currentPreFlushParentJob = parentJob;
    activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
    pendingPreFlushCbs.length = 0;
    if (false) {
      seen = seen || new Map();
    }
    for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
      if (false) {
        checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex]);
      }
      activePreFlushCbs[preFlushIndex]();
    }
    activePreFlushCbs = null;
    preFlushIndex = 0;
    currentPreFlushParentJob = null;
    flushPreFlushCbs(seen, parentJob);
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    if (false) {
      seen = seen || new Map();
    }
    activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      if (false) {
        checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex]);
      }
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
var getId = (job) => job.id == null ? Infinity : job.id;
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  if (false) {
    seen = seen || new Map();
  }
  flushPreFlushCbs(seen);
  queue.sort((a, b) => getId(a) - getId(b));
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job) {
        if (false) {
          checkRecursiveUpdates(seen, job);
        }
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs(seen);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
var hmrDirtyComponents = new Set();
if (false) {
  const globalObject = typeof global !== \\"undefined\\" ? global : typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : {};
  globalObject.__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
  };
}
var map = new Map();
var devtools;
function setDevtoolsHook(hook) {
  devtools = hook;
}
function devtoolsInitApp(app, version2) {
  if (!devtools)
    return;
  devtools.emit(\\"app:init\\", app, version2, {
    Fragment,
    Text,
    Comment,
    Static
  });
}
function devtoolsUnmountApp(app) {
  if (!devtools)
    return;
  devtools.emit(\\"app:unmount\\", app);
}
var devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(\\"component:added\\");
var devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook(\\"component:updated\\");
var devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(\\"component:removed\\");
function createDevtoolsComponentHook(hook) {
  return (component) => {
    if (!devtools)
      return;
    devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0);
  };
}
function devtoolsComponentEmit(component, event, params) {
  if (!devtools)
    return;
  devtools.emit(\\"component:emit\\", component.appContext.app, component, event, params);
}
function emit(instance, event, ...args) {
  const props = instance.vnode.props || EMPTY_OBJ;
  if (false) {
    const {emitsOptions, propsOptions: [propsOptions]} = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions)) {
        if (!propsOptions || !(\`on\` + capitalize(event) in propsOptions)) {
          warn(\`Component emitted event \\"\${event}\\" but it is neither declared in the emits option nor as an \\"on\${capitalize(event)}\\" prop.\`);
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction(validator)) {
          const isValid = validator(...args);
          if (!isValid) {
            warn(\`Invalid event arguments: event validation failed for event \\"\${event}\\".\`);
          }
        }
      }
    }
  }
  if (__VUE_PROD_DEVTOOLS__) {
    devtoolsComponentEmit(instance, event, args);
  }
  let handlerName = \`on\${capitalize(event)}\`;
  let handler = props[handlerName];
  if (!handler && event.startsWith(\\"update:\\")) {
    handlerName = \`on\${capitalize(hyphenate(event))}\`;
    handler = props[handlerName];
  }
  if (!handler) {
    handler = props[handlerName + \`Once\`];
    if (!instance.emitted) {
      (instance.emitted = {})[handlerName] = true;
    } else if (instance.emitted[handlerName]) {
      return;
    }
  }
  if (handler) {
    callWithAsyncErrorHandling(handler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const appId = appContext.app ? appContext.app._uid : -1;
  const cache = comp.__emits || (comp.__emits = {});
  const cached = cache[appId];
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (__VUE_OPTIONS_API__ && !isFunction(comp)) {
    const extendEmits = (raw2) => {
      hasExtends = true;
      extend(normalized, normalizeEmitsOptions(raw2, appContext, true));
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    return cache[appId] = null;
  }
  if (isArray(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  return cache[appId] = normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.replace(/Once$/, \\"\\");
  return hasOwn(options, key[2].toLowerCase() + key.slice(3)) || hasOwn(options, key.slice(2));
}
var currentRenderingInstance = null;
function setCurrentRenderingInstance(instance) {
  currentRenderingInstance = instance;
}
var accessedAttrs = false;
function renderComponentRoot(instance) {
  const {type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render: render2, renderCache, data, setupState, ctx} = instance;
  let result;
  currentRenderingInstance = instance;
  if (false) {
    accessedAttrs = false;
  }
  try {
    let fallthroughAttrs;
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render2.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render3 = Component;
      if (false) {
        markAttrsAccessed();
      }
      result = normalizeVNode(render3.length > 1 ? render3(props, false ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit: emit2
      } : {attrs, slots, emit: emit2}) : render3(props, null));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
    let root = result;
    let setRoot = void 0;
    if (false) {
      ;
      [root, setRoot] = getChildRoot(result);
    }
    if (Component.inheritAttrs !== false && fallthroughAttrs) {
      const keys = Object.keys(fallthroughAttrs);
      const {shapeFlag} = root;
      if (keys.length) {
        if (shapeFlag & 1 || shapeFlag & 6) {
          if (propsOptions && keys.some(isModelListener)) {
            fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
          }
          root = cloneVNode(root, fallthroughAttrs);
        } else if (false) {
          const allAttrs = Object.keys(attrs);
          const eventAttrs = [];
          const extraAttrs = [];
          for (let i = 0, l = allAttrs.length; i < l; i++) {
            const key = allAttrs[i];
            if (isOn(key)) {
              if (!isModelListener(key)) {
                eventAttrs.push(key[2].toLowerCase() + key.slice(3));
              }
            } else {
              extraAttrs.push(key);
            }
          }
          if (extraAttrs.length) {
            warn(\`Extraneous non-props attributes (\${extraAttrs.join(\\", \\")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.\`);
          }
          if (eventAttrs.length) {
            warn(\`Extraneous non-emits event listeners (\${eventAttrs.join(\\", \\")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the \\"emits\\" option.\`);
          }
        }
      }
    }
    if (vnode.dirs) {
      if (false) {
        warn(\`Runtime directive used on component with non-element root node. The directives will not function as intended.\`);
      }
      root.dirs = vnode.dirs;
    }
    if (vnode.transition) {
      if (false) {
        warn(\`Component inside <Transition> renders non-element root node that cannot be animated.\`);
      }
      root.transition = vnode.transition;
    }
    if (false) {
      setRoot(root);
    } else {
      result = root;
    }
  } catch (err) {
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  currentRenderingInstance = null;
  return result;
}
function filterSingleRoot(children) {
  const filtered = children.filter((child) => {
    return !(isVNode(child) && child.type === Comment && child.children !== \\"v-if\\");
  });
  return filtered.length === 1 && isVNode(filtered[0]) ? filtered[0] : null;
}
var getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === \\"class\\" || key === \\"style\\" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
var filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const {props: prevProps, children: prevChildren, component} = prevVNode;
  const {props: nextProps, children: nextChildren, patchFlag} = nextVNode;
  const emits = component.emitsOptions;
  if (false) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag > 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({vnode, parent}, el) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el;
    parent = parent.parent;
  }
}
var isSuspense = (type) => type.__isSuspense;
var SuspenseImpl = {
  __isSuspense: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals);
    } else {
      patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, optimized, rendererInternals);
    }
  },
  hydrate: hydrateSuspense,
  create: createSuspenseBoundary
};
var Suspense = SuspenseImpl;
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals) {
  const {p: patch, o: {createElement}} = rendererInternals;
  const hiddenContainer = createElement(\\"div\\");
  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, optimized, rendererInternals);
  patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, optimized);
  if (suspense.deps > 0) {
    patch(null, vnode.ssFallback, container, anchor, parentComponent, null, isSVG, optimized);
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve();
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, optimized, {p: patch, um: unmount, o: {createElement}}) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const {activeBranch, pendingBranch, isInFallback, isHydrating} = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, optimized);
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, optimized);
        setActiveBranch(suspense, newFallback);
      }
    } else {
      suspense.pendingId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement(\\"div\\");
      if (isInFallback) {
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, optimized);
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, optimized);
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, optimized);
        suspense.resolve(true);
      } else {
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, optimized);
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, optimized);
      setActiveBranch(suspense, newBranch);
    } else {
      const onPending = n2.props && n2.props.onPending;
      if (isFunction(onPending)) {
        onPending();
      }
      suspense.pendingBranch = newBranch;
      suspense.pendingId++;
      patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, optimized);
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const {timeout, pendingId} = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
var hasWarned = false;
function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, optimized, rendererInternals, isHydrating = false) {
  if (false) {
    hasWarned = true;
    console[console.info ? \\"info\\" : \\"log\\"](\`<Suspense> is an experimental feature and its API will likely change.\`);
  }
  const {p: patch, m: move, um: unmount, n: next, o: {parentNode, remove: remove2}} = rendererInternals;
  const timeout = toNumber(vnode.props && vnode.props.timeout);
  const suspense = {
    vnode,
    parent,
    parentComponent,
    isSVG,
    optimized,
    container,
    hiddenContainer,
    anchor,
    deps: 0,
    pendingId: 0,
    timeout: typeof timeout === \\"number\\" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: true,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false) {
      if (false) {
        if (!resume && !suspense.pendingBranch) {
          throw new Error(\`suspense.resolve() is called without a pending branch.\`);
        }
        if (suspense.isUnmounted) {
          throw new Error(\`suspense.resolve() is called on an already unmounted suspense boundary.\`);
        }
      }
      const {vnode: vnode2, activeBranch, pendingBranch, pendingId, effects, parentComponent: parentComponent2, container: container2} = suspense;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === \\"out-in\\";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(pendingBranch, container2, anchor2, 0);
            }
          };
        }
        let {anchor: anchor2} = suspense;
        if (activeBranch) {
          anchor2 = next(activeBranch);
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor2, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent2 = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent2) {
        if (parent2.pendingBranch) {
          parent2.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent2 = parent2.parent;
      }
      if (!hasUnresolvedAncestor) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      const onResolve = vnode2.props && vnode2.props.onResolve;
      if (isFunction(onResolve)) {
        onResolve();
      }
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const {vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2, optimized: optimized2} = suspense;
      const onFallback = vnode2.props && vnode2.props.onFallback;
      if (isFunction(onFallback)) {
        onFallback();
      }
      const anchor2 = next(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(null, fallbackVNode, container2, anchor2, parentComponent2, null, isSVG2, optimized2);
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === \\"out-in\\";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      unmount(activeBranch, parentComponent2, null, true);
      suspense.isInFallback = true;
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect) {
      if (!suspense.pendingBranch) {
        return;
      }
      const hydratedEl = instance.vnode.el;
      suspense.deps++;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        suspense.deps--;
        instance.asyncResolved = true;
        const {vnode: vnode2} = instance;
        if (false) {
          pushWarningContext(vnode2);
        }
        handleSetupResult(instance, asyncSetupResult);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(instance, vnode2, parentNode(hydratedEl || instance.subTree.el), hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        if (false) {
          popWarningContext();
        }
        if (suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
      }
      if (suspense.pendingBranch) {
        unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement(\\"div\\"), null, isSVG, optimized, rendererInternals, true);
  const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, optimized);
  if (suspense.deps === 0) {
    suspense.resolve();
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const {shapeFlag, children} = vnode;
  let content;
  let fallback;
  if (shapeFlag & 32) {
    content = normalizeSuspenseSlot(children.default);
    fallback = normalizeSuspenseSlot(children.fallback);
  } else {
    content = normalizeSuspenseSlot(children);
    fallback = normalizeVNode(null);
  }
  return {
    content,
    fallback
  };
}
function normalizeSuspenseSlot(s) {
  if (isFunction(s)) {
    s = s();
  }
  if (isArray(s)) {
    const singleChild = filterSingleRoot(s);
    if (false) {
      warn(\`<Suspense> slots expect a single root node.\`);
    }
    s = singleChild;
  }
  return normalizeVNode(s);
}
function queueEffectWithSuspense(fn, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray(fn)) {
      suspense.effects.push(...fn);
    } else {
      suspense.effects.push(fn);
    }
  } else {
    queuePostFlushCb(fn);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const {vnode, parentComponent} = suspense;
  const el = vnode.el = branch.el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el;
    updateHOCHostEl(parentComponent, el);
  }
}
var isRenderingCompiledSlot = 0;
var setCompiledSlotRendering = (n) => isRenderingCompiledSlot += n;
function renderSlot(slots, name, props = {}, fallback) {
  let slot = slots[name];
  if (false) {
    warn(\`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.\`);
    slot = () => [];
  }
  isRenderingCompiledSlot++;
  const rendered = (openBlock(), createBlock(Fragment, {key: props.key}, slot ? slot(props) : fallback ? fallback() : [], slots._ === 1 ? 64 : -2));
  isRenderingCompiledSlot--;
  return rendered;
}
function withCtx(fn, ctx = currentRenderingInstance) {
  if (!ctx)
    return fn;
  const renderFnWithContext = (...args) => {
    if (!isRenderingCompiledSlot) {
      openBlock(true);
    }
    const owner = currentRenderingInstance;
    setCurrentRenderingInstance(ctx);
    const res = fn(...args);
    setCurrentRenderingInstance(owner);
    if (!isRenderingCompiledSlot) {
      closeBlock();
    }
    return res;
  };
  renderFnWithContext._c = true;
  return renderFnWithContext;
}
var currentScopeId = null;
var scopeIdStack = [];
function pushScopeId(id) {
  scopeIdStack.push(currentScopeId = id);
}
function popScopeId() {
  scopeIdStack.pop();
  currentScopeId = scopeIdStack[scopeIdStack.length - 1] || null;
}
function withScopeId(id) {
  return (fn) => withCtx(function() {
    pushScopeId(id);
    const res = fn.apply(this, arguments);
    popScopeId();
    return res;
  });
}
var isTeleport = (type) => type.__isTeleport;
var isTeleportDisabled = (props) => props && (props.disabled || props.disabled === \\"\\");
var resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString(targetSelector)) {
    if (!select) {
      false;
      return null;
    } else {
      const target = select(targetSelector);
      if (!target) {
        false;
      }
      return target;
    }
  } else {
    if (false) {
      warn(\`Invalid Teleport target: \${targetSelector}\`);
    }
    return targetSelector;
  }
};
var TeleportImpl = {
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals) {
    const {mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: {insert, querySelector, createText, createComment}} = internals;
    const disabled = isTeleportDisabled(n2.props);
    const {shapeFlag, children} = n2;
    if (n1 == null) {
      const placeholder = n2.el = false ? createComment(\\"teleport start\\") : createText(\\"\\");
      const mainAnchor = n2.anchor = false ? createComment(\\"teleport end\\") : createText(\\"\\");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText(\\"\\");
      if (target) {
        insert(targetAnchor, target);
      } else if (false) {
        warn(\\"Invalid Teleport target on mount:\\", target, \`(\${typeof target})\`);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, optimized);
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      if (n2.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG);
        if (n2.shapeFlag & 16) {
          const oldChildren = n1.children;
          const children2 = n2.children;
          for (let i = 0; i < children2.length; i++) {
            if (!children2[i].el) {
              children2[i].el = oldChildren[i].el;
            }
          }
        }
      } else if (!optimized) {
        patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG);
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(n2, container, mainAnchor, internals, 1);
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
          if (nextTarget) {
            moveTeleport(n2, nextTarget, null, internals, 0);
          } else if (false) {
            warn(\\"Invalid Teleport target on update:\\", target, \`(\${typeof target})\`);
          }
        } else if (wasDisabled) {
          moveTeleport(n2, target, targetAnchor, internals, 1);
        }
      }
    }
  },
  remove(vnode, {r: remove2, o: {remove: hostRemove}}) {
    const {shapeFlag, children, anchor} = vnode;
    hostRemove(anchor);
    if (shapeFlag & 16) {
      for (let i = 0; i < children.length; i++) {
        remove2(children[i]);
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, {o: {insert}, m: move}, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const {el, anchor, shapeFlag, children, props} = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, parentAnchor, 2);
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, optimized, {o: {nextSibling, parentNode, querySelector}}, hydrateChildren) {
  const target = vnode.target = resolveTarget(vnode.props, querySelector);
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, optimized);
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, optimized);
      }
      target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
    }
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
var Teleport = TeleportImpl;
var COMPONENTS = \\"components\\";
var DIRECTIVES = \\"directives\\";
function resolveComponent(name) {
  return resolveAsset(COMPONENTS, name) || name;
}
var NULL_DYNAMIC_COMPONENT = Symbol();
function resolveDynamicComponent(component) {
  if (isString(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = Component.displayName || Component.name;
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component;
      }
    }
    const res = resolve(instance[type] || Component[type], name) || resolve(instance.appContext[type], name);
    if (false) {
      warn(\`Failed to resolve \${type.slice(0, -1)}: \${name}\`);
    }
    return res;
  } else if (false) {
    warn(\`resolve\${capitalize(type.slice(0, -1))} can only be used in render() or setup().\`);
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}
var Fragment = Symbol(false ? \\"Fragment\\" : void 0);
var Text = Symbol(false ? \\"Text\\" : void 0);
var Comment = Symbol(false ? \\"Comment\\" : void 0);
var Static = Symbol(false ? \\"Static\\" : void 0);
var blockStack = [];
var currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
var shouldTrack2 = 1;
function setBlockTracking(value) {
  shouldTrack2 += value;
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true);
  vnode.dynamicChildren = currentBlock || EMPTY_ARR;
  closeBlock();
  if (shouldTrack2 > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  if (false) {
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
var vnodeArgsTransformer;
function transformVNodeArgs(transformer) {
  vnodeArgsTransformer = transformer;
}
var InternalObjectKey = \`__vInternal\`;
var normalizeKey = ({key}) => key != null ? key : null;
var normalizeRef = ({ref: ref2}) => {
  return ref2 != null ? isArray(ref2) ? ref2 : {i: currentRenderingInstance, r: ref2} : null;
};
var createVNode = false ? createVNodeWithArgsTransform : _createVNode;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    if (false) {
      warn(\`Invalid vnode type when creating vnode: \${type}.\`);
    }
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(type, props, true);
    if (children) {
      normalizeChildren(cloned, children);
    }
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    if (isProxy(props) || InternalObjectKey in props) {
      props = extend({}, props);
    }
    let {class: klass, style} = props;
    if (klass && !isString(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject(style)) {
      if (isProxy(style) && !isArray(style)) {
        style = extend({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction(type) ? 2 : 0;
  if (false) {
    type = toRaw(type);
    warn(\`Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \\\\\`markRaw\\\\\` or using \\\\\`shallowRef\\\\\` instead of \\\\\`ref\\\\\`.\`, \`
Component that was made reactive: \`, type);
  }
  const vnode = {
    __v_isVNode: true,
    [\\"__v_skip\\"]: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    children: null,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null
  };
  if (false) {
    warn(\`VNode created with invalid key (NaN). VNode type:\`, vnode.type);
  }
  normalizeChildren(vnode, children);
  if (shapeFlag & 128) {
    const {content, fallback} = normalizeSuspenseChildren(vnode);
    vnode.ssContent = content;
    vnode.ssFallback = fallback;
  }
  if (shouldTrack2 > 0 && !isBlockNode && currentBlock && (patchFlag > 0 || shapeFlag & 6) && patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const {props, ref: ref2, patchFlag} = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  return {
    __v_isVNode: true,
    [\\"__v_skip\\"]: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref2,
    scopeId: vnode.scopeId,
    children: vnode.children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor
  };
}
function createTextVNode(text = \\" \\", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = \\"\\", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === \\"boolean\\") {
    return createVNode(Comment);
  } else if (isArray(child)) {
    return createVNode(Fragment, null, child);
  } else if (typeof child === \\"object\\") {
    return child.el === null ? child : cloneVNode(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const {shapeFlag} = vnode;
  if (children == null) {
    children = null;
  } else if (isArray(children)) {
    type = 16;
  } else if (typeof children === \\"object\\") {
    if (shapeFlag & 1 || shapeFlag & 64) {
      const slot = children.default;
      if (slot) {
        slot._c && setCompiledSlotRendering(1);
        normalizeChildren(vnode, slot());
        slot._c && setCompiledSlotRendering(-1);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.vnode.patchFlag & 1024) {
          children._ = 2;
          vnode.patchFlag |= 1024;
        } else {
          children._ = 1;
        }
      }
    }
  } else if (isFunction(children)) {
    children = {default: children, _ctx: currentRenderingInstance};
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = extend({}, args[0]);
  for (let i = 1; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === \\"class\\") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === \\"style\\") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (existing !== incoming) {
          ret[key] = existing ? [].concat(existing, toMerge[key]) : incoming;
        }
      } else {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  setFullProps(instance, rawProps, props, attrs);
  if (false) {
    validateProps(props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {props, attrs, vnode: {patchFlag}} = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  if ((optimized || patchFlag > 0) && !(patchFlag & 16)) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        const key = propsToUpdate[i];
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            attrs[key] = value;
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance);
          }
        } else {
          attrs[key] = value;
        }
      }
    }
  } else {
    setFullProps(instance, rawProps, props, attrs);
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || !hasOwn(rawProps, key) && ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(options, rawProps || EMPTY_OBJ, key, void 0, instance);
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key)) {
          delete attrs[key];
        }
      }
    }
  }
  trigger(instance, \\"set\\", \\"$attrs\\");
  if (false) {
    validateProps(props, instance);
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  if (rawProps) {
    for (const key in rawProps) {
      const value = rawProps[key];
      if (isReservedProp(key)) {
        continue;
      }
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        props[camelKey] = value;
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        attrs[key] = value;
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue(options, rawCurrentProps, key, rawCurrentProps[key], instance);
    }
  }
}
function resolvePropValue(options, props, key, value, instance) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, \\"default\\");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction(defaultValue)) {
        setCurrentInstance(instance);
        value = defaultValue(props);
        setCurrentInstance(null);
      } else {
        value = defaultValue;
      }
    }
    if (opt[0]) {
      if (!hasOwn(props, key) && !hasDefault) {
        value = false;
      } else if (opt[1] && (value === \\"\\" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const appId = appContext.app ? appContext.app._uid : -1;
  const cache = comp.__props || (comp.__props = {});
  const cached = cache[appId];
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (__VUE_OPTIONS_API__ && !isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    return cache[appId] = EMPTY_ARR;
  }
  if (isArray(raw)) {
    for (let i = 0; i < raw.length; i++) {
      if (false) {
        warn(\`props must be strings when using array syntax.\`, raw[i]);
      }
      const normalizedKey = camelize(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    if (false) {
      warn(\`invalid props options\`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray(opt) || isFunction(opt) ? {type: opt} : opt;
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[0] = booleanIndex > -1;
          prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, \\"default\\")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  return cache[appId] = [normalized, needCastKeys];
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\\\\s*function (\\\\w+)/);
  return match ? match[1] : \\"\\";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray(expectedTypes)) {
    for (let i = 0, len = expectedTypes.length; i < len; i++) {
      if (isSameType(expectedTypes[i], type)) {
        return i;
      }
    }
  } else if (isFunction(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validatePropName(key) {
  if (key[0] !== \\"$\\") {
    return true;
  } else if (false) {
    warn(\`Invalid prop name: \\"\${key}\\" is a reserved property.\`);
  }
  return false;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      setCurrentInstance(null);
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else if (false) {
    const apiName = \`on\${capitalize(ErrorTypeStrings[type].replace(/ hook$/, \\"\\"))}\`;
    warn(\`\${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.\`);
  }
}
var createHook = (lifecycle) => (hook, target = currentInstance) => !isInSSRComponentSetup && injectHook(lifecycle, hook, target);
var onBeforeMount = createHook(\\"bm\\");
var onMounted = createHook(\\"m\\");
var onBeforeUpdate = createHook(\\"bu\\");
var onUpdated = createHook(\\"u\\");
var onBeforeUnmount = createHook(\\"bum\\");
var onUnmounted = createHook(\\"um\\");
var onRenderTriggered = createHook(\\"rtg\\");
var onRenderTracked = createHook(\\"rtc\\");
var onErrorCaptured = (hook, target = currentInstance) => {
  injectHook(\\"ec\\", hook, target);
};
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
var TransitionHookValidator = [Function, Array];
var BaseTransitionImpl = {
  name: \`BaseTransition\`,
  props: {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    onBeforeEnter: TransitionHookValidator,
    onEnter: TransitionHookValidator,
    onAfterEnter: TransitionHookValidator,
    onEnterCancelled: TransitionHookValidator,
    onBeforeLeave: TransitionHookValidator,
    onLeave: TransitionHookValidator,
    onAfterLeave: TransitionHookValidator,
    onLeaveCancelled: TransitionHookValidator,
    onBeforeAppear: TransitionHookValidator,
    onAppear: TransitionHookValidator,
    onAfterAppear: TransitionHookValidator,
    onAppearCancelled: TransitionHookValidator
  },
  setup(props, {slots}) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      if (false) {
        warn(\\"<transition> can only be used on a single element or component. Use <transition-group> for lists.\\");
      }
      const rawProps = toRaw(props);
      const {mode} = rawProps;
      if (false) {
        warn(\`invalid <transition> mode: \${mode}\`);
      }
      const child = children[0];
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const {getTransitionKey} = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === \\"out-in\\") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            instance.update();
          };
          return emptyPlaceholder(child);
        } else if (mode === \\"in-out\\") {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el._leaveCb = () => {
              earlyRemove();
              el._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
var BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const {leavingVNodes} = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance) {
  const {appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled} = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook = (hook, args) => {
    hook && callWithAsyncErrorHandling(hook, instance, 9, args);
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el._leaveCb) {
        el._leaveCb(true);
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook(hook, [el]);
    },
    enter(el) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook(cancelHook, [el]);
        } else {
          callHook(afterHook, [el]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el._enterCb = void 0;
      };
      if (hook) {
        hook(el, done);
        if (hook.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    leave(el, remove2) {
      const key2 = String(vnode.key);
      if (el._enterCb) {
        el._enterCb(true);
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook(onBeforeLeave, [el]);
      let called = false;
      const done = el._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook(onLeaveCancelled, [el]);
        } else {
          callHook(onAfterLeave, [el]);
        }
        el._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        onLeave(el, done);
        if (onLeave.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren(child.children, keepComment));
    } else if (keepComment || child.type !== Comment) {
      ret.push(child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i = 0; i < ret.length; i++) {
      ret[i].patchFlag = -2;
    }
  }
  return ret;
}
var isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
var KeepAliveImpl = {
  name: \`KeepAlive\`,
  __isKeepAlive: true,
  inheritRef: true,
  props: {
    include: [String, RegExp, Array],
    exclude: [String, RegExp, Array],
    max: [String, Number]
  },
  setup(props, {slots}) {
    const cache = new Map();
    const keys = new Set();
    let current = null;
    const instance = getCurrentInstance();
    const parentSuspense = instance.suspense;
    const sharedContext = instance.ctx;
    const {renderer: {p: patch, m: move, um: _unmount, o: {createElement}}} = sharedContext;
    const storageContainer = createElement(\\"div\\");
    sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
      const instance2 = vnode.component;
      move(vnode, container, anchor, 0, parentSuspense);
      patch(instance2.vnode, vnode, container, anchor, instance2, parentSuspense, isSVG, optimized);
      queuePostRenderEffect(() => {
        instance2.isDeactivated = false;
        if (instance2.a) {
          invokeArrayFns(instance2.a);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
      }, parentSuspense);
    };
    sharedContext.deactivate = (vnode) => {
      const instance2 = vnode.component;
      move(vnode, storageContainer, null, 1, parentSuspense);
      queuePostRenderEffect(() => {
        if (instance2.da) {
          invokeArrayFns(instance2.da);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
        instance2.isDeactivated = true;
      }, parentSuspense);
    };
    function unmount(vnode) {
      resetShapeFlag(vnode);
      _unmount(vnode, instance, parentSuspense);
    }
    function pruneCache(filter) {
      cache.forEach((vnode, key) => {
        const name = getName(vnode.type);
        if (name && (!filter || !filter(name))) {
          pruneCacheEntry(key);
        }
      });
    }
    function pruneCacheEntry(key) {
      const cached = cache.get(key);
      if (!current || cached.type !== current.type) {
        unmount(cached);
      } else if (current) {
        resetShapeFlag(current);
      }
      cache.delete(key);
      keys.delete(key);
    }
    watch(() => [props.include, props.exclude], ([include, exclude]) => {
      include && pruneCache((name) => matches(include, name));
      exclude && pruneCache((name) => !matches(exclude, name));
    }, {flush: \\"post\\"});
    let pendingCacheKey = null;
    const cacheSubtree = () => {
      if (pendingCacheKey != null) {
        cache.set(pendingCacheKey, getInnerChild(instance.subTree));
      }
    };
    onMounted(cacheSubtree);
    onUpdated(cacheSubtree);
    onBeforeUnmount(() => {
      cache.forEach((cached) => {
        const {subTree, suspense} = instance;
        const vnode = getInnerChild(subTree);
        if (cached.type === vnode.type) {
          resetShapeFlag(vnode);
          const da = vnode.component.da;
          da && queuePostRenderEffect(da, suspense);
          return;
        }
        unmount(cached);
      });
    });
    return () => {
      pendingCacheKey = null;
      if (!slots.default) {
        return null;
      }
      const children = slots.default();
      const rawVNode = children[0];
      if (children.length > 1) {
        if (false) {
          warn(\`KeepAlive should contain exactly one component child.\`);
        }
        current = null;
        return children;
      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
        current = null;
        return rawVNode;
      }
      let vnode = getInnerChild(rawVNode);
      const comp = vnode.type;
      const name = getName(comp);
      const {include, exclude, max} = props;
      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
        current = vnode;
        return rawVNode;
      }
      const key = vnode.key == null ? comp : vnode.key;
      const cachedVNode = cache.get(key);
      if (vnode.el) {
        vnode = cloneVNode(vnode);
        if (rawVNode.shapeFlag & 128) {
          rawVNode.ssContent = vnode;
        }
      }
      pendingCacheKey = key;
      if (cachedVNode) {
        vnode.el = cachedVNode.el;
        vnode.component = cachedVNode.component;
        if (vnode.transition) {
          setTransitionHooks(vnode, vnode.transition);
        }
        vnode.shapeFlag |= 512;
        keys.delete(key);
        keys.add(key);
      } else {
        keys.add(key);
        if (max && keys.size > parseInt(max, 10)) {
          pruneCacheEntry(keys.values().next().value);
        }
      }
      vnode.shapeFlag |= 256;
      current = vnode;
      return rawVNode;
    };
  }
};
var KeepAlive = KeepAliveImpl;
function getName(comp) {
  return comp.displayName || comp.name;
}
function matches(pattern, name) {
  if (isArray(pattern)) {
    return pattern.some((p2) => matches(p2, name));
  } else if (isString(pattern)) {
    return pattern.split(\\",\\").indexOf(name) > -1;
  } else if (pattern.test) {
    return pattern.test(name);
  }
  return false;
}
function onActivated(hook, target) {
  registerKeepAliveHook(hook, \\"a\\", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, \\"da\\", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(type, hook, keepAliveRoot, true);
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function resetShapeFlag(vnode) {
  let shapeFlag = vnode.shapeFlag;
  if (shapeFlag & 256) {
    shapeFlag -= 256;
  }
  if (shapeFlag & 512) {
    shapeFlag -= 512;
  }
  vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
var isInternalKey = (key) => key[0] === \\"_\\" || key === \\"$stable\\";
var normalizeSlotValue = (value) => isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
var normalizeSlot = (key, rawSlot, ctx) => withCtx((props) => {
  if (false) {
    warn(\`Slot \\"\${key}\\" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.\`);
  }
  return normalizeSlotValue(rawSlot(props));
}, ctx);
var normalizeObjectSlots = (rawSlots, slots) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction(value)) {
      slots[key] = normalizeSlot(key, value, ctx);
    } else if (value != null) {
      if (false) {
        warn(\`Non-function value encountered for slot \\"\${key}\\". Prefer function slots for better performance.\`);
      }
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
var normalizeVNodeSlots = (instance, children) => {
  if (false) {
    warn(\`Non-function value encountered for default slot. Prefer function slots for better performance.\`);
  }
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
var initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = children;
      def(children, \\"_\\", type);
    } else {
      normalizeObjectSlots(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
var updateSlots = (instance, children) => {
  const {vnode, slots} = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (false) {
        extend(slots, children);
      } else if (type === 1) {
        needDeletionCheck = false;
      } else {
        extend(slots, children);
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = {default: 1};
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function withDirectives(vnode, directives) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    false;
    return vnode;
  }
  const instance = internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i = 0; i < directives.length; i++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];
    if (isFunction(dir)) {
      dir = {
        mounted: dir,
        updated: dir
      };
    }
    bindings.push({
      dir,
      instance,
      value,
      oldValue: void 0,
      arg,
      modifiers
    });
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    const hook = binding.dir[name];
    if (hook) {
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
    }
  }
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      isCustomElement: NO,
      errorHandler: void 0,
      warnHandler: void 0
    },
    mixins: [],
    components: {},
    directives: {},
    provides: Object.create(null)
  };
}
var uid2 = 0;
function createAppAPI(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (rootProps != null && !isObject(rootProps)) {
      false;
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid2++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
        if (false) {
          warn(\`app.config cannot be replaced. Modify individual options instead.\`);
        }
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin)) {
          false;
        } else if (plugin && isFunction(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else if (false) {
          warn(\`A plugin must either be a function or an object with an \\"install\\" function.\`);
        }
        return app;
      },
      mixin(mixin) {
        if (__VUE_OPTIONS_API__) {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else if (false) {
            warn(\\"Mixin has already been applied to target app\\" + (mixin.name ? \`: \${mixin.name}\` : \\"\\"));
          }
        } else if (false) {
          warn(\\"Mixins are only available in builds supporting Options API\\");
        }
        return app;
      },
      component(name, component) {
        if (false) {
          validateComponentName(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (false) {
          warn(\`Component \\"\${name}\\" has already been registered in target app.\`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        if (false) {
          validateDirectiveName(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (false) {
          warn(\`Directive \\"\${name}\\" has already been registered in target app.\`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate) {
        if (!isMounted) {
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (false) {
            context.reload = () => {
              render2(cloneVNode(vnode), rootContainer);
            };
          }
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          if (__VUE_PROD_DEVTOOLS__) {
            devtoolsInitApp(app, version);
          }
          return vnode.component.proxy;
        } else if (false) {
          warn(\`App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \\\\\`const createMyApp = () => createApp(App)\\\\\`\`);
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          if (__VUE_PROD_DEVTOOLS__) {
            devtoolsUnmountApp(app);
          }
        } else if (false) {
          warn(\`Cannot unmount an app that is not mounted.\`);
        }
      },
      provide(key, value) {
        if (false) {
          warn(\`App already provides property with key \\"\${String(key)}\\". It will be overwritten with the new value.\`);
        }
        context.provides[key] = value;
        return app;
      }
    };
    return app;
  };
}
var hasMismatch = false;
var isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== \\"foreignObject\\";
var isComment = (node) => node.nodeType === 8;
function createHydrationFunctions(rendererInternals) {
  const {mt: mountComponent, p: patch, o: {patchProp: patchProp2, nextSibling, parentNode, remove: remove2, insert, createComment}} = rendererInternals;
  const hydrate2 = (vnode, container) => {
    if (false) {
      warn(\`Attempting to hydrate existing markup but container is empty. Performing full mount instead.\`);
      patch(null, vnode, container);
      return;
    }
    hasMismatch = false;
    hydrateNode(container.firstChild, vnode, null, null);
    flushPostFlushCbs();
    if (hasMismatch && true) {
      console.error(\`Hydration completed but contains mismatches.\`);
    }
  };
  const hydrateNode = (node, vnode, parentComponent, parentSuspense, optimized = false) => {
    const isFragmentStart = isComment(node) && node.data === \\"[\\";
    const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, isFragmentStart);
    const {type, ref: ref2, shapeFlag} = vnode;
    const domType = node.nodeType;
    vnode.el = node;
    let nextNode = null;
    switch (type) {
      case Text:
        if (domType !== 3) {
          nextNode = onMismatch();
        } else {
          if (node.data !== vnode.children) {
            hasMismatch = true;
            false;
            node.data = vnode.children;
          }
          nextNode = nextSibling(node);
        }
        break;
      case Comment:
        if (domType !== 8 || isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = nextSibling(node);
        }
        break;
      case Static:
        if (domType !== 1) {
          nextNode = onMismatch();
        } else {
          nextNode = node;
          const needToAdoptContent = !vnode.children.length;
          for (let i = 0; i < vnode.staticCount; i++) {
            if (needToAdoptContent)
              vnode.children += nextNode.outerHTML;
            if (i === vnode.staticCount - 1) {
              vnode.anchor = nextNode;
            }
            nextNode = nextSibling(nextNode);
          }
          return nextNode;
        }
        break;
      case Fragment:
        if (!isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, optimized);
        }
        break;
      default:
        if (shapeFlag & 1) {
          if (domType !== 1 || vnode.type !== node.tagName.toLowerCase()) {
            nextNode = onMismatch();
          } else {
            nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, optimized);
          }
        } else if (shapeFlag & 6) {
          const container = parentNode(node);
          const hydrateComponent = () => {
            mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
          };
          const loadAsync = vnode.type.__asyncLoader;
          if (loadAsync) {
            loadAsync().then(hydrateComponent);
          } else {
            hydrateComponent();
          }
          nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
        } else if (shapeFlag & 64) {
          if (domType !== 8) {
            nextNode = onMismatch();
          } else {
            nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, optimized, rendererInternals, hydrateChildren);
          }
        } else if (shapeFlag & 128) {
          nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), optimized, rendererInternals, hydrateNode);
        } else if (false) {
          warn(\\"Invalid HostVNode type:\\", type, \`(\${typeof type})\`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, null, parentComponent, parentSuspense, vnode);
    }
    return nextNode;
  };
  const hydrateElement = (el, vnode, parentComponent, parentSuspense, optimized) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const {props, patchFlag, shapeFlag, dirs} = vnode;
    if (patchFlag !== -1) {
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, \\"created\\");
      }
      if (props) {
        if (!optimized || (patchFlag & 16 || patchFlag & 32)) {
          for (const key in props) {
            if (!isReservedProp(key) && isOn(key)) {
              patchProp2(el, key, null, props[key]);
            }
          }
        } else if (props.onClick) {
          patchProp2(el, \\"onClick\\", null, props.onClick);
        }
      }
      let vnodeHooks;
      if (vnodeHooks = props && props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, \\"beforeMount\\");
      }
      if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
        queueEffectWithSuspense(() => {
          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, \\"mounted\\");
        }, parentSuspense);
      }
      if (shapeFlag & 16 && !(props && (props.innerHTML || props.textContent))) {
        let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, optimized);
        let hasWarned2 = false;
        while (next) {
          hasMismatch = true;
          if (false) {
            warn(\`Hydration children mismatch in <\${vnode.type}>: server rendered element contains more child nodes than client vdom.\`);
            hasWarned2 = true;
          }
          const cur = next;
          next = next.nextSibling;
          remove2(cur);
        }
      } else if (shapeFlag & 8) {
        if (el.textContent !== vnode.children) {
          hasMismatch = true;
          false;
          el.textContent = vnode.children;
        }
      }
    }
    return el.nextSibling;
  };
  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, optimized) => {
    optimized = optimized || !!parentVNode.dynamicChildren;
    const children = parentVNode.children;
    const l = children.length;
    let hasWarned2 = false;
    for (let i = 0; i < l; i++) {
      const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
      if (node) {
        node = hydrateNode(node, vnode, parentComponent, parentSuspense, optimized);
      } else {
        hasMismatch = true;
        if (false) {
          warn(\`Hydration children mismatch in <\${container.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.\`);
          hasWarned2 = true;
        }
        patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container));
      }
    }
    return node;
  };
  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, optimized) => {
    const container = parentNode(node);
    const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, optimized);
    if (next && isComment(next) && next.data === \\"]\\") {
      return nextSibling(vnode.anchor = next);
    } else {
      hasMismatch = true;
      insert(vnode.anchor = createComment(\`]\`), container, next);
      return next;
    }
  };
  const handleMismatch = (node, vnode, parentComponent, parentSuspense, isFragment) => {
    hasMismatch = true;
    false;
    vnode.el = null;
    if (isFragment) {
      const end = locateClosingAsyncAnchor(node);
      while (true) {
        const next2 = nextSibling(node);
        if (next2 && next2 !== end) {
          remove2(next2);
        } else {
          break;
        }
      }
    }
    const next = nextSibling(node);
    const container = parentNode(node);
    remove2(node);
    patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container));
    return next;
  };
  const locateClosingAsyncAnchor = (node) => {
    let match = 0;
    while (node) {
      node = nextSibling(node);
      if (node && isComment(node)) {
        if (node.data === \\"[\\")
          match++;
        if (node.data === \\"]\\") {
          if (match === 0) {
            return nextSibling(node);
          } else {
            match--;
          }
        }
      }
    }
    return node;
  };
  return [hydrate2, hydrateNode];
}
function initFeatureFlags() {
  let needWarn = false;
  if (typeof __VUE_OPTIONS_API__ !== \\"boolean\\") {
    needWarn = true;
    getGlobalThis().__VUE_OPTIONS_API__ = true;
  }
  if (typeof __VUE_PROD_DEVTOOLS__ !== \\"boolean\\") {
    needWarn = true;
    getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;
  }
  if (false) {
    console.warn(\`You are running the esm-bundler build of Vue. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle. See http://link.vuejs.org/feature-flags for more details.\`);
  }
}
var prodEffectOptions = {
  scheduler: queueJob,
  allowRecurse: true
};
var queuePostRenderEffect = queueEffectWithSuspense;
var setRef = (rawRef, oldRawRef, parentComponent, parentSuspense, vnode) => {
  if (isArray(rawRef)) {
    rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentComponent, parentSuspense, vnode));
    return;
  }
  let value;
  if (!vnode) {
    value = null;
  } else {
    if (vnode.shapeFlag & 4) {
      value = vnode.component.proxy;
    } else {
      value = vnode.el;
    }
  }
  const {i: owner, r: ref2} = rawRef;
  if (false) {
    warn(\`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.\`);
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isString(ref2)) {
    const doSet = () => {
      refs[ref2] = value;
      if (hasOwn(setupState, ref2)) {
        setupState[ref2] = value;
      }
    };
    if (value) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isRef(ref2)) {
    const doSet = () => {
      ref2.value = value;
    };
    if (value) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isFunction(ref2)) {
    callWithErrorHandling(ref2, parentComponent, 12, [
      value,
      refs
    ]);
  } else if (false) {
    warn(\\"Invalid template ref type:\\", value, \`(\${typeof value})\`);
  }
};
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
  return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
  {
    initFeatureFlags();
  }
  const {insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, forcePatchProp: hostForcePatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent} = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, optimized = false) => {
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const {type, ref: ref2, shapeFlag} = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        } else if (false) {
          patchStaticNode(n1, n2, container, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);
        } else if (false) {
          warn(\\"Invalid VNode type:\\", type, \`(\${typeof type})\`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentComponent, parentSuspense, n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || \\"\\"), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
  };
  const patchStaticNode = (n1, n2, container, isSVG) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = (vnode, container, anchor) => {
    let cur = vnode.el;
    const end = vnode.anchor;
    while (cur && cur !== end) {
      const next = hostNextSibling(cur);
      hostInsert(cur, container, anchor);
      cur = next;
    }
    hostInsert(end, container, anchor);
  };
  const removeStaticNode = (vnode) => {
    let cur = vnode.el;
    while (cur && cur !== vnode.anchor) {
      const next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(vnode.anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    isSVG = isSVG || n2.type === \\"svg\\";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    let el;
    let vnodeHook;
    const {type, props, shapeFlag, transition, scopeId, patchFlag, dirs} = vnode;
    if (vnode.el && hostCloneNode !== void 0 && patchFlag === -1) {
      el = vnode.el = hostCloneNode(vnode.el);
    } else {
      el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is);
      if (shapeFlag & 8) {
        hostSetElementText(el, vnode.children);
      } else if (shapeFlag & 16) {
        mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== \\"foreignObject\\", optimized || !!vnode.dynamicChildren);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, \\"created\\");
      }
      if (props) {
        for (const key in props) {
          if (!isReservedProp(key)) {
            hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
        if (vnodeHook = props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
      }
      setScopeId(el, scopeId, vnode, parentComponent);
    }
    if (__VUE_PROD_DEVTOOLS__) {
      Object.defineProperty(el, \\"__vnode\\", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el, \\"__vueParentComponent\\", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, \\"beforeMount\\");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, \\"mounted\\");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, scopeId, vnode, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (parentComponent) {
      const treeOwnerId = parentComponent.type.__scopeId;
      if (treeOwnerId && treeOwnerId !== scopeId) {
        hostSetScopeId(el, treeOwnerId + \\"-s\\");
      }
      let subTree = parentComponent.subTree;
      if (false) {
        subTree = filterSingleRoot(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        setScopeId(el, parentComponent.vnode.scopeId, parentComponent.vnode, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, optimized, start = 0) => {
    for (let i = start; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) => {
    const el = n2.el = n1.el;
    let {patchFlag, dynamicChildren, dirs} = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, \\"beforeUpdate\\");
    }
    if (false) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, \\"class\\", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, \\"style\\", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) {
              hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    const areChildrenSVG = isSVG && n2.type !== \\"foreignObject\\";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG);
      if (false) {
        traverseStaticChildren(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, \\"updated\\");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & 6 || oldVNode.shapeFlag & 64 ? hostParentNode(oldVNode.el) : fallbackContainer;
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, true);
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) {
          hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText(\\"\\");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText(\\"\\");
    let {patchFlag, dynamicChildren} = n2;
    if (patchFlag > 0) {
      optimized = true;
    }
    if (false) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG);
        if (false) {
          traverseStaticChildren(n1, n2);
        } else if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
          traverseStaticChildren(n1, n2, true);
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (false) {
      registerHMR(instance);
    }
    if (false) {
      pushWarningContext(initialVNode);
      startMeasure(instance, \`mount\`);
    }
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    if (false) {
      startMeasure(instance, \`init\`);
    }
    setupComponent(instance);
    if (false) {
      endMeasure(instance, \`init\`);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
    if (false) {
      popWarningContext();
      endMeasure(instance, \`mount\`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        if (false) {
          pushWarningContext(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        if (false) {
          popWarningContext();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.component = n1.component;
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    instance.update = effect(function componentEffect() {
      if (!instance.isMounted) {
        let vnodeHook;
        const {el, props} = initialVNode;
        const {bm, m, parent} = instance;
        if (bm) {
          invokeArrayFns(bm);
        }
        if (vnodeHook = props && props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        if (false) {
          startMeasure(instance, \`render\`);
        }
        const subTree = instance.subTree = renderComponentRoot(instance);
        if (false) {
          endMeasure(instance, \`render\`);
        }
        if (el && hydrateNode) {
          if (false) {
            startMeasure(instance, \`hydrate\`);
          }
          hydrateNode(initialVNode.el, subTree, instance, parentSuspense);
          if (false) {
            endMeasure(instance, \`hydrate\`);
          }
        } else {
          if (false) {
            startMeasure(instance, \`patch\`);
          }
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          if (false) {
            endMeasure(instance, \`patch\`);
          }
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (vnodeHook = props && props.onVnodeMounted) {
          queuePostRenderEffect(() => {
            invokeVNodeHook(vnodeHook, parent, initialVNode);
          }, parentSuspense);
        }
        const {a} = instance;
        if (a && initialVNode.shapeFlag & 256) {
          queuePostRenderEffect(a, parentSuspense);
        }
        instance.isMounted = true;
      } else {
        let {next, bu, u, parent, vnode} = instance;
        let originNext = next;
        let vnodeHook;
        if (false) {
          pushWarningContext(next || instance.vnode);
        }
        if (next) {
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        next.el = vnode.el;
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        if (false) {
          startMeasure(instance, \`render\`);
        }
        const nextTree = renderComponentRoot(instance);
        if (false) {
          endMeasure(instance, \`render\`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        if (instance.refs !== EMPTY_OBJ) {
          instance.refs = {};
        }
        if (false) {
          startMeasure(instance, \`patch\`);
        }
        patch(prevTree, nextTree, hostParentNode(prevTree.el), getNextHostNode(prevTree), instance, parentSuspense, isSVG);
        if (false) {
          endMeasure(instance, \`patch\`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(() => {
            invokeVNodeHook(vnodeHook, parent, next, vnode);
          }, parentSuspense);
        }
        if (__VUE_PROD_DEVTOOLS__) {
          devtoolsComponentUpdated(instance);
        }
        if (false) {
          popWarningContext();
        }
      }
    }, false ? createDevEffectOptions(instance) : prodEffectOptions);
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children);
    flushPreFlushCbs(void 0, instance.update);
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const {patchFlag, shapeFlag} = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, \\"\\");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, optimized);
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG);
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          if (false) {
            warn(\`Duplicate keys found during update:\`, JSON.stringify(nextChild.key), \`Make sure keys are unique.\`);
          }
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++)
        newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG);
        } else if (moved) {
          if (j < 0 || i !== increasingNewIndexSequence[j]) {
            move(nextChild, container, anchor, 2);
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const {el, type, transition, children, shapeFlag} = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (false) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const {leave, delayLeave, afterLeave} = transition;
        const remove3 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false) => {
    const {type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs} = vnode;
    if (ref2 != null && parentComponent) {
      setRef(ref2, null, parentComponent, parentSuspense, null);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    let vnodeHook;
    if (vnodeHook = props && props.onVnodeBeforeUnmount) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, \\"beforeUnmount\\");
      }
      if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense);
      } else if (shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, internals);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, \\"unmounted\\");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const {type, el, anchor, transition} = vnode;
    if (type === Fragment) {
      removeFragment(el, anchor);
      return;
    }
    if (false) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const {leave, delayLeave} = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (false) {
      unregisterHMR(instance);
    }
    const {bum, effects, update, subTree, um} = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    if (effects) {
      for (let i = 0; i < effects.length; i++) {
        stop(effects[i]);
      }
    }
    if (update) {
      stop(update);
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    if (__VUE_PROD_DEVTOOLS__) {
      devtoolsComponentRemoved(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, start = 0) => {
    for (let i = start; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const traverseStaticChildren = (n1, n2, shallow = false) => {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if (isArray(ch1) && isArray(ch2)) {
      for (let i = 0; i < ch1.length; i++) {
        const c1 = ch1[i];
        const c2 = ch2[i] = cloneIfMounted(ch2[i]);
        if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
          if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
            c2.el = c1.el;
          }
          if (!shallow)
            traverseStaticChildren(c1, c2);
        }
        if (false) {
          c2.el = c1.el;
        }
      }
    }
  };
  const render2 = (vnode, container) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container);
    }
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI(render2, hydrate2)
  };
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i, j, u, v, c;
  const len = arr.length;
  for (i = 0; i < len; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = (u + v) / 2 | 0;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
var INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (false) {
    warn(\`\\\\\`watch(fn, options?)\\\\\` signature has been moved to a separate API. Use \\\\\`watchEffect(fn, options?)\\\\\` instead. \\\\\`watch\\\\\` now only supports \\\\\`watch(source, cb, options?) signature.\`);
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, {immediate, deep, flush, onTrack, onTrigger} = EMPTY_OBJ, instance = currentInstance) {
  if (false) {
    if (immediate !== void 0) {
      warn(\`watch() \\"immediate\\" option is only respected when using the watch(source, callback, options?) signature.\`);
    }
    if (deep !== void 0) {
      warn(\`watch() \\"deep\\" option is only respected when using the watch(source, callback, options?) signature.\`);
    }
  }
  const warnInvalidSource = (s) => {
    warn(\`Invalid watch source: \`, s, \`A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.\`);
  };
  let getter;
  const isRefSource = isRef(source);
  if (isRefSource) {
    getter = () => source.value;
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray(source)) {
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return traverse(s);
      } else if (isFunction(s)) {
        return callWithErrorHandling(s, instance, 2);
      } else {
        false;
      }
    });
  } else if (isFunction(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup2) {
          cleanup2();
        }
        return callWithErrorHandling(source, instance, 3, [onInvalidate]);
      };
    }
  } else {
    getter = NOOP;
    false;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup2;
  const onInvalidate = (fn) => {
    cleanup2 = runner.options.onStop = () => {
      callWithErrorHandling(fn, instance, 4);
    };
  };
  let oldValue = isArray(source) ? [] : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!runner.active) {
      return;
    }
    if (cb) {
      const newValue = runner();
      if (deep || isRefSource || hasChanged(newValue, oldValue)) {
        if (cleanup2) {
          cleanup2();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onInvalidate
        ]);
        oldValue = newValue;
      }
    } else {
      runner();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === \\"sync\\") {
    scheduler = job;
  } else if (flush === \\"post\\") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    scheduler = () => {
      if (!instance || instance.isMounted) {
        queuePreFlushCb(job);
      } else {
        job();
      }
    };
  }
  const runner = effect(getter, {
    lazy: true,
    onTrack,
    onTrigger,
    scheduler
  });
  recordInstanceBoundEffect(runner);
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = runner();
    }
  } else if (flush === \\"post\\") {
    queuePostRenderEffect(runner, instance && instance.suspense);
  } else {
    runner();
  }
  return () => {
    stop(runner);
    if (instance) {
      remove(instance.effects, runner);
    }
  };
}
function instanceWatch(source, cb, options) {
  const publicThis = this.proxy;
  const getter = isString(source) ? () => publicThis[source] : source.bind(publicThis);
  return doWatch(getter, cb.bind(publicThis), options, this);
}
function traverse(value, seen = new Set()) {
  if (!isObject(value) || seen.has(value)) {
    return value;
  }
  seen.add(value);
  if (isRef(value)) {
    traverse(value.value, seen);
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], seen);
    }
  } else if (isMap(value)) {
    value.forEach((_, key) => {
      traverse(value.get(key), seen);
    });
  } else if (isSet(value)) {
    value.forEach((v) => {
      traverse(v, seen);
    });
  } else {
    for (const key in value) {
      traverse(value[key], seen);
    }
  }
  return value;
}
function provide(key, value) {
  if (!currentInstance) {
    if (false) {
      warn(\`provide() can only be used inside setup().\`);
    }
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.provides;
    if (key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue() : defaultValue;
    } else if (false) {
      warn(\`injection \\"\${String(key)}\\" not found.\`);
    }
  } else if (false) {
    warn(\`inject() can only be used inside setup() or functional components.\`);
  }
}
var isInBeforeCreate = false;
function applyOptions(instance, options, deferredData = [], deferredWatch = [], asMixin = false) {
  const {
    mixins,
    extends: extendsOptions,
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    components,
    directives,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured
  } = options;
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  const globalMixins = instance.appContext.mixins;
  if (asMixin && render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (!asMixin) {
    isInBeforeCreate = true;
    callSyncHook(\\"beforeCreate\\", options, publicThis, globalMixins);
    isInBeforeCreate = false;
    applyMixins(instance, globalMixins, deferredData, deferredWatch);
  }
  if (extendsOptions) {
    applyOptions(instance, extendsOptions, deferredData, deferredWatch, true);
  }
  if (mixins) {
    applyMixins(instance, mixins, deferredData, deferredWatch);
  }
  const checkDuplicateProperties = false ? createDuplicateChecker() : null;
  if (false) {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties(\\"Props\\", key);
      }
    }
  }
  if (injectOptions) {
    if (isArray(injectOptions)) {
      for (let i = 0; i < injectOptions.length; i++) {
        const key = injectOptions[i];
        ctx[key] = inject(key);
        if (false) {
          checkDuplicateProperties(\\"Inject\\", key);
        }
      }
    } else {
      for (const key in injectOptions) {
        const opt = injectOptions[key];
        if (isObject(opt)) {
          ctx[key] = inject(opt.from || key, opt.default, true);
        } else {
          ctx[key] = inject(opt);
        }
        if (false) {
          checkDuplicateProperties(\\"Inject\\", key);
        }
      }
    }
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction(methodHandler)) {
        ctx[key] = methodHandler.bind(publicThis);
        if (false) {
          checkDuplicateProperties(\\"Methods\\", key);
        }
      } else if (false) {
        warn(\`Method \\"\${key}\\" has type \\"\${typeof methodHandler}\\" in the component definition. Did you reference the function correctly?\`);
      }
    }
  }
  if (!asMixin) {
    if (deferredData.length) {
      deferredData.forEach((dataFn) => resolveData(instance, dataFn, publicThis));
    }
    if (dataOptions) {
      resolveData(instance, dataOptions, publicThis);
    }
    if (false) {
      const rawData = toRaw(instance.data);
      for (const key in rawData) {
        checkDuplicateProperties(\\"Data\\", key);
        if (key[0] !== \\"$\\" && key[0] !== \\"_\\") {
          Object.defineProperty(ctx, key, {
            configurable: true,
            enumerable: true,
            get: () => rawData[key],
            set: NOOP
          });
        }
      }
    }
  } else if (dataOptions) {
    deferredData.push(dataOptions);
  }
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      if (false) {
        warn(\`Computed property \\"\${key}\\" has no getter.\`);
      }
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : false ? () => {
        warn(\`Write operation failed: computed property \\"\${key}\\" is readonly.\`);
      } : NOOP;
      const c = computed2({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
      if (false) {
        checkDuplicateProperties(\\"Computed\\", key);
      }
    }
  }
  if (watchOptions) {
    deferredWatch.push(watchOptions);
  }
  if (!asMixin && deferredWatch.length) {
    deferredWatch.forEach((watchOptions2) => {
      for (const key in watchOptions2) {
        createWatcher(watchOptions2[key], ctx, publicThis, key);
      }
    });
  }
  if (provideOptions) {
    const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    for (const key in provides) {
      provide(key, provides[key]);
    }
  }
  if (asMixin) {
    if (components) {
      extend(instance.components || (instance.components = extend({}, instance.type.components)), components);
    }
    if (directives) {
      extend(instance.directives || (instance.directives = extend({}, instance.type.directives)), directives);
    }
  }
  if (!asMixin) {
    callSyncHook(\\"created\\", options, publicThis, globalMixins);
  }
  if (beforeMount) {
    onBeforeMount(beforeMount.bind(publicThis));
  }
  if (mounted) {
    onMounted(mounted.bind(publicThis));
  }
  if (beforeUpdate) {
    onBeforeUpdate(beforeUpdate.bind(publicThis));
  }
  if (updated) {
    onUpdated(updated.bind(publicThis));
  }
  if (activated) {
    onActivated(activated.bind(publicThis));
  }
  if (deactivated) {
    onDeactivated(deactivated.bind(publicThis));
  }
  if (errorCaptured) {
    onErrorCaptured(errorCaptured.bind(publicThis));
  }
  if (renderTracked) {
    onRenderTracked(renderTracked.bind(publicThis));
  }
  if (renderTriggered) {
    onRenderTriggered(renderTriggered.bind(publicThis));
  }
  if (false) {
    warn(\`\\\\\`beforeDestroy\\\\\` has been renamed to \\\\\`beforeUnmount\\\\\`.\`);
  }
  if (beforeUnmount) {
    onBeforeUnmount(beforeUnmount.bind(publicThis));
  }
  if (false) {
    warn(\`\\\\\`destroyed\\\\\` has been renamed to \\\\\`unmounted\\\\\`.\`);
  }
  if (unmounted) {
    onUnmounted(unmounted.bind(publicThis));
  }
}
function callSyncHook(name, options, ctx, globalMixins) {
  callHookFromMixins(name, globalMixins, ctx);
  const {extends: base, mixins} = options;
  if (base) {
    callHookFromExtends(name, base, ctx);
  }
  if (mixins) {
    callHookFromMixins(name, mixins, ctx);
  }
  const selfHook = options[name];
  if (selfHook) {
    selfHook.call(ctx);
  }
}
function callHookFromExtends(name, base, ctx) {
  if (base.extends) {
    callHookFromExtends(name, base.extends, ctx);
  }
  const baseHook = base[name];
  if (baseHook) {
    baseHook.call(ctx);
  }
}
function callHookFromMixins(name, mixins, ctx) {
  for (let i = 0; i < mixins.length; i++) {
    const chainedMixins = mixins[i].mixins;
    if (chainedMixins) {
      callHookFromMixins(name, chainedMixins, ctx);
    }
    const fn = mixins[i][name];
    if (fn) {
      fn.call(ctx);
    }
  }
}
function applyMixins(instance, mixins, deferredData, deferredWatch) {
  for (let i = 0; i < mixins.length; i++) {
    applyOptions(instance, mixins[i], deferredData, deferredWatch, true);
  }
}
function resolveData(instance, dataFn, publicThis) {
  if (false) {
    warn(\`The data option must be a function. Plain object usage is no longer supported.\`);
  }
  const data = dataFn.call(publicThis, publicThis);
  if (false) {
    warn(\`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.\`);
  }
  if (!isObject(data)) {
    false;
  } else if (instance.data === EMPTY_OBJ) {
    instance.data = reactive(data);
  } else {
    extend(instance.data, data);
  }
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(\\".\\") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      watch(getter, handler);
    } else if (false) {
      warn(\`Invalid watch handler specified by key \\"\${raw}\\"\`, handler);
    }
  } else if (isFunction(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject(raw)) {
    if (isArray(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      } else if (false) {
        warn(\`Invalid watch handler specified by key \\"\${raw.handler}\\"\`, handler);
      }
    }
  } else if (false) {
    warn(\`Invalid watch option: \\"\${key}\\"\`, raw);
  }
}
function createPathGetter(ctx, path) {
  const segments = path.split(\\".\\");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function resolveMergedOptions(instance) {
  const raw = instance.type;
  const {__merged, mixins, extends: extendsOptions} = raw;
  if (__merged)
    return __merged;
  const globalMixins = instance.appContext.mixins;
  if (!globalMixins.length && !mixins && !extendsOptions)
    return raw;
  const options = {};
  globalMixins.forEach((m) => mergeOptions(options, m, instance));
  mergeOptions(options, raw, instance);
  return raw.__merged = options;
}
function mergeOptions(to, from, instance) {
  const strats = instance.appContext.config.optionMergeStrategies;
  const {mixins, extends: extendsOptions} = from;
  extendsOptions && mergeOptions(to, extendsOptions, instance);
  mixins && mixins.forEach((m) => mergeOptions(to, m, instance));
  for (const key in from) {
    if (strats && hasOwn(strats, key)) {
      to[key] = strats[key](to[key], from[key], instance.proxy, key);
    } else {
      to[key] = from[key];
    }
  }
}
var publicPropertiesMap = extend(Object.create(null), {
  $: (i) => i,
  $el: (i) => i.vnode.el,
  $data: (i) => i.data,
  $props: (i) => false ? shallowReadonly(i.props) : i.props,
  $attrs: (i) => false ? shallowReadonly(i.attrs) : i.attrs,
  $slots: (i) => false ? shallowReadonly(i.slots) : i.slots,
  $refs: (i) => false ? shallowReadonly(i.refs) : i.refs,
  $parent: (i) => i.parent && i.parent.proxy,
  $root: (i) => i.root && i.root.proxy,
  $emit: (i) => i.emit,
  $options: (i) => __VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type,
  $forceUpdate: (i) => () => queueJob(i.update),
  $nextTick: () => nextTick,
  $watch: (i) => __VUE_OPTIONS_API__ ? instanceWatch.bind(i) : NOOP
});
var PublicInstanceProxyHandlers = {
  get({_: instance}, key) {
    const {ctx, setupState, data, props, accessCache, type, appContext} = instance;
    if (key === \\"__v_skip\\") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== \\"$\\") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 0:
            return setupState[key];
          case 1:
            return data[key];
          case 3:
            return ctx[key];
          case 2:
            return props[key];
        }
      } else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
        accessCache[key] = 0;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 1;
        return data[key];
      } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)) {
        accessCache[key] = 2;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 3;
        return ctx[key];
      } else if (!__VUE_OPTIONS_API__ || !isInBeforeCreate) {
        accessCache[key] = 4;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === \\"$attrs\\") {
        track(instance, \\"get\\", key);
        false;
      }
      return publicGetter(instance);
    } else if ((cssModule = type.__cssModules) && (cssModule = cssModule[key])) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 3;
      return ctx[key];
    } else if (globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)) {
      return globalProperties[key];
    } else if (false) {
      if (data !== EMPTY_OBJ && (key[0] === \\"$\\" || key[0] === \\"_\\") && hasOwn(data, key)) {
        warn(\`Property \${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character (\\"$\\" or \\"_\\") and is not proxied on the render context.\`);
      } else {
        warn(\`Property \${JSON.stringify(key)} was accessed during render but is not defined on instance.\`);
      }
    }
  },
  set({_: instance}, key, value) {
    const {data, setupState, ctx} = instance;
    if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
      setupState[key] = value;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value;
    } else if (key in instance.props) {
      false;
      return false;
    }
    if (key[0] === \\"$\\" && key.slice(1) in instance) {
      false;
      return false;
    } else {
      if (false) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({_: {data, setupState, accessCache, ctx, appContext, propsOptions}}, key) {
    let normalizedProps;
    return accessCache[key] !== void 0 || data !== EMPTY_OBJ && hasOwn(data, key) || setupState !== EMPTY_OBJ && hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  }
};
if (false) {
  PublicInstanceProxyHandlers.ownKeys = (target) => {
    warn(\`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.\`);
    return Reflect.ownKeys(target);
  };
}
var RuntimeCompiledPublicInstanceProxyHandlers = extend({}, PublicInstanceProxyHandlers, {
  get(target, key) {
    if (key === Symbol.unscopables) {
      return;
    }
    return PublicInstanceProxyHandlers.get(target, key, target);
  },
  has(_, key) {
    const has2 = key[0] !== \\"_\\" && !isGloballyWhitelisted(key);
    if (false) {
      warn(\`Property \${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.\`);
    }
    return has2;
  }
});
var emptyAppContext = createAppContext();
var uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$1++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    next: null,
    subTree: null,
    update: null,
    render: null,
    proxy: null,
    withProxy: null,
    effects: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    components: null,
    directives: null,
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    emit: null,
    emitted: null,
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null
  };
  if (false) {
    instance.ctx = createRenderContext(instance);
  } else {
    instance.ctx = {_: instance};
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (__VUE_PROD_DEVTOOLS__) {
    devtoolsComponentAdded(instance);
  }
  return instance;
}
var currentInstance = null;
var getCurrentInstance = () => currentInstance || currentRenderingInstance;
var setCurrentInstance = (instance) => {
  currentInstance = instance;
};
var isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const {props, children, shapeFlag} = instance.vnode;
  const isStateful = shapeFlag & 4;
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  if (false) {
    if (Component.name) {
      validateComponentName(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i = 0; i < names.length; i++) {
        validateComponentName(names[i], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i = 0; i < names.length; i++) {
        validateDirectiveName(names[i]);
      }
    }
  }
  instance.accessCache = {};
  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
  if (false) {
    exposePropsOnRenderContext(instance);
  }
  const {setup} = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    currentInstance = instance;
    pauseTracking();
    const setupResult = callWithErrorHandling(setup, instance, 0, [false ? shallowReadonly(instance.props) : instance.props, setupContext]);
    resetTracking();
    currentInstance = null;
    if (isPromise(setupResult)) {
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult);
    }
  } else {
    finishComponentSetup(instance);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    instance.render = setupResult;
  } else if (isObject(setupResult)) {
    if (false) {
      warn(\`setup() should not return VNodes directly - return a render function instead.\`);
    }
    if (__VUE_PROD_DEVTOOLS__) {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs(setupResult);
    if (false) {
      exposeSetupStateOnRenderContext(instance);
    }
  } else if (false) {
    warn(\`setup() should return an object. Received: \${setupResult === null ? \\"null\\" : typeof setupResult}\`);
  }
  finishComponentSetup(instance);
}
var compile;
function registerRuntimeCompiler(_compile) {
  compile = _compile;
}
function finishComponentSetup(instance, isSSR) {
  const Component = instance.type;
  if (!instance.render) {
    if (compile && Component.template && !Component.render) {
      if (false) {
        startMeasure(instance, \`compile\`);
      }
      Component.render = compile(Component.template, {
        isCustomElement: instance.appContext.config.isCustomElement,
        delimiters: Component.delimiters
      });
      if (false) {
        endMeasure(instance, \`compile\`);
      }
    }
    instance.render = Component.render || NOOP;
    if (instance.render._rc) {
      instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
  }
  if (__VUE_OPTIONS_API__) {
    currentInstance = instance;
    applyOptions(instance, Component);
    currentInstance = null;
  }
  if (false) {
    if (!compile && Component.template) {
      warn(\`Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias \\"vue\\" to \\"vue/dist/vue.esm-bundler.js\\".\`);
    } else {
      warn(\`Component is missing template or render function.\`);
    }
  }
}
function createSetupContext(instance) {
  if (false) {
    return Object.freeze({
      get attrs() {
        return new Proxy(instance.attrs, attrHandlers);
      },
      get slots() {
        return shallowReadonly(instance.slots);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      }
    });
  } else {
    return {
      attrs: instance.attrs,
      slots: instance.slots,
      emit: instance.emit
    };
  }
}
function recordInstanceBoundEffect(effect2) {
  if (currentInstance) {
    (currentInstance.effects || (currentInstance.effects = [])).push(effect2);
  }
}
var classifyRE = /(?:^|[-_])(\\\\w)/g;
var classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, \\"\\");
function formatComponentName(instance, Component, isRoot = false) {
  let name = isFunction(Component) ? Component.displayName || Component.name : Component.name;
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\\\\\\\]+)\\\\.vue$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? \`App\` : \`Anonymous\`;
}
function isClassComponent(value) {
  return isFunction(value) && \\"__vccOpts\\" in value;
}
function computed2(getterOrOptions) {
  const c = computed(getterOrOptions);
  recordInstanceBoundEffect(c.effect);
  return c;
}
function defineComponent(options) {
  return isFunction(options) ? {setup: options, name: options.name} : options;
}
function defineAsyncComponent(source) {
  if (isFunction(source)) {
    source = {loader: source};
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (false) {
        warn(\`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.\`);
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === \\"Module\\")) {
        comp = comp.default;
      }
      if (false) {
        throw new Error(\`Invalid async component load result: \${comp}\`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent({
    __asyncLoader: load,
    name: \\"AsyncComponentWrapper\\",
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(err, instance, 13, !errorComponent);
      };
      if (suspensible && instance.suspense || false) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded.value && !error.value) {
            const err = new Error(\`Async component timed out after \${timeout}ms.\`);
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded.value = true;
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, {vnode: {props, children}}) {
  return createVNode(comp, props, children);
}
function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
var ssrContextKey = Symbol(false ? \`ssrContext\` : \`\`);
var useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    if (!ctx) {
      warn(\`Server rendering context not provided. Make sure to only call useSsrContext() conditionally in the server build.\`);
    }
    return ctx;
  }
};
function renderList(source, renderItem) {
  let ret;
  if (isArray(source) || isString(source)) {
    ret = new Array(source.length);
    for (let i = 0, l = source.length; i < l; i++) {
      ret[i] = renderItem(source[i], i);
    }
  } else if (typeof source === \\"number\\") {
    ret = new Array(source);
    for (let i = 0; i < source; i++) {
      ret[i] = renderItem(i + 1, i);
    }
  } else if (isObject(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, renderItem);
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i = 0, l = keys.length; i < l; i++) {
        const key = keys[i];
        ret[i] = renderItem(source[key], key, i);
      }
    }
  } else {
    ret = [];
  }
  return ret;
}
function toHandlers(obj) {
  const ret = {};
  if (false) {
    warn(\`v-on with no argument expects an object value.\`);
    return ret;
  }
  for (const key in obj) {
    ret[\`on\${capitalize(key)}\`] = obj[key];
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i = 0; i < dynamicSlots.length; i++) {
    const slot = dynamicSlots[i];
    if (isArray(slot)) {
      for (let j = 0; j < slot.length; j++) {
        slots[slot[j].name] = slot[j].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.fn;
    }
  }
  return slots;
}
var version = \\"3.0.0\\";
var ssrUtils = null;
// ../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var svgNS = \\"http://www.w3.org/2000/svg\\";
var doc = typeof document !== \\"undefined\\" ? document : null;
var tempContainer;
var tempSVGContainer;
var nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is) => isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {is} : void 0),
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, \\"\\");
  },
  cloneNode(el) {
    return el.cloneNode(true);
  },
  insertStaticContent(content, parent, anchor, isSVG) {
    const temp = isSVG ? tempSVGContainer || (tempSVGContainer = doc.createElementNS(svgNS, \\"svg\\")) : tempContainer || (tempContainer = doc.createElement(\\"div\\"));
    temp.innerHTML = content;
    const first = temp.firstChild;
    let node = first;
    let last = node;
    while (node) {
      last = node;
      nodeOps.insert(node, parent, anchor);
      node = temp.firstChild;
    }
    return [first, last];
  }
};
function patchClass(el, value, isSVG) {
  if (value == null) {
    value = \\"\\";
  }
  if (isSVG) {
    el.setAttribute(\\"class\\", value);
  } else {
    const transitionClasses = el._vtc;
    if (transitionClasses) {
      value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(\\" \\");
    }
    el.className = value;
  }
}
function patchStyle(el, prev, next) {
  const style = el.style;
  if (!next) {
    el.removeAttribute(\\"style\\");
  } else if (isString(next)) {
    if (prev !== next) {
      style.cssText = next;
    }
  } else {
    for (const key in next) {
      setStyle(style, key, next[key]);
    }
    if (prev && !isString(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style, key, \\"\\");
        }
      }
    }
  }
}
var importantRE = /\\\\s*!important$/;
function setStyle(style, name, val) {
  if (isArray(val)) {
    val.forEach((v) => setStyle(style, name, v));
  } else {
    if (name.startsWith(\\"--\\")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(hyphenate(prefixed), val.replace(importantRE, \\"\\"), \\"important\\");
      } else {
        style[prefixed] = val;
      }
    }
  }
}
var prefixes = [\\"Webkit\\", \\"Moz\\", \\"ms\\"];
var prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== \\"filter\\" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
var xlinkNS = \\"http://www.w3.org/1999/xlink\\";
function patchAttr(el, key, value, isSVG) {
  if (isSVG && key.startsWith(\\"xlink:\\")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean = isSpecialBooleanAttr(key);
    if (value == null || isBoolean && value === false) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean ? \\"\\" : value);
    }
  }
}
function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === \\"innerHTML\\" || key === \\"textContent\\") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value == null ? \\"\\" : value;
    return;
  }
  if (key === \\"value\\" && el.tagName !== \\"PROGRESS\\") {
    el._value = value;
    const newValue = value == null ? \\"\\" : value;
    if (el.value !== newValue) {
      el.value = newValue;
    }
    return;
  }
  if (value === \\"\\" && typeof el[key] === \\"boolean\\") {
    el[key] = true;
  } else if (value == null && typeof el[key] === \\"string\\") {
    el[key] = \\"\\";
    el.removeAttribute(key);
  } else {
    try {
      el[key] = value;
    } catch (e) {
      if (false) {
        warn(\`Failed setting prop \\"\${key}\\" on <\${el.tagName.toLowerCase()}>: value \${value} is invalid.\`, e);
      }
    }
  }
}
var _getNow = Date.now;
if (typeof document !== \\"undefined\\" && _getNow() > document.createEvent(\\"Event\\").timeStamp) {
  _getNow = () => performance.now();
}
var cachedNow = 0;
var p = Promise.resolve();
var reset = () => {
  cachedNow = 0;
};
var getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
var optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m;
    while (m = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  return [name.slice(2).toLowerCase(), options];
}
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    const timeStamp = e.timeStamp || _getNow();
    if (timeStamp >= invoker.attached - 1) {
      callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
    }
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value) {
  if (isArray(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map((fn) => (e2) => !e2._stopped && fn(e2));
  } else {
    return value;
  }
}
var nativeOnRE = /^on[a-z]/;
var forcePatchProp = (_, key) => key === \\"value\\";
var patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  switch (key) {
    case \\"class\\":
      patchClass(el, nextValue, isSVG);
      break;
    case \\"style\\":
      patchStyle(el, prevValue, nextValue);
      break;
    default:
      if (isOn(key)) {
        if (!isModelListener(key)) {
          patchEvent(el, key, prevValue, nextValue, parentComponent);
        }
      } else if (shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
      } else {
        if (key === \\"true-value\\") {
          el._trueValue = nextValue;
        } else if (key === \\"false-value\\") {
          el._falseValue = nextValue;
        }
        patchAttr(el, key, nextValue, isSVG);
      }
      break;
  }
};
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === \\"innerHTML\\") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction(value)) {
      return true;
    }
    return false;
  }
  if (key === \\"spellcheck\\" || key === \\"draggable\\") {
    return false;
  }
  if (key === \\"form\\" && typeof value === \\"string\\") {
    return false;
  }
  if (key === \\"list\\" && el.tagName === \\"INPUT\\") {
    return false;
  }
  if (nativeOnRE.test(key) && isString(value)) {
    return false;
  }
  return key in el;
}
function useCssModule(name = \\"$style\\") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
      false;
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
      false;
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
      false;
      return EMPTY_OBJ;
    }
    return mod;
  }
}
function useCssVars(getter, scoped = false) {
  const instance = getCurrentInstance();
  if (!instance) {
    false;
    return;
  }
  const prefix = scoped && instance.type.__scopeId ? \`\${instance.type.__scopeId.replace(/^data-v-/, \\"\\")}-\` : \`\`;
  onMounted(() => {
    watchEffect(() => {
      setVarsOnVNode(instance.subTree, getter(instance.proxy), prefix);
    });
  });
}
function setVarsOnVNode(vnode, vars, prefix) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars, prefix);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    const style = vnode.el.style;
    for (const key in vars) {
      style.setProperty(\`--\${prefix}\${key}\`, unref(vars[key]));
    }
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c) => setVarsOnVNode(c, vars, prefix));
  }
}
var TRANSITION = \\"transition\\";
var ANIMATION = \\"animation\\";
var Transition = (props, {slots}) => h(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = \\"Transition\\";
var DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
var TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend({}, BaseTransition.props, DOMTransitionPropsValidators);
function resolveTransitionProps(rawProps) {
  let {name = \\"v\\", type, css = true, duration, enterFromClass = \`\${name}-enter-from\`, enterActiveClass = \`\${name}-enter-active\`, enterToClass = \`\${name}-enter-to\`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = \`\${name}-leave-from\`, leaveActiveClass = \`\${name}-leave-active\`, leaveToClass = \`\${name}-leave-to\`} = rawProps;
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (!css) {
    return baseProps;
  }
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled} = baseProps;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el, isAppear, done);
      hook && hook(el, resolve2);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!(hook && hook.length > 1)) {
          if (enterDuration) {
            setTimeout(resolve2, enterDuration);
          } else {
            whenTransitionEnds(el, type, resolve2);
          }
        }
      });
    };
  };
  return extend(baseProps, {
    onBeforeEnter(el) {
      onBeforeEnter && onBeforeEnter(el);
      addTransitionClass(el, enterActiveClass);
      addTransitionClass(el, enterFromClass);
    },
    onBeforeAppear(el) {
      onBeforeAppear && onBeforeAppear(el);
      addTransitionClass(el, appearActiveClass);
      addTransitionClass(el, appearFromClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      const resolve2 = () => finishLeave(el, done);
      addTransitionClass(el, leaveActiveClass);
      addTransitionClass(el, leaveFromClass);
      nextFrame(() => {
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!(onLeave && onLeave.length > 1)) {
          if (leaveDuration) {
            setTimeout(resolve2, leaveDuration);
          } else {
            whenTransitionEnds(el, type, resolve2);
          }
        }
      });
      onLeave && onLeave(el, resolve2);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      onEnterCancelled && onEnterCancelled(el);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      onAppearCancelled && onAppearCancelled(el);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      onLeaveCancelled && onLeaveCancelled(el);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  if (false)
    validateDuration(res);
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\\\\s+/).forEach((c) => c && el.classList.add(c));
  (el._vtc || (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\\\\s+/).forEach((c) => c && el.classList.remove(c));
  const {_vtc} = el;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
function whenTransitionEnds(el, expectedType, cb) {
  const {type, timeout, propCount} = getTransitionInfo(el, expectedType);
  if (!type) {
    return cb();
  }
  const endEvent = type + \\"end\\";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd);
    cb();
  };
  const onEnd = (e) => {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || \\"\\").split(\\", \\");
  const transitionDelays = getStyleProperties(TRANSITION + \\"Delay\\");
  const transitionDurations = getStyleProperties(TRANSITION + \\"Duration\\");
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(ANIMATION + \\"Delay\\");
  const animationDurations = getStyleProperties(ANIMATION + \\"Duration\\");
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\\\\b(transform|all)(,|$)/.test(styles[TRANSITION + \\"Property\\"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(\\",\\", \\".\\")) * 1e3;
}
function toRaw2(observed) {
  return observed && toRaw2(observed[\\"__v_raw\\"]) || observed;
}
var positionMap = new WeakMap();
var newPositionMap = new WeakMap();
var TransitionGroupImpl = {
  name: \\"TransitionGroup\\",
  props: /* @__PURE__ */ extend({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, {slots}) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || \`\${props.name || \\"v\\"}-move\`;
      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c) => {
        const el = c.el;
        const style = el.style;
        addTransitionClass(el, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = \\"\\";
        const cb = el._moveCb = (e) => {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(\\"transitionend\\", cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener(\\"transitionend\\", cb);
      });
    });
    return () => {
      const rawProps = toRaw2(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      const tag = rawProps.tag || Fragment;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.key != null) {
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
        } else if (false) {
          warn(\`<TransitionGroup> children must be keyed.\`);
        }
      }
      if (prevChildren) {
        for (let i = 0; i < prevChildren.length; i++) {
          const child = prevChildren[i];
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
var TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
  const el = c.el;
  if (el._moveCb) {
    el._moveCb();
  }
  if (el._enterCb) {
    el._enterCb();
  }
}
function recordPosition(c) {
  newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
  const oldPos = positionMap.get(c);
  const newPos = newPositionMap.get(c);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c.el.style;
    s.transform = s.webkitTransform = \`translate(\${dx}px,\${dy}px)\`;
    s.transitionDuration = \\"0s\\";
    return c;
  }
}
function forceReflow() {
  return document.body.offsetHeight;
}
function hasCSSTransform(el, root, moveClass) {
  const clone = el.cloneNode();
  if (el._vtc) {
    el._vtc.forEach((cls) => {
      cls.split(/\\\\s+/).forEach((c) => c && clone.classList.remove(c));
    });
  }
  moveClass.split(/\\\\s+/).forEach((c) => c && clone.classList.add(c));
  clone.style.display = \\"none\\";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone);
  const {hasTransform} = getTransitionInfo(clone);
  container.removeChild(clone);
  return hasTransform;
}
var getModelAssigner = (vnode) => {
  const fn = vnode.props[\\"onUpdate:modelValue\\"];
  return isArray(fn) ? (value) => invokeArrayFns(fn, value) : fn;
};
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  const target = e.target;
  if (target.composing) {
    target.composing = false;
    trigger2(target, \\"input\\");
  }
}
function trigger2(el, type) {
  const e = document.createEvent(\\"HTMLEvents\\");
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
var vModelText = {
  created(el, {value, modifiers: {lazy, trim, number}}, vnode) {
    el.value = value == null ? \\"\\" : value;
    el._assign = getModelAssigner(vnode);
    const castToNumber = number || el.type === \\"number\\";
    addEventListener(el, lazy ? \\"change\\" : \\"input\\", (e) => {
      if (e.target.composing)
        return;
      let domValue = el.value;
      if (trim) {
        domValue = domValue.trim();
      } else if (castToNumber) {
        domValue = toNumber(domValue);
      }
      el._assign(domValue);
    });
    if (trim) {
      addEventListener(el, \\"change\\", () => {
        el.value = el.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el, \\"compositionstart\\", onCompositionStart);
      addEventListener(el, \\"compositionend\\", onCompositionEnd);
      addEventListener(el, \\"change\\", onCompositionEnd);
    }
  },
  beforeUpdate(el, {value, modifiers: {trim, number}}, vnode) {
    el._assign = getModelAssigner(vnode);
    if (document.activeElement === el) {
      if (trim && el.value.trim() === value) {
        return;
      }
      if ((number || el.type === \\"number\\") && toNumber(el.value) === value) {
        return;
      }
    }
    const newValue = value == null ? \\"\\" : value;
    if (el.value !== newValue) {
      el.value = newValue;
    }
  }
};
var vModelCheckbox = {
  created(el, binding, vnode) {
    setChecked(el, binding, vnode);
    el._assign = getModelAssigner(vnode);
    addEventListener(el, \\"change\\", () => {
      const modelValue = el._modelValue;
      const elementValue = getValue(el);
      const checked = el.checked;
      const assign = el._assign;
      if (isArray(modelValue)) {
        const index = looseIndexOf(modelValue, elementValue);
        const found = index !== -1;
        if (checked && !found) {
          assign(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index, 1);
          assign(filtered);
        }
      } else if (isSet(modelValue)) {
        const found = modelValue.has(elementValue);
        if (checked && !found) {
          assign(modelValue.add(elementValue));
        } else if (!checked && found) {
          modelValue.delete(elementValue);
          assign(modelValue);
        }
      } else {
        assign(getCheckboxValue(el, checked));
      }
    });
  },
  beforeUpdate(el, binding, vnode) {
    el._assign = getModelAssigner(vnode);
    setChecked(el, binding, vnode);
  }
};
function setChecked(el, {value, oldValue}, vnode) {
  el._modelValue = value;
  if (isArray(value)) {
    el.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el.checked = looseHas(value, vnode.props.value);
  } else if (value !== oldValue) {
    el.checked = looseEqual(value, getCheckboxValue(el, true));
  }
}
var vModelRadio = {
  created(el, {value}, vnode) {
    el.checked = looseEqual(value, vnode.props.value);
    el._assign = getModelAssigner(vnode);
    addEventListener(el, \\"change\\", () => {
      el._assign(getValue(el));
    });
  },
  beforeUpdate(el, {value, oldValue}, vnode) {
    el._assign = getModelAssigner(vnode);
    if (value !== oldValue) {
      el.checked = looseEqual(value, vnode.props.value);
    }
  }
};
var vModelSelect = {
  created(el, binding, vnode) {
    addEventListener(el, \\"change\\", () => {
      const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map(getValue);
      el._assign(el.multiple ? selectedVal : selectedVal[0]);
    });
    el._assign = getModelAssigner(vnode);
  },
  mounted(el, {value}) {
    setSelected(el, value);
  },
  beforeUpdate(el, _binding, vnode) {
    el._assign = getModelAssigner(vnode);
  },
  updated(el, {value}) {
    setSelected(el, value);
  }
};
function setSelected(el, value) {
  const isMultiple = el.multiple;
  if (isMultiple && !isArray(value) && !isSet(value)) {
    false;
    return;
  }
  for (let i = 0, l = el.options.length; i < l; i++) {
    const option = el.options[i];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray(value)) {
        option.selected = looseIndexOf(value, optionValue) > -1;
      } else {
        option.selected = looseHas(value, optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        el.selectedIndex = i;
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return \\"_value\\" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key = checked ? \\"_trueValue\\" : \\"_falseValue\\";
  return key in el ? el[key] : checked;
}
var vModelDynamic = {
  created(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, \\"created\\");
  },
  mounted(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, \\"mounted\\");
  },
  beforeUpdate(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, \\"beforeUpdate\\");
  },
  updated(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, \\"updated\\");
  }
};
function callModelHook(el, binding, vnode, prevVNode, hook) {
  let modelToUse;
  switch (el.tagName) {
    case \\"SELECT\\":
      modelToUse = vModelSelect;
      break;
    case \\"TEXTAREA\\":
      modelToUse = vModelText;
      break;
    default:
      switch (vnode.props && vnode.props.type) {
        case \\"checkbox\\":
          modelToUse = vModelCheckbox;
          break;
        case \\"radio\\":
          modelToUse = vModelRadio;
          break;
        default:
          modelToUse = vModelText;
      }
  }
  const fn = modelToUse[hook];
  fn && fn(el, binding, vnode, prevVNode);
}
var systemModifiers = [\\"ctrl\\", \\"shift\\", \\"alt\\", \\"meta\\"];
var modifierGuards = {
  stop: (e) => e.stopPropagation(),
  prevent: (e) => e.preventDefault(),
  self: (e) => e.target !== e.currentTarget,
  ctrl: (e) => !e.ctrlKey,
  shift: (e) => !e.shiftKey,
  alt: (e) => !e.altKey,
  meta: (e) => !e.metaKey,
  left: (e) => \\"button\\" in e && e.button !== 0,
  middle: (e) => \\"button\\" in e && e.button !== 1,
  right: (e) => \\"button\\" in e && e.button !== 2,
  exact: (e, modifiers) => systemModifiers.some((m) => e[\`\${m}Key\`] && !modifiers.includes(m))
};
var withModifiers = (fn, modifiers) => {
  return (event, ...args) => {
    for (let i = 0; i < modifiers.length; i++) {
      const guard = modifierGuards[modifiers[i]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn(event, ...args);
  };
};
var keyNames = {
  esc: \\"escape\\",
  space: \\" \\",
  up: \\"arrow-up\\",
  left: \\"arrow-left\\",
  right: \\"arrow-right\\",
  down: \\"arrow-down\\",
  delete: \\"backspace\\"
};
var withKeys = (fn, modifiers) => {
  return (event) => {
    if (!(\\"key\\" in event))
      return;
    const eventKey = hyphenate(event.key);
    if (!modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
      return;
    }
    return fn(event);
  };
};
var vShow = {
  beforeMount(el, {value}, {transition}) {
    el._vod = el.style.display === \\"none\\" ? \\"\\" : el.style.display;
    if (transition && value) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value);
    }
  },
  mounted(el, {value}, {transition}) {
    if (transition && value) {
      transition.enter(el);
    }
  },
  updated(el, {value, oldValue}, {transition}) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value);
    }
  },
  beforeUnmount(el, {value}) {
    setDisplay(el, value);
  }
};
function setDisplay(el, value) {
  el.style.display = value ? el._vod : \\"none\\";
}
var rendererOptions = extend({patchProp, forcePatchProp}, nodeOps);
var renderer;
var enabledHydration = false;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
var render = (...args) => {
  ensureRenderer().render(...args);
};
var hydrate = (...args) => {
  ensureHydrationRenderer().hydrate(...args);
};
var createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  if (false) {
    injectNativeTagCheck(app);
  }
  const {mount} = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = \\"\\";
    const proxy = mount(container);
    container.removeAttribute(\\"v-cloak\\");
    container.setAttribute(\\"data-v-app\\", \\"\\");
    return proxy;
  };
  return app;
};
var createSSRApp = (...args) => {
  const app = ensureHydrationRenderer().createApp(...args);
  if (false) {
    injectNativeTagCheck(app);
  }
  const {mount} = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (container) {
      return mount(container, true);
    }
  };
  return app;
};
function normalizeContainer(container) {
  if (isString(container)) {
    const res = document.querySelector(container);
    if (false) {
      warn(\`Failed to mount app: mount target selector returned null.\`);
    }
    return res;
  }
  return container;
}
// node_modules/vue/dist/vue.runtime.esm-bundler.js
var compile2 = () => {
  if (false) {
    warn(\`Runtime compilation is not supported in this build of Vue. Configure your bundler to alias \\"vue\\" to \\"vue/dist/vue.esm-bundler.js\\".\`);
  }
};
export {
  BaseTransition,
  Comment,
  Fragment,
  KeepAlive,
  Static,
  Suspense,
  Teleport,
  Text,
  Transition,
  TransitionGroup,
  callWithAsyncErrorHandling,
  callWithErrorHandling,
  camelize,
  capitalize,
  cloneVNode,
  compile2 as compile,
  computed2 as computed,
  createApp,
  createBlock,
  createCommentVNode,
  createHydrationRenderer,
  createRenderer,
  createSSRApp,
  createSlots,
  createStaticVNode,
  createTextVNode,
  createVNode,
  customRef,
  defineAsyncComponent,
  defineComponent,
  devtools,
  getCurrentInstance,
  getTransitionRawChildren,
  h,
  handleError,
  hydrate,
  inject,
  isProxy,
  isReactive,
  isReadonly,
  isRef,
  isVNode,
  markRaw,
  mergeProps,
  nextTick,
  onActivated,
  onBeforeMount,
  onBeforeUnmount,
  onBeforeUpdate,
  onDeactivated,
  onErrorCaptured,
  onMounted,
  onRenderTracked,
  onRenderTriggered,
  onUnmounted,
  onUpdated,
  openBlock,
  popScopeId,
  provide,
  proxyRefs,
  pushScopeId,
  queuePostFlushCb,
  reactive,
  readonly,
  ref,
  registerRuntimeCompiler,
  render,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  resolveTransitionHooks,
  setBlockTracking,
  setDevtoolsHook,
  setTransitionHooks,
  shallowReactive,
  shallowReadonly,
  shallowRef,
  ssrContextKey,
  ssrUtils,
  toDisplayString,
  toHandlers,
  toRaw,
  toRef,
  toRefs,
  transformVNodeArgs,
  triggerRef,
  unref,
  useCssModule,
  useCssVars,
  useSSRContext,
  useTransitionState,
  vModelCheckbox,
  vModelDynamic,
  vModelRadio,
  vModelSelect,
  vModelText,
  vShow,
  version,
  warn,
  watch,
  watchEffect,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers,
  withScopeId
};
//# sourceMappingURL=vue.js.map"
`;

exports[`create-snowpack-app app-template-vue > build: _snowpack/pkg/vue.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/vue.js.map\\";"`;

exports[`create-snowpack-app app-template-vue > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/vue.js",
  "_snowpack/pkg/vue.js.map",
  "_snowpack/pkg/vue.js.map.proxy.js",
  "dist/App.vue.css",
  "dist/App.vue.css.proxy.js",
  "dist/App.vue.js",
  "dist/index.js",
  "favicon-32x32.png",
  "favicon.ico",
  "index.html",
  "logo.svg",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-vue > build: dist/App.vue.css 1`] = `
"
.App {
  text-align: center;
}
.App-header {
  background-color: #f9f6f6;
  color: #32485f;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
}
.App-link {
  color: #00c185;
}
.App-logo {
  height: 40vmin;
  pointer-events: none;
  margin-bottom: 1rem;
  animation: App-logo-spin infinite 1.6s ease-in-out alternate;
}
@keyframes App-logo-spin {
from {
    transform: scale(1);
}
to {
    transform: scale(1.06);
}
}"
`;

exports[`create-snowpack-app app-template-vue > build: dist/App.vue.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\".App {  text-align: center;}.App-header {  background-color: #f9f6f6;  color: #32485f;  min-height: 100vh;  display: flex;  flex-direction: column;  align-items: center;  justify-content: center;  font-size: calc(10px + 2vmin);}.App-link {  color: #00c185;}.App-logo {  height: 40vmin;  pointer-events: none;  margin-bottom: 1rem;  animation: App-logo-spin infinite 1.6s ease-in-out alternate;}@keyframes App-logo-spin {from {    transform: scale(1);}to {    transform: scale(1.06);}}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-vue > build: dist/App.vue.js 1`] = `
"import './App.vue.css.proxy.js';
const defaultExport = {
  data() {
    return {
      message: \\"Learn Vue\\"
    };
  }
};
import { createVNode as _createVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from \\"../_snowpack/pkg/vue.js\\"
const _hoisted_1 = { class: \\"App\\" }
const _hoisted_2 = { class: \\"App-header\\" }
const _hoisted_3 = /*#__PURE__*/_createVNode(\\"img\\", {
  src: \\"/logo.svg\\",
  class: \\"App-logo\\",
  alt: \\"logo\\"
}, null, -1)
const _hoisted_4 = /*#__PURE__*/_createVNode(\\"p\\", null, [
  /*#__PURE__*/_createTextVNode(\\" Edit \\"),
  /*#__PURE__*/_createVNode(\\"code\\", null, \\"src/App.vue\\"),
  /*#__PURE__*/_createTextVNode(\\" and save to reload. \\")
], -1)
const _hoisted_5 = {
  class: \\"App-link\\",
  href: \\"https://vuejs.org\\",
  target: \\"_blank\\",
  rel: \\"noopener noreferrer\\"
}
export function render(_ctx, _cache) {
  return (_openBlock(), _createBlock(\\"div\\", _hoisted_1, [
    _createVNode(\\"header\\", _hoisted_2, [
      _hoisted_3,
      _hoisted_4,
      _createVNode(\\"a\\", _hoisted_5, _toDisplayString(_ctx.message), 1)
    ])
  ]))
}
defaultExport.render = render
export default defaultExport"
`;

exports[`create-snowpack-app app-template-vue > build: dist/index.js 1`] = `
"import * as __SNOWPACK_ENV__ from '../_snowpack/env.js';
import.meta.env = __SNOWPACK_ENV__;
import {createApp} from '../_snowpack/pkg/vue.js';
import App from './App.vue.js';
const app = createApp(App);
app.mount('#app');
// Hot Module Replacement (HMR) - Remove this snippet to remove HMR.
// Learn more: https://www.snowpack.dev/concepts/hot-module-replacement
if (undefined /* [snowpack] import.meta.hot */ ) {
  undefined /* [snowpack] import.meta.hot */ .accept();
  undefined /* [snowpack] import.meta.hot */ .dispose(() => {
    app.unmount();
  });
}"
`;

exports[`create-snowpack-app app-template-vue > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" type=\\"image/png\\" sizes=\\"32x32\\" href=\\"/favicon-32x32.png\\">
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <div id=\\"app\\"></div>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: _snowpack/env.js 1`] = `
"export const MODE = \\"production\\";
export const NODE_ENV = \\"production\\";
export const SSR = false;"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: _snowpack/pkg/build-manifest.json 1`] = `
"{
  \\"inputs\\": {
    \\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\": {
      \\"bytes\\": 60514,
      \\"imports\\": []
    },
    \\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\": {
      \\"bytes\\": 19010,
      \\"imports\\": []
    },
    \\"node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\": {
      \\"bytes\\": 29128,
      \\"imports\\": [
        {
          \\"path\\": \\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\": {
      \\"bytes\\": 277977,
      \\"imports\\": [
        {
          \\"path\\": \\"node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\": {
      \\"bytes\\": 45605,
      \\"imports\\": [
        {
          \\"path\\": \\"node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\": {
      \\"bytes\\": 786,
      \\"imports\\": [
        {
          \\"path\\": \\"node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        },
        {
          \\"path\\": \\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    },
    \\"PKG/vue.js\\": {
      \\"bytes\\": 188,
      \\"imports\\": [
        {
          \\"path\\": \\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\",
          \\"kind\\": \\"import-statement\\"
        }
      ]
    }
  },
  \\"outputs\\": {
    \\"build/_snowpack/pkg/vue.js.map\\": {
      \\"imports\\": [],
      \\"exports\\": [],
      \\"inputs\\": {},
      \\"bytes\\": 512325
    },
    \\"build/_snowpack/pkg/vue.js\\": {
      \\"imports\\": [],
      \\"exports\\": [
        \\"BaseTransition\\",
        \\"Comment\\",
        \\"Fragment\\",
        \\"KeepAlive\\",
        \\"Static\\",
        \\"Suspense\\",
        \\"Teleport\\",
        \\"Text\\",
        \\"Transition\\",
        \\"TransitionGroup\\",
        \\"callWithAsyncErrorHandling\\",
        \\"callWithErrorHandling\\",
        \\"camelize\\",
        \\"capitalize\\",
        \\"cloneVNode\\",
        \\"compile\\",
        \\"computed\\",
        \\"createApp\\",
        \\"createBlock\\",
        \\"createCommentVNode\\",
        \\"createHydrationRenderer\\",
        \\"createRenderer\\",
        \\"createSSRApp\\",
        \\"createSlots\\",
        \\"createStaticVNode\\",
        \\"createTextVNode\\",
        \\"createVNode\\",
        \\"customRef\\",
        \\"defineAsyncComponent\\",
        \\"defineComponent\\",
        \\"defineEmit\\",
        \\"defineProps\\",
        \\"devtools\\",
        \\"getCurrentInstance\\",
        \\"getTransitionRawChildren\\",
        \\"h\\",
        \\"handleError\\",
        \\"hydrate\\",
        \\"initCustomFormatter\\",
        \\"inject\\",
        \\"isProxy\\",
        \\"isReactive\\",
        \\"isReadonly\\",
        \\"isRef\\",
        \\"isVNode\\",
        \\"markRaw\\",
        \\"mergeProps\\",
        \\"nextTick\\",
        \\"onActivated\\",
        \\"onBeforeMount\\",
        \\"onBeforeUnmount\\",
        \\"onBeforeUpdate\\",
        \\"onDeactivated\\",
        \\"onErrorCaptured\\",
        \\"onMounted\\",
        \\"onRenderTracked\\",
        \\"onRenderTriggered\\",
        \\"onUnmounted\\",
        \\"onUpdated\\",
        \\"openBlock\\",
        \\"popScopeId\\",
        \\"provide\\",
        \\"proxyRefs\\",
        \\"pushScopeId\\",
        \\"queuePostFlushCb\\",
        \\"reactive\\",
        \\"readonly\\",
        \\"ref\\",
        \\"registerRuntimeCompiler\\",
        \\"render\\",
        \\"renderList\\",
        \\"renderSlot\\",
        \\"resolveComponent\\",
        \\"resolveDirective\\",
        \\"resolveDynamicComponent\\",
        \\"resolveTransitionHooks\\",
        \\"setBlockTracking\\",
        \\"setDevtoolsHook\\",
        \\"setTransitionHooks\\",
        \\"shallowReactive\\",
        \\"shallowReadonly\\",
        \\"shallowRef\\",
        \\"ssrContextKey\\",
        \\"ssrUtils\\",
        \\"toDisplayString\\",
        \\"toHandlerKey\\",
        \\"toHandlers\\",
        \\"toRaw\\",
        \\"toRef\\",
        \\"toRefs\\",
        \\"transformVNodeArgs\\",
        \\"triggerRef\\",
        \\"unref\\",
        \\"useContext\\",
        \\"useCssModule\\",
        \\"useCssVars\\",
        \\"useSSRContext\\",
        \\"useTransitionState\\",
        \\"vModelCheckbox\\",
        \\"vModelDynamic\\",
        \\"vModelRadio\\",
        \\"vModelSelect\\",
        \\"vModelText\\",
        \\"vShow\\",
        \\"version\\",
        \\"warn\\",
        \\"watch\\",
        \\"watchEffect\\",
        \\"withCtx\\",
        \\"withDirectives\\",
        \\"withKeys\\",
        \\"withModifiers\\",
        \\"withScopeId\\"
      ],
      \\"inputs\\": {
        \\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\": {
          \\"bytesInOutput\\": 7213
        },
        \\"node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\": {
          \\"bytesInOutput\\": 20868
        },
        \\"node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\": {
          \\"bytesInOutput\\": 162525
        },
        \\"node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\": {
          \\"bytesInOutput\\": 31110
        },
        \\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\": {
          \\"bytesInOutput\\": 189
        },
        \\"PKG/vue.js\\": {
          \\"bytesInOutput\\": 0
        }
      },
      \\"bytes\\": 224033
    }
  }
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: _snowpack/pkg/build-manifest.json.proxy.js 1`] = `
"let json = {\\"inputs\\":{\\"../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js\\":{\\"bytes\\":60514,\\"imports\\":[]},\\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\":{\\"bytes\\":19010,\\"imports\\":[]},\\"node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\":{\\"bytes\\":29128,\\"imports\\":[{\\"path\\":\\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]},\\"node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\":{\\"bytes\\":277977,\\"imports\\":[{\\"path\\":\\"node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]},\\"node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\":{\\"bytes\\":45605,\\"imports\\":[{\\"path\\":\\"node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]},\\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\":{\\"bytes\\":786,\\"imports\\":[{\\"path\\":\\"node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"},{\\"path\\":\\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]},\\"PKG/vue.js\\":{\\"bytes\\":188,\\"imports\\":[{\\"path\\":\\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\",\\"kind\\":\\"import-statement\\"}]}},\\"outputs\\":{\\"build/_snowpack/pkg/vue.js.map\\":{\\"imports\\":[],\\"exports\\":[],\\"inputs\\":{},\\"bytes\\":512325},\\"build/_snowpack/pkg/vue.js\\":{\\"imports\\":[],\\"exports\\":[\\"BaseTransition\\",\\"Comment\\",\\"Fragment\\",\\"KeepAlive\\",\\"Static\\",\\"Suspense\\",\\"Teleport\\",\\"Text\\",\\"Transition\\",\\"TransitionGroup\\",\\"callWithAsyncErrorHandling\\",\\"callWithErrorHandling\\",\\"camelize\\",\\"capitalize\\",\\"cloneVNode\\",\\"compile\\",\\"computed\\",\\"createApp\\",\\"createBlock\\",\\"createCommentVNode\\",\\"createHydrationRenderer\\",\\"createRenderer\\",\\"createSSRApp\\",\\"createSlots\\",\\"createStaticVNode\\",\\"createTextVNode\\",\\"createVNode\\",\\"customRef\\",\\"defineAsyncComponent\\",\\"defineComponent\\",\\"defineEmit\\",\\"defineProps\\",\\"devtools\\",\\"getCurrentInstance\\",\\"getTransitionRawChildren\\",\\"h\\",\\"handleError\\",\\"hydrate\\",\\"initCustomFormatter\\",\\"inject\\",\\"isProxy\\",\\"isReactive\\",\\"isReadonly\\",\\"isRef\\",\\"isVNode\\",\\"markRaw\\",\\"mergeProps\\",\\"nextTick\\",\\"onActivated\\",\\"onBeforeMount\\",\\"onBeforeUnmount\\",\\"onBeforeUpdate\\",\\"onDeactivated\\",\\"onErrorCaptured\\",\\"onMounted\\",\\"onRenderTracked\\",\\"onRenderTriggered\\",\\"onUnmounted\\",\\"onUpdated\\",\\"openBlock\\",\\"popScopeId\\",\\"provide\\",\\"proxyRefs\\",\\"pushScopeId\\",\\"queuePostFlushCb\\",\\"reactive\\",\\"readonly\\",\\"ref\\",\\"registerRuntimeCompiler\\",\\"render\\",\\"renderList\\",\\"renderSlot\\",\\"resolveComponent\\",\\"resolveDirective\\",\\"resolveDynamicComponent\\",\\"resolveTransitionHooks\\",\\"setBlockTracking\\",\\"setDevtoolsHook\\",\\"setTransitionHooks\\",\\"shallowReactive\\",\\"shallowReadonly\\",\\"shallowRef\\",\\"ssrContextKey\\",\\"ssrUtils\\",\\"toDisplayString\\",\\"toHandlerKey\\",\\"toHandlers\\",\\"toRaw\\",\\"toRef\\",\\"toRefs\\",\\"transformVNodeArgs\\",\\"triggerRef\\",\\"unref\\",\\"useContext\\",\\"useCssModule\\",\\"useCssVars\\",\\"useSSRContext\\",\\"useTransitionState\\",\\"vModelCheckbox\\",\\"vModelDynamic\\",\\"vModelRadio\\",\\"vModelSelect\\",\\"vModelText\\",\\"vShow\\",\\"version\\",\\"warn\\",\\"watch\\",\\"watchEffect\\",\\"withCtx\\",\\"withDirectives\\",\\"withKeys\\",\\"withModifiers\\",\\"withScopeId\\"],\\"inputs\\":{\\"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\\":{\\"bytesInOutput\\":7213},\\"node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\\":{\\"bytesInOutput\\":20868},\\"node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\\":{\\"bytesInOutput\\":162525},\\"node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\\":{\\"bytesInOutput\\":31110},\\"node_modules/vue/dist/vue.runtime.esm-bundler.js\\":{\\"bytesInOutput\\":189},\\"PKG/vue.js\\":{\\"bytesInOutput\\":0}},\\"bytes\\":224033}}};
export default json;"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: _snowpack/pkg/import-map.json 1`] = `
"{
  \\"imports\\": {
    \\"vue\\": \\"./vue.js\\"
  }
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: _snowpack/pkg/vue.js 1`] = `
"// ../../node_modules/@vue/shared/dist/shared.esm-bundler.js
function makeMap(str, expectsLowerCase) {
  const map2 = Object.create(null);
  const list = str.split(\\",\\");
  for (let i = 0; i < list.length; i++) {
    map2[list[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
var PatchFlagNames = {
  [1]: \`TEXT\`,
  [2]: \`CLASS\`,
  [4]: \`STYLE\`,
  [8]: \`PROPS\`,
  [16]: \`FULL_PROPS\`,
  [32]: \`HYDRATE_EVENTS\`,
  [64]: \`STABLE_FRAGMENT\`,
  [128]: \`KEYED_FRAGMENT\`,
  [256]: \`UNKEYED_FRAGMENT\`,
  [512]: \`NEED_PATCH\`,
  [1024]: \`DYNAMIC_SLOTS\`,
  [2048]: \`DEV_ROOT_FRAGMENT\`,
  [-1]: \`HOISTED\`,
  [-2]: \`BAIL\`
};
var slotFlagsText = {
  [1]: \\"STABLE\\",
  [2]: \\"DYNAMIC\\",
  [3]: \\"FORWARDED\\"
};
var GLOBALS_WHITE_LISTED = \\"Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl\\";
var isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
var specialBooleanAttrs = \`itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly\`;
var isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
var isBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs + \`,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected\`);
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isObject(value)) {
    return value;
  }
}
var listDelimiterRE = /;(?![^(]*\\\\))/g;
var propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = \\"\\";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      res += normalizeClass(value[i]) + \\" \\";
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + \\" \\";
      }
    }
  }
  return res.trim();
}
function looseCompareArrays(a, b) {
  if (a.length !== b.length)
    return false;
  let equal = true;
  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }
  return equal;
}
function looseEqual(a, b) {
  if (a === b)
    return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isArray(a);
  bValidType = isArray(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject(a);
  bValidType = isObject(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
var toDisplayString = (val) => {
  return val == null ? \\"\\" : isObject(val) ? JSON.stringify(val, replacer, 2) : String(val);
};
var replacer = (_key, val) => {
  if (isMap(val)) {
    return {
      [\`Map(\${val.size})\`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[\`\${key} =>\`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [\`Set(\${val.size})\`]: [...val.values()]
    };
  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};
var EMPTY_OBJ = false ? Object.freeze({}) : {};
var EMPTY_ARR = false ? Object.freeze([]) : [];
var NOOP = () => {
};
var NO = () => false;
var onRE = /^on[^a-z]/;
var isOn = (key) => onRE.test(key);
var isModelListener = (key) => key.startsWith(\\"onUpdate:\\");
var extend = Object.assign;
var remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = (val, key) => hasOwnProperty.call(val, key);
var isArray = Array.isArray;
var isMap = (val) => toTypeString(val) === \\"[object Map]\\";
var isSet = (val) => toTypeString(val) === \\"[object Set]\\";
var isDate = (val) => val instanceof Date;
var isFunction = (val) => typeof val === \\"function\\";
var isString = (val) => typeof val === \\"string\\";
var isSymbol = (val) => typeof val === \\"symbol\\";
var isObject = (val) => val !== null && typeof val === \\"object\\";
var isPromise = (val) => {
  return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
var objectToString = Object.prototype.toString;
var toTypeString = (value) => objectToString.call(value);
var toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
var isPlainObject = (val) => toTypeString(val) === \\"[object Object]\\";
var isIntegerKey = (key) => isString(key) && key !== \\"NaN\\" && key[0] !== \\"-\\" && \\"\\" + parseInt(key, 10) === key;
var isReservedProp = /* @__PURE__ */ makeMap(\\",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted\\");
var cacheStringFunction = (fn) => {
  const cache = Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
var camelizeRE = /-(\\\\w)/g;
var camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \\"\\");
});
var hyphenateRE = /\\\\B([A-Z])/g;
var hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, \\"-$1\\").toLowerCase());
var capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
var toHandlerKey = cacheStringFunction((str) => str ? \`on\${capitalize(str)}\` : \`\`);
var hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);
var invokeArrayFns = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};
var def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
var toNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
var _globalThis;
var getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== \\"undefined\\" ? globalThis : typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : typeof global !== \\"undefined\\" ? global : {});
};
// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var targetMap = new WeakMap();
var effectStack = [];
var activeEffect;
var ITERATE_KEY = Symbol(false ? \\"iterate\\" : \\"\\");
var MAP_KEY_ITERATE_KEY = Symbol(false ? \\"Map key iterate\\" : \\"\\");
function isEffect(fn) {
  return fn && fn._isEffect === true;
}
function effect(fn, options = EMPTY_OBJ) {
  if (isEffect(fn)) {
    fn = fn.raw;
  }
  const effect2 = createReactiveEffect(fn, options);
  if (!options.lazy) {
    effect2();
  }
  return effect2;
}
function stop(effect2) {
  if (effect2.active) {
    cleanup(effect2);
    if (effect2.options.onStop) {
      effect2.options.onStop();
    }
    effect2.active = false;
  }
}
var uid = 0;
function createReactiveEffect(fn, options) {
  const effect2 = function reactiveEffect() {
    if (!effect2.active) {
      return options.scheduler ? void 0 : fn();
    }
    if (!effectStack.includes(effect2)) {
      cleanup(effect2);
      try {
        enableTracking();
        effectStack.push(effect2);
        activeEffect = effect2;
        return fn();
      } finally {
        effectStack.pop();
        resetTracking();
        activeEffect = effectStack[effectStack.length - 1];
      }
    }
  };
  effect2.id = uid++;
  effect2.allowRecurse = !!options.allowRecurse;
  effect2._isEffect = true;
  effect2.active = true;
  effect2.raw = fn;
  effect2.deps = [];
  effect2.options = options;
  return effect2;
}
function cleanup(effect2) {
  const {deps} = effect2;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect2);
    }
    deps.length = 0;
  }
}
var shouldTrack = true;
var trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function enableTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = true;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (!shouldTrack || activeEffect === void 0) {
    return;
  }
  let depsMap = targetMap.get(target);
  if (!depsMap) {
    targetMap.set(target, depsMap = new Map());
  }
  let dep = depsMap.get(key);
  if (!dep) {
    depsMap.set(key, dep = new Set());
  }
  if (!dep.has(activeEffect)) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
    if (false) {
      activeEffect.options.onTrack({
        effect: activeEffect,
        target,
        type,
        key
      });
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  const effects = new Set();
  const add2 = (effectsToAdd) => {
    if (effectsToAdd) {
      effectsToAdd.forEach((effect2) => {
        if (effect2 !== activeEffect || effect2.allowRecurse) {
          effects.add(effect2);
        }
      });
    }
  };
  if (type === \\"clear\\") {
    depsMap.forEach(add2);
  } else if (key === \\"length\\" && isArray(target)) {
    depsMap.forEach((dep, key2) => {
      if (key2 === \\"length\\" || key2 >= newValue) {
        add2(dep);
      }
    });
  } else {
    if (key !== void 0) {
      add2(depsMap.get(key));
    }
    switch (type) {
      case \\"add\\":
        if (!isArray(target)) {
          add2(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            add2(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          add2(depsMap.get(\\"length\\"));
        }
        break;
      case \\"delete\\":
        if (!isArray(target)) {
          add2(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            add2(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case \\"set\\":
        if (isMap(target)) {
          add2(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  const run = (effect2) => {
    if (false) {
      effect2.options.onTrigger({
        effect: effect2,
        target,
        key,
        type,
        newValue,
        oldValue,
        oldTarget
      });
    }
    if (effect2.options.scheduler) {
      effect2.options.scheduler(effect2);
    } else {
      effect2();
    }
  };
  effects.forEach(run);
}
var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
var get = /* @__PURE__ */ createGetter();
var shallowGet = /* @__PURE__ */ createGetter(false, true);
var readonlyGet = /* @__PURE__ */ createGetter(true);
var shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
var arrayInstrumentations = {};
[\\"includes\\", \\"indexOf\\", \\"lastIndexOf\\"].forEach((key) => {
  const method = Array.prototype[key];
  arrayInstrumentations[key] = function(...args) {
    const arr = toRaw(this);
    for (let i = 0, l = this.length; i < l; i++) {
      track(arr, \\"get\\", i + \\"\\");
    }
    const res = method.apply(arr, args);
    if (res === -1 || res === false) {
      return method.apply(arr, args.map(toRaw));
    } else {
      return res;
    }
  };
});
[\\"push\\", \\"pop\\", \\"shift\\", \\"unshift\\", \\"splice\\"].forEach((key) => {
  const method = Array.prototype[key];
  arrayInstrumentations[key] = function(...args) {
    pauseTracking();
    const res = method.apply(this, args);
    resetTracking();
    return res;
  };
});
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === \\"__v_isReactive\\") {
      return !isReadonly2;
    } else if (key === \\"__v_isReadonly\\") {
      return isReadonly2;
    } else if (key === \\"__v_raw\\" && receiver === (isReadonly2 ? readonlyMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray(target);
    if (!isReadonly2 && targetIsArray && hasOwn(arrayInstrumentations, key)) {
      return Reflect.get(arrayInstrumentations, key, receiver);
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : key === \`__proto__\` || key === \`__v_isRef\`) {
      return res;
    }
    if (!isReadonly2) {
      track(target, \\"get\\", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
      return shouldUnwrap ? res.value : res;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
var set = /* @__PURE__ */ createSetter();
var shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    const oldValue = target[key];
    if (!shallow) {
      value = toRaw(value);
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, \\"add\\", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, \\"set\\", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, \\"delete\\", key, void 0, oldValue);
  }
  return result;
}
function has(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, \\"has\\", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, \\"iterate\\", isArray(target) ? \\"length\\" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
var mutableHandlers = {
  get,
  set,
  deleteProperty,
  has,
  ownKeys
};
var readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    if (false) {
      console.warn(\`Set operation on key \\"\${String(key)}\\" failed: target is readonly.\`, target);
    }
    return true;
  },
  deleteProperty(target, key) {
    if (false) {
      console.warn(\`Delete operation on key \\"\${String(key)}\\" failed: target is readonly.\`, target);
    }
    return true;
  }
};
var shallowReactiveHandlers = extend({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
var shallowReadonlyHandlers = extend({}, readonlyHandlers, {
  get: shallowReadonlyGet
});
var toReactive = (value) => isObject(value) ? reactive(value) : value;
var toReadonly = (value) => isObject(value) ? readonly(value) : value;
var toShallow = (value) => value;
var getProto = (v) => Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly2 = false, isShallow = false) {
  target = target[\\"__v_raw\\"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, \\"get\\", key);
  }
  !isReadonly2 && track(rawTarget, \\"get\\", rawKey);
  const {has: has2} = getProto(rawTarget);
  const wrap = isReadonly2 ? toReadonly : isShallow ? toShallow : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  }
}
function has$1(key, isReadonly2 = false) {
  const target = this[\\"__v_raw\\"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, \\"has\\", key);
  }
  !isReadonly2 && track(rawTarget, \\"has\\", rawKey);
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target[\\"__v_raw\\"];
  !isReadonly2 && track(toRaw(target), \\"iterate\\", ITERATE_KEY);
  return Reflect.get(target, \\"size\\", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  target.add(value);
  if (!hadKey) {
    trigger(target, \\"add\\", value, value);
  }
  return this;
}
function set$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const {has: has2, get: get2} = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (false) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, \\"add\\", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, \\"set\\", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const {has: has2, get: get2} = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (false) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, \\"delete\\", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = false ? isMap(target) ? new Map(target) : new Set(target) : void 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, \\"clear\\", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed[\\"__v_raw\\"];
    const rawTarget = toRaw(target);
    const wrap = isReadonly2 ? toReadonly : isShallow ? toShallow : toReactive;
    !isReadonly2 && track(rawTarget, \\"iterate\\", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow) {
  return function(...args) {
    const target = this[\\"__v_raw\\"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === \\"entries\\" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === \\"keys\\" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isReadonly2 ? toReadonly : isShallow ? toShallow : toReactive;
    !isReadonly2 && track(rawTarget, \\"iterate\\", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const {value, done} = innerIterator.next();
        return done ? {value, done} : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    if (false) {
      const key = args[0] ? \`on key \\"\${args[0]}\\" \` : \`\`;
      console.warn(\`\${capitalize(type)} operation \${key}failed: target is readonly.\`, toRaw(this));
    }
    return type === \\"delete\\" ? false : this;
  };
}
var mutableInstrumentations = {
  get(key) {
    return get$1(this, key);
  },
  get size() {
    return size(this);
  },
  has: has$1,
  add,
  set: set$1,
  delete: deleteEntry,
  clear,
  forEach: createForEach(false, false)
};
var shallowInstrumentations = {
  get(key) {
    return get$1(this, key, false, true);
  },
  get size() {
    return size(this);
  },
  has: has$1,
  add,
  set: set$1,
  delete: deleteEntry,
  clear,
  forEach: createForEach(false, true)
};
var readonlyInstrumentations = {
  get(key) {
    return get$1(this, key, true);
  },
  get size() {
    return size(this, true);
  },
  has(key) {
    return has$1.call(this, key, true);
  },
  add: createReadonlyMethod(\\"add\\"),
  set: createReadonlyMethod(\\"set\\"),
  delete: createReadonlyMethod(\\"delete\\"),
  clear: createReadonlyMethod(\\"clear\\"),
  forEach: createForEach(true, false)
};
var iteratorMethods = [\\"keys\\", \\"values\\", \\"entries\\", Symbol.iterator];
iteratorMethods.forEach((method) => {
  mutableInstrumentations[method] = createIterableMethod(method, false, false);
  readonlyInstrumentations[method] = createIterableMethod(method, true, false);
  shallowInstrumentations[method] = createIterableMethod(method, false, true);
});
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === \\"__v_isReactive\\") {
      return !isReadonly2;
    } else if (key === \\"__v_isReadonly\\") {
      return isReadonly2;
    } else if (key === \\"__v_raw\\") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
var mutableCollectionHandlers = {
  get: createInstrumentationGetter(false, false)
};
var shallowCollectionHandlers = {
  get: createInstrumentationGetter(false, true)
};
var readonlyCollectionHandlers = {
  get: createInstrumentationGetter(true, false)
};
var reactiveMap = new WeakMap();
var readonlyMap = new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case \\"Object\\":
    case \\"Array\\":
      return 1;
    case \\"Map\\":
    case \\"Set\\":
    case \\"WeakMap\\":
    case \\"WeakSet\\":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value[\\"__v_skip\\"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (target && target[\\"__v_isReadonly\\"]) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers);
}
function shallowReadonly(target) {
  return createReactiveObject(target, true, shallowReadonlyHandlers, readonlyCollectionHandlers);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers) {
  if (!isObject(target)) {
    if (false) {
      console.warn(\`value cannot be made reactive: \${String(target)}\`);
    }
    return target;
  }
  if (target[\\"__v_raw\\"] && !(isReadonly2 && target[\\"__v_isReactive\\"])) {
    return target;
  }
  const proxyMap = isReadonly2 ? readonlyMap : reactiveMap;
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value[\\"__v_raw\\"]);
  }
  return !!(value && value[\\"__v_isReactive\\"]);
}
function isReadonly(value) {
  return !!(value && value[\\"__v_isReadonly\\"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  return observed && toRaw(observed[\\"__v_raw\\"]) || observed;
}
function markRaw(value) {
  def(value, \\"__v_skip\\", true);
  return value;
}
var convert = (val) => isObject(val) ? reactive(val) : val;
function isRef(r) {
  return Boolean(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value);
}
function shallowRef(value) {
  return createRef(value, true);
}
var RefImpl = class {
  constructor(_rawValue, _shallow = false) {
    this._rawValue = _rawValue;
    this._shallow = _shallow;
    this.__v_isRef = true;
    this._value = _shallow ? _rawValue : convert(_rawValue);
  }
  get value() {
    track(toRaw(this), \\"get\\", \\"value\\");
    return this._value;
  }
  set value(newVal) {
    if (hasChanged(toRaw(newVal), this._rawValue)) {
      this._rawValue = newVal;
      this._value = this._shallow ? newVal : convert(newVal);
      trigger(toRaw(this), \\"set\\", \\"value\\", newVal);
    }
  }
};
function createRef(rawValue, shallow = false) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
function triggerRef(ref2) {
  trigger(toRaw(ref2), \\"set\\", \\"value\\", false ? ref2.value : void 0);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
var shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
var CustomRefImpl = class {
  constructor(factory) {
    this.__v_isRef = true;
    const {get: get2, set: set2} = factory(() => track(this, \\"get\\", \\"value\\"), () => trigger(this, \\"set\\", \\"value\\"));
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
};
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  if (false) {
    console.warn(\`toRefs() expects a reactive object but received a plain one.\`);
  }
  const ret = isArray(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef(object, key);
  }
  return ret;
}
var ObjectRefImpl = class {
  constructor(_object, _key) {
    this._object = _object;
    this._key = _key;
    this.__v_isRef = true;
  }
  get value() {
    return this._object[this._key];
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
};
function toRef(object, key) {
  return isRef(object[key]) ? object[key] : new ObjectRefImpl(object, key);
}
var ComputedRefImpl = class {
  constructor(getter, _setter, isReadonly2) {
    this._setter = _setter;
    this._dirty = true;
    this.__v_isRef = true;
    this.effect = effect(getter, {
      lazy: true,
      scheduler: () => {
        if (!this._dirty) {
          this._dirty = true;
          trigger(toRaw(this), \\"set\\", \\"value\\");
        }
      }
    });
    this[\\"__v_isReadonly\\"] = isReadonly2;
  }
  get value() {
    if (this._dirty) {
      this._value = this.effect();
      this._dirty = false;
    }
    track(toRaw(this), \\"get\\", \\"value\\");
    return this._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
};
function computed(getterOrOptions) {
  let getter;
  let setter;
  if (isFunction(getterOrOptions)) {
    getter = getterOrOptions;
    setter = false ? () => {
      console.warn(\\"Write operation failed: computed value is readonly\\");
    } : NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  return new ComputedRefImpl(getter, setter, isFunction(getterOrOptions) || !getterOrOptions.set);
}
// node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var stack = [];
function warn(msg, ...args) {
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(appWarnHandler, instance, 11, [
      msg + args.join(\\"\\"),
      instance && instance.proxy,
      trace.map(({vnode}) => \`at <\${formatComponentName(instance, vnode.type)}>\`).join(\\"\\"),
      trace
    ]);
  } else {
    const warnArgs = [\`[Vue warn]: \${msg}\`, ...args];
    if (trace.length && true) {
      warnArgs.push(\`
\`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i) => {
    logs.push(...i === 0 ? [] : [\`
\`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({vnode, recurseCount}) {
  const postfix = recurseCount > 0 ? \`... (\${recurseCount} recursive calls)\` : \`\`;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = \` at <\${formatComponentName(vnode.component, vnode.type, isRoot)}\`;
  const close = \`>\` + postfix;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(\` ...\`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString(value)) {
    value = JSON.stringify(value);
    return raw ? value : [\`\${key}=\${value}\`];
  } else if (typeof value === \\"number\\" || typeof value === \\"boolean\\" || value == null) {
    return raw ? value : [\`\${key}=\${value}\`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [\`\${key}=Ref<\`, value, \`>\`];
  } else if (isFunction(value)) {
    return [\`\${key}=fn\${value.name ? \`<\${value.name}>\` : \`\`}\`];
  } else {
    value = toRaw(value);
    return raw ? value : [\`\${key}=\`, value];
  }
}
var ErrorTypeStrings = {
  [\\"bc\\"]: \\"beforeCreate hook\\",
  [\\"c\\"]: \\"created hook\\",
  [\\"bm\\"]: \\"beforeMount hook\\",
  [\\"m\\"]: \\"mounted hook\\",
  [\\"bu\\"]: \\"beforeUpdate hook\\",
  [\\"u\\"]: \\"updated\\",
  [\\"bum\\"]: \\"beforeUnmount hook\\",
  [\\"um\\"]: \\"unmounted hook\\",
  [\\"a\\"]: \\"activated hook\\",
  [\\"da\\"]: \\"deactivated hook\\",
  [\\"ec\\"]: \\"errorCaptured hook\\",
  [\\"rtc\\"]: \\"renderTracked hook\\",
  [\\"rtg\\"]: \\"renderTriggered hook\\",
  [0]: \\"setup function\\",
  [1]: \\"render function\\",
  [2]: \\"watcher getter\\",
  [3]: \\"watcher callback\\",
  [4]: \\"watcher cleanup function\\",
  [5]: \\"native event handler\\",
  [6]: \\"component event handler\\",
  [7]: \\"vnode hook\\",
  [8]: \\"directive hook\\",
  [9]: \\"transition hook\\",
  [10]: \\"app errorHandler\\",
  [11]: \\"app warnHandler\\",
  [12]: \\"ref function\\",
  [13]: \\"async component loader\\",
  [14]: \\"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next\\"
};
function callWithErrorHandling(fn, instance, type, args) {
  let res;
  try {
    res = args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
  if (isFunction(fn)) {
    const res = callWithErrorHandling(fn, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i = 0; i < fn.length; i++) {
    values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = false ? ErrorTypeStrings[type] : type;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  if (false) {
    const info = ErrorTypeStrings[type];
    if (contextVNode) {
      pushWarningContext(contextVNode);
    }
    warn(\`Unhandled error\${info ? \` during execution of \${info}\` : \`\`}\`);
    if (contextVNode) {
      popWarningContext();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  } else {
    console.error(err);
  }
}
var isFlushing = false;
var isFlushPending = false;
var queue = [];
var flushIndex = 0;
var pendingPreFlushCbs = [];
var activePreFlushCbs = null;
var preFlushIndex = 0;
var pendingPostFlushCbs = [];
var activePostFlushCbs = null;
var postFlushIndex = 0;
var resolvedPromise = Promise.resolve();
var currentFlushPromise = null;
var currentPreFlushParentJob = null;
function nextTick(fn) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
}
function queueJob(job) {
  if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
    queue.push(job);
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i = queue.indexOf(job);
  if (i > -1) {
    queue.splice(i, 1);
  }
}
function queueCb(cb, activeQueue, pendingQueue, index) {
  if (!isArray(cb)) {
    if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {
      pendingQueue.push(cb);
    }
  } else {
    pendingQueue.push(...cb);
  }
  queueFlush();
}
function queuePreFlushCb(cb) {
  queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
  queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
  if (pendingPreFlushCbs.length) {
    currentPreFlushParentJob = parentJob;
    activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
    pendingPreFlushCbs.length = 0;
    if (false) {
      seen = seen || new Map();
    }
    for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
      if (false) {
        checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex]);
      }
      activePreFlushCbs[preFlushIndex]();
    }
    activePreFlushCbs = null;
    preFlushIndex = 0;
    currentPreFlushParentJob = null;
    flushPreFlushCbs(seen, parentJob);
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    if (false) {
      seen = seen || new Map();
    }
    activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      if (false) {
        checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex]);
      }
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
var getId = (job) => job.id == null ? Infinity : job.id;
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  if (false) {
    seen = seen || new Map();
  }
  flushPreFlushCbs(seen);
  queue.sort((a, b) => getId(a) - getId(b));
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job) {
        if (false) {
          checkRecursiveUpdates(seen, job);
        }
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs(seen);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
var hmrDirtyComponents = new Set();
if (false) {
  const globalObject = typeof global !== \\"undefined\\" ? global : typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : {};
  globalObject.__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
  };
}
var map = new Map();
var devtools;
function setDevtoolsHook(hook) {
  devtools = hook;
}
function devtoolsInitApp(app, version2) {
  if (!devtools)
    return;
  devtools.emit(\\"app:init\\", app, version2, {
    Fragment,
    Text,
    Comment,
    Static
  });
}
function devtoolsUnmountApp(app) {
  if (!devtools)
    return;
  devtools.emit(\\"app:unmount\\", app);
}
var devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(\\"component:added\\");
var devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook(\\"component:updated\\");
var devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(\\"component:removed\\");
function createDevtoolsComponentHook(hook) {
  return (component) => {
    if (!devtools)
      return;
    devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0, component);
  };
}
function devtoolsComponentEmit(component, event, params) {
  if (!devtools)
    return;
  devtools.emit(\\"component:emit\\", component.appContext.app, component, event, params);
}
function emit(instance, event, ...rawArgs) {
  const props = instance.vnode.props || EMPTY_OBJ;
  if (false) {
    const {emitsOptions, propsOptions: [propsOptions]} = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions)) {
        if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {
          warn(\`Component emitted event \\"\${event}\\" but it is neither declared in the emits option nor as an \\"\${toHandlerKey(event)}\\" prop.\`);
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction(validator)) {
          const isValid = validator(...rawArgs);
          if (!isValid) {
            warn(\`Invalid event arguments: event validation failed for event \\"\${event}\\".\`);
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith(\\"update:\\");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = \`\${modelArg === \\"modelValue\\" ? \\"model\\" : modelArg}Modifiers\`;
    const {number, trim} = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a) => a.trim());
    } else if (number) {
      args = rawArgs.map(toNumber);
    }
  }
  if (__VUE_PROD_DEVTOOLS__) {
    devtoolsComponentEmit(instance, event, args);
  }
  if (false) {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
      warn(\`Event \\"\${lowerCaseEvent}\\" is emitted in component \${formatComponentName(instance, instance.type)} but the handler is registered for \\"\${event}\\". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use \\"\${hyphenate(event)}\\" instead of \\"\${event}\\".\`);
    }
  }
  let handlerName = toHandlerKey(camelize(event));
  let handler = props[handlerName];
  if (!handler && isModelListener2) {
    handlerName = toHandlerKey(hyphenate(event));
    handler = props[handlerName];
  }
  if (handler) {
    callWithAsyncErrorHandling(handler, instance, 6, args);
  }
  const onceHandler = props[handlerName + \`Once\`];
  if (onceHandler) {
    if (!instance.emitted) {
      (instance.emitted = {})[handlerName] = true;
    } else if (instance.emitted[handlerName]) {
      return;
    }
    callWithAsyncErrorHandling(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  if (!appContext.deopt && comp.__emits !== void 0) {
    return comp.__emits;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (__VUE_OPTIONS_API__ && !isFunction(comp)) {
    const extendEmits = (raw2) => {
      hasExtends = true;
      extend(normalized, normalizeEmitsOptions(raw2, appContext, true));
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    return comp.__emits = null;
  }
  if (isArray(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  return comp.__emits = normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, \\"\\");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
var currentRenderingInstance = null;
function setCurrentRenderingInstance(instance) {
  currentRenderingInstance = instance;
}
var accessedAttrs = false;
function renderComponentRoot(instance) {
  const {type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render: render2, renderCache, data, setupState, ctx} = instance;
  let result;
  currentRenderingInstance = instance;
  if (false) {
    accessedAttrs = false;
  }
  try {
    let fallthroughAttrs;
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render2.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render3 = Component;
      if (false) {
        markAttrsAccessed();
      }
      result = normalizeVNode(render3.length > 1 ? render3(props, false ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit: emit2
      } : {attrs, slots, emit: emit2}) : render3(props, null));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
    let root = result;
    let setRoot = void 0;
    if (false) {
      ;
      [root, setRoot] = getChildRoot(result);
    }
    if (Component.inheritAttrs !== false && fallthroughAttrs) {
      const keys = Object.keys(fallthroughAttrs);
      const {shapeFlag} = root;
      if (keys.length) {
        if (shapeFlag & 1 || shapeFlag & 6) {
          if (propsOptions && keys.some(isModelListener)) {
            fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
          }
          root = cloneVNode(root, fallthroughAttrs);
        } else if (false) {
          const allAttrs = Object.keys(attrs);
          const eventAttrs = [];
          const extraAttrs = [];
          for (let i = 0, l = allAttrs.length; i < l; i++) {
            const key = allAttrs[i];
            if (isOn(key)) {
              if (!isModelListener(key)) {
                eventAttrs.push(key[2].toLowerCase() + key.slice(3));
              }
            } else {
              extraAttrs.push(key);
            }
          }
          if (extraAttrs.length) {
            warn(\`Extraneous non-props attributes (\${extraAttrs.join(\\", \\")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.\`);
          }
          if (eventAttrs.length) {
            warn(\`Extraneous non-emits event listeners (\${eventAttrs.join(\\", \\")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the \\"emits\\" option.\`);
          }
        }
      }
    }
    if (vnode.dirs) {
      if (false) {
        warn(\`Runtime directive used on component with non-element root node. The directives will not function as intended.\`);
      }
      root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    if (vnode.transition) {
      if (false) {
        warn(\`Component inside <Transition> renders non-element root node that cannot be animated.\`);
      }
      root.transition = vnode.transition;
    }
    if (false) {
      setRoot(root);
    } else {
      result = root;
    }
  } catch (err) {
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  currentRenderingInstance = null;
  return result;
}
function filterSingleRoot(children) {
  let singleRoot;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (isVNode(child)) {
      if (child.type !== Comment || child.children === \\"v-if\\") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
var getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === \\"class\\" || key === \\"style\\" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
var filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const {props: prevProps, children: prevChildren, component} = prevVNode;
  const {props: nextProps, children: nextChildren, patchFlag} = nextVNode;
  const emits = component.emitsOptions;
  if (false) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({vnode, parent}, el) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el;
    parent = parent.parent;
  }
}
var isSuspense = (type) => type.__isSuspense;
var SuspenseImpl = {
  __isSuspense: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals);
    } else {
      patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, rendererInternals);
    }
  },
  hydrate: hydrateSuspense,
  create: createSuspenseBoundary
};
var Suspense = SuspenseImpl;
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals) {
  const {p: patch, o: {createElement}} = rendererInternals;
  const hiddenContainer = createElement(\\"div\\");
  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, optimized, rendererInternals);
  patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG);
  if (suspense.deps > 0) {
    patch(null, vnode.ssFallback, container, anchor, parentComponent, null, isSVG);
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve();
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, {p: patch, um: unmount, o: {createElement}}) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const {activeBranch, pendingBranch, isInFallback, isHydrating} = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG);
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG);
        setActiveBranch(suspense, newFallback);
      }
    } else {
      suspense.pendingId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement(\\"div\\");
      if (isInFallback) {
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG);
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG);
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG);
        suspense.resolve(true);
      } else {
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG);
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG);
      setActiveBranch(suspense, newBranch);
    } else {
      const onPending = n2.props && n2.props.onPending;
      if (isFunction(onPending)) {
        onPending();
      }
      suspense.pendingBranch = newBranch;
      suspense.pendingId++;
      patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG);
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const {timeout, pendingId} = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
var hasWarned = false;
function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, optimized, rendererInternals, isHydrating = false) {
  if (false) {
    hasWarned = true;
    console[console.info ? \\"info\\" : \\"log\\"](\`<Suspense> is an experimental feature and its API will likely change.\`);
  }
  const {p: patch, m: move, um: unmount, n: next, o: {parentNode, remove: remove2}} = rendererInternals;
  const timeout = toNumber(vnode.props && vnode.props.timeout);
  const suspense = {
    vnode,
    parent,
    parentComponent,
    isSVG,
    container,
    hiddenContainer,
    anchor,
    deps: 0,
    pendingId: 0,
    timeout: typeof timeout === \\"number\\" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: true,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false) {
      if (false) {
        if (!resume && !suspense.pendingBranch) {
          throw new Error(\`suspense.resolve() is called without a pending branch.\`);
        }
        if (suspense.isUnmounted) {
          throw new Error(\`suspense.resolve() is called on an already unmounted suspense boundary.\`);
        }
      }
      const {vnode: vnode2, activeBranch, pendingBranch, pendingId, effects, parentComponent: parentComponent2, container: container2} = suspense;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === \\"out-in\\";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(pendingBranch, container2, anchor2, 0);
            }
          };
        }
        let {anchor: anchor2} = suspense;
        if (activeBranch) {
          anchor2 = next(activeBranch);
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor2, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent2 = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent2) {
        if (parent2.pendingBranch) {
          parent2.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent2 = parent2.parent;
      }
      if (!hasUnresolvedAncestor) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      const onResolve = vnode2.props && vnode2.props.onResolve;
      if (isFunction(onResolve)) {
        onResolve();
      }
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const {vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2} = suspense;
      const onFallback = vnode2.props && vnode2.props.onFallback;
      if (isFunction(onFallback)) {
        onFallback();
      }
      const anchor2 = next(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(null, fallbackVNode, container2, anchor2, parentComponent2, null, isSVG2);
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === \\"out-in\\";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      unmount(activeBranch, parentComponent2, null, true);
      suspense.isInFallback = true;
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const {vnode: vnode2} = instance;
        if (false) {
          pushWarningContext(vnode2);
        }
        handleSetupResult(instance, asyncSetupResult);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(instance, vnode2, parentNode(hydratedEl || instance.subTree.el), hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        if (false) {
          popWarningContext();
        }
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
      }
      if (suspense.pendingBranch) {
        unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement(\\"div\\"), null, isSVG, optimized, rendererInternals, true);
  const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, optimized);
  if (suspense.deps === 0) {
    suspense.resolve();
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const {shapeFlag, children} = vnode;
  let content;
  let fallback;
  if (shapeFlag & 32) {
    content = normalizeSuspenseSlot(children.default);
    fallback = normalizeSuspenseSlot(children.fallback);
  } else {
    content = normalizeSuspenseSlot(children);
    fallback = normalizeVNode(null);
  }
  return {
    content,
    fallback
  };
}
function normalizeSuspenseSlot(s) {
  if (isFunction(s)) {
    s = s();
  }
  if (isArray(s)) {
    const singleChild = filterSingleRoot(s);
    if (false) {
      warn(\`<Suspense> slots expect a single root node.\`);
    }
    s = singleChild;
  }
  return normalizeVNode(s);
}
function queueEffectWithSuspense(fn, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray(fn)) {
      suspense.effects.push(...fn);
    } else {
      suspense.effects.push(fn);
    }
  } else {
    queuePostFlushCb(fn);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const {vnode, parentComponent} = suspense;
  const el = vnode.el = branch.el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el;
    updateHOCHostEl(parentComponent, el);
  }
}
var isRenderingCompiledSlot = 0;
var setCompiledSlotRendering = (n) => isRenderingCompiledSlot += n;
function renderSlot(slots, name, props = {}, fallback) {
  let slot = slots[name];
  if (false) {
    warn(\`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.\`);
    slot = () => [];
  }
  isRenderingCompiledSlot++;
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const rendered = createBlock(Fragment, {key: props.key || \`_\${name}\`}, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 ? 64 : -2);
  isRenderingCompiledSlot--;
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode(child))
      return true;
    if (child.type === Comment)
      return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
function withCtx(fn, ctx = currentRenderingInstance) {
  if (!ctx)
    return fn;
  const renderFnWithContext = (...args) => {
    if (!isRenderingCompiledSlot) {
      openBlock(true);
    }
    const owner = currentRenderingInstance;
    setCurrentRenderingInstance(ctx);
    const res = fn(...args);
    setCurrentRenderingInstance(owner);
    if (!isRenderingCompiledSlot) {
      closeBlock();
    }
    return res;
  };
  renderFnWithContext._c = true;
  return renderFnWithContext;
}
var currentScopeId = null;
var scopeIdStack = [];
function pushScopeId(id) {
  scopeIdStack.push(currentScopeId = id);
}
function popScopeId() {
  scopeIdStack.pop();
  currentScopeId = scopeIdStack[scopeIdStack.length - 1] || null;
}
function withScopeId(id) {
  return (fn) => withCtx(function() {
    pushScopeId(id);
    const res = fn.apply(this, arguments);
    popScopeId();
    return res;
  });
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  setFullProps(instance, rawProps, props, attrs);
  if (false) {
    validateProps(props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {props, attrs, vnode: {patchFlag}} = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  if ((optimized || patchFlag > 0) && !(patchFlag & 16)) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        const key = propsToUpdate[i];
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            attrs[key] = value;
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance);
          }
        } else {
          attrs[key] = value;
        }
      }
    }
  } else {
    setFullProps(instance, rawProps, props, attrs);
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || !hasOwn(rawProps, key) && ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(options, rawProps || EMPTY_OBJ, key, void 0, instance);
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key)) {
          delete attrs[key];
        }
      }
    }
  }
  trigger(instance, \\"set\\", \\"$attrs\\");
  if (false) {
    validateProps(props, instance);
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  if (rawProps) {
    for (const key in rawProps) {
      const value = rawProps[key];
      if (isReservedProp(key)) {
        continue;
      }
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        props[camelKey] = value;
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        attrs[key] = value;
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue(options, rawCurrentProps, key, rawCurrentProps[key], instance);
    }
  }
}
function resolvePropValue(options, props, key, value, instance) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, \\"default\\");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction(defaultValue)) {
        setCurrentInstance(instance);
        value = defaultValue(props);
        setCurrentInstance(null);
      } else {
        value = defaultValue;
      }
    }
    if (opt[0]) {
      if (!hasOwn(props, key) && !hasDefault) {
        value = false;
      } else if (opt[1] && (value === \\"\\" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  if (!appContext.deopt && comp.__props) {
    return comp.__props;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (__VUE_OPTIONS_API__ && !isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    return comp.__props = EMPTY_ARR;
  }
  if (isArray(raw)) {
    for (let i = 0; i < raw.length; i++) {
      if (false) {
        warn(\`props must be strings when using array syntax.\`, raw[i]);
      }
      const normalizedKey = camelize(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    if (false) {
      warn(\`invalid props options\`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray(opt) || isFunction(opt) ? {type: opt} : opt;
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[0] = booleanIndex > -1;
          prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, \\"default\\")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  return comp.__props = [normalized, needCastKeys];
}
function validatePropName(key) {
  if (key[0] !== \\"$\\") {
    return true;
  } else if (false) {
    warn(\`Invalid prop name: \\"\${key}\\" is a reserved property.\`);
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\\\\s*function (\\\\w+)/);
  return match ? match[1] : \\"\\";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray(expectedTypes)) {
    for (let i = 0, len = expectedTypes.length; i < len; i++) {
      if (isSameType(expectedTypes[i], type)) {
        return i;
      }
    }
  } else if (isFunction(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      setCurrentInstance(null);
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else if (false) {
    const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, \\"\\"));
    warn(\`\${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.\`);
  }
}
var createHook = (lifecycle) => (hook, target = currentInstance) => !isInSSRComponentSetup && injectHook(lifecycle, hook, target);
var onBeforeMount = createHook(\\"bm\\");
var onMounted = createHook(\\"m\\");
var onBeforeUpdate = createHook(\\"bu\\");
var onUpdated = createHook(\\"u\\");
var onBeforeUnmount = createHook(\\"bum\\");
var onUnmounted = createHook(\\"um\\");
var onRenderTriggered = createHook(\\"rtg\\");
var onRenderTracked = createHook(\\"rtc\\");
var onErrorCaptured = (hook, target = currentInstance) => {
  injectHook(\\"ec\\", hook, target);
};
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
var INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (false) {
    warn(\`\\\\\`watch(fn, options?)\\\\\` signature has been moved to a separate API. Use \\\\\`watchEffect(fn, options?)\\\\\` instead. \\\\\`watch\\\\\` now only supports \\\\\`watch(source, cb, options?) signature.\`);
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, {immediate, deep, flush, onTrack, onTrigger} = EMPTY_OBJ, instance = currentInstance) {
  if (false) {
    if (immediate !== void 0) {
      warn(\`watch() \\"immediate\\" option is only respected when using the watch(source, callback, options?) signature.\`);
    }
    if (deep !== void 0) {
      warn(\`watch() \\"deep\\" option is only respected when using the watch(source, callback, options?) signature.\`);
    }
  }
  const warnInvalidSource = (s) => {
    warn(\`Invalid watch source: \`, s, \`A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.\`);
  };
  let getter;
  let forceTrigger = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = !!source._shallow;
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray(source)) {
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return traverse(s);
      } else if (isFunction(s)) {
        return callWithErrorHandling(s, instance, 2);
      } else {
        false;
      }
    });
  } else if (isFunction(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup2) {
          cleanup2();
        }
        return callWithErrorHandling(source, instance, 3, [onInvalidate]);
      };
    }
  } else {
    getter = NOOP;
    false;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup2;
  const onInvalidate = (fn) => {
    cleanup2 = runner.options.onStop = () => {
      callWithErrorHandling(fn, instance, 4);
    };
  };
  let oldValue = isArray(source) ? [] : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!runner.active) {
      return;
    }
    if (cb) {
      const newValue = runner();
      if (deep || forceTrigger || hasChanged(newValue, oldValue)) {
        if (cleanup2) {
          cleanup2();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onInvalidate
        ]);
        oldValue = newValue;
      }
    } else {
      runner();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === \\"sync\\") {
    scheduler = job;
  } else if (flush === \\"post\\") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    scheduler = () => {
      if (!instance || instance.isMounted) {
        queuePreFlushCb(job);
      } else {
        job();
      }
    };
  }
  const runner = effect(getter, {
    lazy: true,
    onTrack,
    onTrigger,
    scheduler
  });
  recordInstanceBoundEffect(runner, instance);
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = runner();
    }
  } else if (flush === \\"post\\") {
    queuePostRenderEffect(runner, instance && instance.suspense);
  } else {
    runner();
  }
  return () => {
    stop(runner);
    if (instance) {
      remove(instance.effects, runner);
    }
  };
}
function instanceWatch(source, cb, options) {
  const publicThis = this.proxy;
  const getter = isString(source) ? () => publicThis[source] : source.bind(publicThis);
  return doWatch(getter, cb.bind(publicThis), options, this);
}
function traverse(value, seen = new Set()) {
  if (!isObject(value) || seen.has(value)) {
    return value;
  }
  seen.add(value);
  if (isRef(value)) {
    traverse(value.value, seen);
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], seen);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v) => {
      traverse(v, seen);
    });
  } else {
    for (const key in value) {
      traverse(value[key], seen);
    }
  }
  return value;
}
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
var TransitionHookValidator = [Function, Array];
var BaseTransitionImpl = {
  name: \`BaseTransition\`,
  props: {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    onBeforeEnter: TransitionHookValidator,
    onEnter: TransitionHookValidator,
    onAfterEnter: TransitionHookValidator,
    onEnterCancelled: TransitionHookValidator,
    onBeforeLeave: TransitionHookValidator,
    onLeave: TransitionHookValidator,
    onAfterLeave: TransitionHookValidator,
    onLeaveCancelled: TransitionHookValidator,
    onBeforeAppear: TransitionHookValidator,
    onAppear: TransitionHookValidator,
    onAfterAppear: TransitionHookValidator,
    onAppearCancelled: TransitionHookValidator
  },
  setup(props, {slots}) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      if (false) {
        warn(\\"<transition> can only be used on a single element or component. Use <transition-group> for lists.\\");
      }
      const rawProps = toRaw(props);
      const {mode} = rawProps;
      if (false) {
        warn(\`invalid <transition> mode: \${mode}\`);
      }
      const child = children[0];
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const {getTransitionKey} = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === \\"out-in\\") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            instance.update();
          };
          return emptyPlaceholder(child);
        } else if (mode === \\"in-out\\") {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el._leaveCb = () => {
              earlyRemove();
              el._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
var BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const {leavingVNodes} = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance) {
  const {appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled} = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook = (hook, args) => {
    hook && callWithAsyncErrorHandling(hook, instance, 9, args);
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el._leaveCb) {
        el._leaveCb(true);
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook(hook, [el]);
    },
    enter(el) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook(cancelHook, [el]);
        } else {
          callHook(afterHook, [el]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el._enterCb = void 0;
      };
      if (hook) {
        hook(el, done);
        if (hook.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    leave(el, remove2) {
      const key2 = String(vnode.key);
      if (el._enterCb) {
        el._enterCb(true);
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook(onBeforeLeave, [el]);
      let called = false;
      const done = el._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook(onLeaveCancelled, [el]);
        } else {
          callHook(onAfterLeave, [el]);
        }
        el._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        onLeave(el, done);
        if (onLeave.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren(child.children, keepComment));
    } else if (keepComment || child.type !== Comment) {
      ret.push(child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i = 0; i < ret.length; i++) {
      ret[i].patchFlag = -2;
    }
  }
  return ret;
}
var isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
var KeepAliveImpl = {
  name: \`KeepAlive\`,
  __isKeepAlive: true,
  inheritRef: true,
  props: {
    include: [String, RegExp, Array],
    exclude: [String, RegExp, Array],
    max: [String, Number]
  },
  setup(props, {slots}) {
    const cache = new Map();
    const keys = new Set();
    let current = null;
    const instance = getCurrentInstance();
    const parentSuspense = instance.suspense;
    const sharedContext = instance.ctx;
    const {renderer: {p: patch, m: move, um: _unmount, o: {createElement}}} = sharedContext;
    const storageContainer = createElement(\\"div\\");
    sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
      const instance2 = vnode.component;
      move(vnode, container, anchor, 0, parentSuspense);
      patch(instance2.vnode, vnode, container, anchor, instance2, parentSuspense, isSVG, optimized);
      queuePostRenderEffect(() => {
        instance2.isDeactivated = false;
        if (instance2.a) {
          invokeArrayFns(instance2.a);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
      }, parentSuspense);
    };
    sharedContext.deactivate = (vnode) => {
      const instance2 = vnode.component;
      move(vnode, storageContainer, null, 1, parentSuspense);
      queuePostRenderEffect(() => {
        if (instance2.da) {
          invokeArrayFns(instance2.da);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
        instance2.isDeactivated = true;
      }, parentSuspense);
    };
    function unmount(vnode) {
      resetShapeFlag(vnode);
      _unmount(vnode, instance, parentSuspense);
    }
    function pruneCache(filter) {
      cache.forEach((vnode, key) => {
        const name = getComponentName(vnode.type);
        if (name && (!filter || !filter(name))) {
          pruneCacheEntry(key);
        }
      });
    }
    function pruneCacheEntry(key) {
      const cached = cache.get(key);
      if (!current || cached.type !== current.type) {
        unmount(cached);
      } else if (current) {
        resetShapeFlag(current);
      }
      cache.delete(key);
      keys.delete(key);
    }
    watch(() => [props.include, props.exclude], ([include, exclude]) => {
      include && pruneCache((name) => matches(include, name));
      exclude && pruneCache((name) => !matches(exclude, name));
    }, {flush: \\"post\\", deep: true});
    let pendingCacheKey = null;
    const cacheSubtree = () => {
      if (pendingCacheKey != null) {
        cache.set(pendingCacheKey, getInnerChild(instance.subTree));
      }
    };
    onMounted(cacheSubtree);
    onUpdated(cacheSubtree);
    onBeforeUnmount(() => {
      cache.forEach((cached) => {
        const {subTree, suspense} = instance;
        const vnode = getInnerChild(subTree);
        if (cached.type === vnode.type) {
          resetShapeFlag(vnode);
          const da = vnode.component.da;
          da && queuePostRenderEffect(da, suspense);
          return;
        }
        unmount(cached);
      });
    });
    return () => {
      pendingCacheKey = null;
      if (!slots.default) {
        return null;
      }
      const children = slots.default();
      const rawVNode = children[0];
      if (children.length > 1) {
        if (false) {
          warn(\`KeepAlive should contain exactly one component child.\`);
        }
        current = null;
        return children;
      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
        current = null;
        return rawVNode;
      }
      let vnode = getInnerChild(rawVNode);
      const comp = vnode.type;
      const name = getComponentName(comp);
      const {include, exclude, max} = props;
      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
        current = vnode;
        return rawVNode;
      }
      const key = vnode.key == null ? comp : vnode.key;
      const cachedVNode = cache.get(key);
      if (vnode.el) {
        vnode = cloneVNode(vnode);
        if (rawVNode.shapeFlag & 128) {
          rawVNode.ssContent = vnode;
        }
      }
      pendingCacheKey = key;
      if (cachedVNode) {
        vnode.el = cachedVNode.el;
        vnode.component = cachedVNode.component;
        if (vnode.transition) {
          setTransitionHooks(vnode, vnode.transition);
        }
        vnode.shapeFlag |= 512;
        keys.delete(key);
        keys.add(key);
      } else {
        keys.add(key);
        if (max && keys.size > parseInt(max, 10)) {
          pruneCacheEntry(keys.values().next().value);
        }
      }
      vnode.shapeFlag |= 256;
      current = vnode;
      return rawVNode;
    };
  }
};
var KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
  if (isArray(pattern)) {
    return pattern.some((p2) => matches(p2, name));
  } else if (isString(pattern)) {
    return pattern.split(\\",\\").indexOf(name) > -1;
  } else if (pattern.test) {
    return pattern.test(name);
  }
  return false;
}
function onActivated(hook, target) {
  registerKeepAliveHook(hook, \\"a\\", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, \\"da\\", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(type, hook, keepAliveRoot, true);
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function resetShapeFlag(vnode) {
  let shapeFlag = vnode.shapeFlag;
  if (shapeFlag & 256) {
    shapeFlag -= 256;
  }
  if (shapeFlag & 512) {
    shapeFlag -= 512;
  }
  vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
var isInternalKey = (key) => key[0] === \\"_\\" || key === \\"$stable\\";
var normalizeSlotValue = (value) => isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
var normalizeSlot = (key, rawSlot, ctx) => withCtx((props) => {
  if (false) {
    warn(\`Slot \\"\${key}\\" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.\`);
  }
  return normalizeSlotValue(rawSlot(props));
}, ctx);
var normalizeObjectSlots = (rawSlots, slots) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction(value)) {
      slots[key] = normalizeSlot(key, value, ctx);
    } else if (value != null) {
      if (false) {
        warn(\`Non-function value encountered for slot \\"\${key}\\". Prefer function slots for better performance.\`);
      }
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
var normalizeVNodeSlots = (instance, children) => {
  if (false) {
    warn(\`Non-function value encountered for default slot. Prefer function slots for better performance.\`);
  }
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
var initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = children;
      def(children, \\"_\\", type);
    } else {
      normalizeObjectSlots(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
var updateSlots = (instance, children) => {
  const {vnode, slots} = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (false) {
        extend(slots, children);
      } else if (type === 1) {
        needDeletionCheck = false;
      } else {
        extend(slots, children);
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = {default: 1};
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function withDirectives(vnode, directives) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    false;
    return vnode;
  }
  const instance = internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i = 0; i < directives.length; i++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];
    if (isFunction(dir)) {
      dir = {
        mounted: dir,
        updated: dir
      };
    }
    bindings.push({
      dir,
      instance,
      value,
      oldValue: void 0,
      arg,
      modifiers
    });
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    const hook = binding.dir[name];
    if (hook) {
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
    }
  }
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      isCustomElement: NO,
      errorHandler: void 0,
      warnHandler: void 0
    },
    mixins: [],
    components: {},
    directives: {},
    provides: Object.create(null)
  };
}
var uid2 = 0;
function createAppAPI(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (rootProps != null && !isObject(rootProps)) {
      false;
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid2++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
        if (false) {
          warn(\`app.config cannot be replaced. Modify individual options instead.\`);
        }
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin)) {
          false;
        } else if (plugin && isFunction(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else if (false) {
          warn(\`A plugin must either be a function or an object with an \\"install\\" function.\`);
        }
        return app;
      },
      mixin(mixin) {
        if (__VUE_OPTIONS_API__) {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
            if (mixin.props || mixin.emits) {
              context.deopt = true;
            }
          } else if (false) {
            warn(\\"Mixin has already been applied to target app\\" + (mixin.name ? \`: \${mixin.name}\` : \\"\\"));
          }
        } else if (false) {
          warn(\\"Mixins are only available in builds supporting Options API\\");
        }
        return app;
      },
      component(name, component) {
        if (false) {
          validateComponentName(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (false) {
          warn(\`Component \\"\${name}\\" has already been registered in target app.\`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        if (false) {
          validateDirectiveName(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (false) {
          warn(\`Directive \\"\${name}\\" has already been registered in target app.\`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate) {
        if (!isMounted) {
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (false) {
            context.reload = () => {
              render2(cloneVNode(vnode), rootContainer);
            };
          }
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          if (__VUE_PROD_DEVTOOLS__) {
            devtoolsInitApp(app, version);
          }
          return vnode.component.proxy;
        } else if (false) {
          warn(\`App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \\\\\`const createMyApp = () => createApp(App)\\\\\`\`);
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          if (__VUE_PROD_DEVTOOLS__) {
            devtoolsUnmountApp(app);
          }
        } else if (false) {
          warn(\`Cannot unmount an app that is not mounted.\`);
        }
      },
      provide(key, value) {
        if (false) {
          warn(\`App already provides property with key \\"\${String(key)}\\". It will be overwritten with the new value.\`);
        }
        context.provides[key] = value;
        return app;
      }
    };
    return app;
  };
}
var hasMismatch = false;
var isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== \\"foreignObject\\";
var isComment = (node) => node.nodeType === 8;
function createHydrationFunctions(rendererInternals) {
  const {mt: mountComponent, p: patch, o: {patchProp: patchProp2, nextSibling, parentNode, remove: remove2, insert, createComment}} = rendererInternals;
  const hydrate2 = (vnode, container) => {
    if (false) {
      warn(\`Attempting to hydrate existing markup but container is empty. Performing full mount instead.\`);
      patch(null, vnode, container);
      return;
    }
    hasMismatch = false;
    hydrateNode(container.firstChild, vnode, null, null);
    flushPostFlushCbs();
    if (hasMismatch && true) {
      console.error(\`Hydration completed but contains mismatches.\`);
    }
  };
  const hydrateNode = (node, vnode, parentComponent, parentSuspense, optimized = false) => {
    const isFragmentStart = isComment(node) && node.data === \\"[\\";
    const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, isFragmentStart);
    const {type, ref: ref2, shapeFlag} = vnode;
    const domType = node.nodeType;
    vnode.el = node;
    let nextNode = null;
    switch (type) {
      case Text:
        if (domType !== 3) {
          nextNode = onMismatch();
        } else {
          if (node.data !== vnode.children) {
            hasMismatch = true;
            false;
            node.data = vnode.children;
          }
          nextNode = nextSibling(node);
        }
        break;
      case Comment:
        if (domType !== 8 || isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = nextSibling(node);
        }
        break;
      case Static:
        if (domType !== 1) {
          nextNode = onMismatch();
        } else {
          nextNode = node;
          const needToAdoptContent = !vnode.children.length;
          for (let i = 0; i < vnode.staticCount; i++) {
            if (needToAdoptContent)
              vnode.children += nextNode.outerHTML;
            if (i === vnode.staticCount - 1) {
              vnode.anchor = nextNode;
            }
            nextNode = nextSibling(nextNode);
          }
          return nextNode;
        }
        break;
      case Fragment:
        if (!isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, optimized);
        }
        break;
      default:
        if (shapeFlag & 1) {
          if (domType !== 1 || vnode.type !== node.tagName.toLowerCase()) {
            nextNode = onMismatch();
          } else {
            nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, optimized);
          }
        } else if (shapeFlag & 6) {
          const container = parentNode(node);
          const hydrateComponent = () => {
            mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
          };
          const loadAsync = vnode.type.__asyncLoader;
          if (loadAsync) {
            loadAsync().then(hydrateComponent);
          } else {
            hydrateComponent();
          }
          nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
        } else if (shapeFlag & 64) {
          if (domType !== 8) {
            nextNode = onMismatch();
          } else {
            nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, optimized, rendererInternals, hydrateChildren);
          }
        } else if (shapeFlag & 128) {
          nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), optimized, rendererInternals, hydrateNode);
        } else if (false) {
          warn(\\"Invalid HostVNode type:\\", type, \`(\${typeof type})\`);
        }
    }
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode);
    }
    return nextNode;
  };
  const hydrateElement = (el, vnode, parentComponent, parentSuspense, optimized) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const {props, patchFlag, shapeFlag, dirs} = vnode;
    if (patchFlag !== -1) {
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, \\"created\\");
      }
      if (props) {
        if (!optimized || (patchFlag & 16 || patchFlag & 32)) {
          for (const key in props) {
            if (!isReservedProp(key) && isOn(key)) {
              patchProp2(el, key, null, props[key]);
            }
          }
        } else if (props.onClick) {
          patchProp2(el, \\"onClick\\", null, props.onClick);
        }
      }
      let vnodeHooks;
      if (vnodeHooks = props && props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, \\"beforeMount\\");
      }
      if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
        queueEffectWithSuspense(() => {
          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, \\"mounted\\");
        }, parentSuspense);
      }
      if (shapeFlag & 16 && !(props && (props.innerHTML || props.textContent))) {
        let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, optimized);
        let hasWarned2 = false;
        while (next) {
          hasMismatch = true;
          if (false) {
            warn(\`Hydration children mismatch in <\${vnode.type}>: server rendered element contains more child nodes than client vdom.\`);
            hasWarned2 = true;
          }
          const cur = next;
          next = next.nextSibling;
          remove2(cur);
        }
      } else if (shapeFlag & 8) {
        if (el.textContent !== vnode.children) {
          hasMismatch = true;
          false;
          el.textContent = vnode.children;
        }
      }
    }
    return el.nextSibling;
  };
  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, optimized) => {
    optimized = optimized || !!parentVNode.dynamicChildren;
    const children = parentVNode.children;
    const l = children.length;
    let hasWarned2 = false;
    for (let i = 0; i < l; i++) {
      const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
      if (node) {
        node = hydrateNode(node, vnode, parentComponent, parentSuspense, optimized);
      } else {
        hasMismatch = true;
        if (false) {
          warn(\`Hydration children mismatch in <\${container.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.\`);
          hasWarned2 = true;
        }
        patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container));
      }
    }
    return node;
  };
  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, optimized) => {
    const container = parentNode(node);
    const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, optimized);
    if (next && isComment(next) && next.data === \\"]\\") {
      return nextSibling(vnode.anchor = next);
    } else {
      hasMismatch = true;
      insert(vnode.anchor = createComment(\`]\`), container, next);
      return next;
    }
  };
  const handleMismatch = (node, vnode, parentComponent, parentSuspense, isFragment) => {
    hasMismatch = true;
    false;
    vnode.el = null;
    if (isFragment) {
      const end = locateClosingAsyncAnchor(node);
      while (true) {
        const next2 = nextSibling(node);
        if (next2 && next2 !== end) {
          remove2(next2);
        } else {
          break;
        }
      }
    }
    const next = nextSibling(node);
    const container = parentNode(node);
    remove2(node);
    patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container));
    return next;
  };
  const locateClosingAsyncAnchor = (node) => {
    let match = 0;
    while (node) {
      node = nextSibling(node);
      if (node && isComment(node)) {
        if (node.data === \\"[\\")
          match++;
        if (node.data === \\"]\\") {
          if (match === 0) {
            return nextSibling(node);
          } else {
            match--;
          }
        }
      }
    }
    return node;
  };
  return [hydrate2, hydrateNode];
}
function initFeatureFlags() {
  let needWarn = false;
  if (typeof __VUE_OPTIONS_API__ !== \\"boolean\\") {
    needWarn = true;
    getGlobalThis().__VUE_OPTIONS_API__ = true;
  }
  if (typeof __VUE_PROD_DEVTOOLS__ !== \\"boolean\\") {
    needWarn = true;
    getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;
  }
  if (false) {
    console.warn(\`You are running the esm-bundler build of Vue. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle. See http://link.vuejs.org/feature-flags for more details.\`);
  }
}
function defineComponent(options) {
  return isFunction(options) ? {setup: options, name: options.name} : options;
}
var isAsyncWrapper = (i) => !!i.type.__asyncLoader;
function defineAsyncComponent(source) {
  if (isFunction(source)) {
    source = {loader: source};
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (false) {
        warn(\`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.\`);
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === \\"Module\\")) {
        comp = comp.default;
      }
      if (false) {
        throw new Error(\`Invalid async component load result: \${comp}\`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent({
    __asyncLoader: load,
    name: \\"AsyncComponentWrapper\\",
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(err, instance, 13, !errorComponent);
      };
      if (suspensible && instance.suspense || false) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded.value && !error.value) {
            const err = new Error(\`Async component timed out after \${timeout}ms.\`);
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded.value = true;
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, {vnode: {ref: ref2, props, children}}) {
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref2;
  return vnode;
}
var prodEffectOptions = {
  scheduler: queueJob,
  allowRecurse: true
};
var queuePostRenderEffect = queueEffectWithSuspense;
var setRef = (rawRef, oldRawRef, parentSuspense, vnode) => {
  if (isArray(rawRef)) {
    rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode));
    return;
  }
  let value;
  if (!vnode || isAsyncWrapper(vnode)) {
    value = null;
  } else {
    if (vnode.shapeFlag & 4) {
      value = vnode.component.exposed || vnode.component.proxy;
    } else {
      value = vnode.el;
    }
  }
  const {i: owner, r: ref2} = rawRef;
  if (false) {
    warn(\`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.\`);
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isString(ref2)) {
    const doSet = () => {
      refs[ref2] = value;
      if (hasOwn(setupState, ref2)) {
        setupState[ref2] = value;
      }
    };
    if (value) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isRef(ref2)) {
    const doSet = () => {
      ref2.value = value;
    };
    if (value) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isFunction(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value, refs]);
  } else if (false) {
    warn(\\"Invalid template ref type:\\", value, \`(\${typeof value})\`);
  }
};
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
  return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
  {
    initFeatureFlags();
  }
  const {insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, forcePatchProp: hostForcePatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent} = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, optimized = false) => {
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const {type, ref: ref2, shapeFlag} = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        } else if (false) {
          patchStaticNode(n1, n2, container, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);
        } else if (false) {
          warn(\\"Invalid VNode type:\\", type, \`(\${typeof type})\`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || \\"\\"), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
  };
  const patchStaticNode = (n1, n2, container, isSVG) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({el, anchor}, container, nextSibling) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({el, anchor}) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostRemove(el);
      el = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    isSVG = isSVG || n2.type === \\"svg\\";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    let el;
    let vnodeHook;
    const {type, props, shapeFlag, transition, scopeId, patchFlag, dirs} = vnode;
    if (vnode.el && hostCloneNode !== void 0 && patchFlag === -1) {
      el = vnode.el = hostCloneNode(vnode.el);
    } else {
      el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is);
      if (shapeFlag & 8) {
        hostSetElementText(el, vnode.children);
      } else if (shapeFlag & 16) {
        mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== \\"foreignObject\\", optimized || !!vnode.dynamicChildren);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, \\"created\\");
      }
      if (props) {
        for (const key in props) {
          if (!isReservedProp(key)) {
            hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
        if (vnodeHook = props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
      }
      setScopeId(el, scopeId, vnode, parentComponent);
    }
    if (__VUE_PROD_DEVTOOLS__) {
      Object.defineProperty(el, \\"__vnode\\", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el, \\"__vueParentComponent\\", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, \\"beforeMount\\");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, \\"mounted\\");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, scopeId, vnode, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (parentComponent) {
      const treeOwnerId = parentComponent.type.__scopeId;
      if (treeOwnerId && treeOwnerId !== scopeId) {
        hostSetScopeId(el, treeOwnerId + \\"-s\\");
      }
      let subTree = parentComponent.subTree;
      if (false) {
        subTree = filterSingleRoot(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        setScopeId(el, parentComponent.vnode.scopeId, parentComponent.vnode, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, optimized, start = 0) => {
    for (let i = start; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) => {
    const el = n2.el = n1.el;
    let {patchFlag, dynamicChildren, dirs} = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, \\"beforeUpdate\\");
    }
    if (false) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, \\"class\\", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, \\"style\\", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) {
              hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    const areChildrenSVG = isSVG && n2.type !== \\"foreignObject\\";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG);
      if (false) {
        traverseStaticChildren(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, \\"updated\\");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & 6 || oldVNode.shapeFlag & 64 ? hostParentNode(oldVNode.el) : fallbackContainer;
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, true);
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) {
          hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText(\\"\\");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText(\\"\\");
    let {patchFlag, dynamicChildren} = n2;
    if (patchFlag > 0) {
      optimized = true;
    }
    if (false) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG);
        if (false) {
          traverseStaticChildren(n1, n2);
        } else if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
          traverseStaticChildren(n1, n2, true);
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (false) {
      registerHMR(instance);
    }
    if (false) {
      pushWarningContext(initialVNode);
      startMeasure(instance, \`mount\`);
    }
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    if (false) {
      startMeasure(instance, \`init\`);
    }
    setupComponent(instance);
    if (false) {
      endMeasure(instance, \`init\`);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
    if (false) {
      popWarningContext();
      endMeasure(instance, \`mount\`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        if (false) {
          pushWarningContext(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        if (false) {
          popWarningContext();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.component = n1.component;
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    instance.update = effect(function componentEffect() {
      if (!instance.isMounted) {
        let vnodeHook;
        const {el, props} = initialVNode;
        const {bm, m, parent} = instance;
        if (bm) {
          invokeArrayFns(bm);
        }
        if (vnodeHook = props && props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        if (false) {
          startMeasure(instance, \`render\`);
        }
        const subTree = instance.subTree = renderComponentRoot(instance);
        if (false) {
          endMeasure(instance, \`render\`);
        }
        if (el && hydrateNode) {
          if (false) {
            startMeasure(instance, \`hydrate\`);
          }
          hydrateNode(initialVNode.el, subTree, instance, parentSuspense);
          if (false) {
            endMeasure(instance, \`hydrate\`);
          }
        } else {
          if (false) {
            startMeasure(instance, \`patch\`);
          }
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          if (false) {
            endMeasure(instance, \`patch\`);
          }
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (vnodeHook = props && props.onVnodeMounted) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(() => {
            invokeVNodeHook(vnodeHook, parent, scopedInitialVNode);
          }, parentSuspense);
        }
        const {a} = instance;
        if (a && initialVNode.shapeFlag & 256) {
          queuePostRenderEffect(a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let {next, bu, u, parent, vnode} = instance;
        let originNext = next;
        let vnodeHook;
        if (false) {
          pushWarningContext(next || instance.vnode);
        }
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        if (false) {
          startMeasure(instance, \`render\`);
        }
        const nextTree = renderComponentRoot(instance);
        if (false) {
          endMeasure(instance, \`render\`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        if (false) {
          startMeasure(instance, \`patch\`);
        }
        patch(prevTree, nextTree, hostParentNode(prevTree.el), getNextHostNode(prevTree), instance, parentSuspense, isSVG);
        if (false) {
          endMeasure(instance, \`patch\`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(() => {
            invokeVNodeHook(vnodeHook, parent, next, vnode);
          }, parentSuspense);
        }
        if (__VUE_PROD_DEVTOOLS__) {
          devtoolsComponentUpdated(instance);
        }
        if (false) {
          popWarningContext();
        }
      }
    }, false ? createDevEffectOptions(instance) : prodEffectOptions);
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children);
    flushPreFlushCbs(void 0, instance.update);
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const {patchFlag, shapeFlag} = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, \\"\\");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, optimized);
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG);
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          if (false) {
            warn(\`Duplicate keys found during update:\`, JSON.stringify(nextChild.key), \`Make sure keys are unique.\`);
          }
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++)
        newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG);
        } else if (moved) {
          if (j < 0 || i !== increasingNewIndexSequence[j]) {
            move(nextChild, container, anchor, 2);
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const {el, type, transition, children, shapeFlag} = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const {leave, delayLeave, afterLeave} = transition;
        const remove3 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs} = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, null);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    let vnodeHook;
    if (vnodeHook = props && props.onVnodeBeforeUnmount) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, \\"beforeUnmount\\");
      }
      if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment && (patchFlag & 128 || patchFlag & 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (shapeFlag & 64 && (doRemove || !isTeleportDisabled(vnode.props))) {
        vnode.type.remove(vnode, internals);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, \\"unmounted\\");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const {type, el, anchor, transition} = vnode;
    if (type === Fragment) {
      removeFragment(el, anchor);
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const {leave, delayLeave} = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (false) {
      unregisterHMR(instance);
    }
    const {bum, effects, update, subTree, um} = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    if (effects) {
      for (let i = 0; i < effects.length; i++) {
        stop(effects[i]);
      }
    }
    if (update) {
      stop(update);
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    if (__VUE_PROD_DEVTOOLS__) {
      devtoolsComponentRemoved(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i = start; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render2 = (vnode, container) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container);
    }
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI(render2, hydrate2)
  };
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray(ch1) && isArray(ch2)) {
    for (let i = 0; i < ch1.length; i++) {
      const c1 = ch1[i];
      let c2 = ch2[i];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i] = cloneIfMounted(ch2[i]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
      if (false) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i, j, u, v, c;
  const len = arr.length;
  for (i = 0; i < len; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = (u + v) / 2 | 0;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
var isTeleport = (type) => type.__isTeleport;
var isTeleportDisabled = (props) => props && (props.disabled || props.disabled === \\"\\");
var isTargetSVG = (target) => typeof SVGElement !== \\"undefined\\" && target instanceof SVGElement;
var resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString(targetSelector)) {
    if (!select) {
      false;
      return null;
    } else {
      const target = select(targetSelector);
      if (!target) {
        false;
      }
      return target;
    }
  } else {
    if (false) {
      warn(\`Invalid Teleport target: \${targetSelector}\`);
    }
    return targetSelector;
  }
};
var TeleportImpl = {
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals) {
    const {mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: {insert, querySelector, createText, createComment}} = internals;
    const disabled = isTeleportDisabled(n2.props);
    const {shapeFlag, children} = n2;
    if (n1 == null) {
      const placeholder = n2.el = false ? createComment(\\"teleport start\\") : createText(\\"\\");
      const mainAnchor = n2.anchor = false ? createComment(\\"teleport end\\") : createText(\\"\\");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText(\\"\\");
      if (target) {
        insert(targetAnchor, target);
        isSVG = isSVG || isTargetSVG(target);
      } else if (false) {
        warn(\\"Invalid Teleport target on mount:\\", target, \`(\${typeof target})\`);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, optimized);
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      isSVG = isSVG || isTargetSVG(target);
      if (n2.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG);
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG);
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(n2, container, mainAnchor, internals, 1);
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
          if (nextTarget) {
            moveTeleport(n2, nextTarget, null, internals, 0);
          } else if (false) {
            warn(\\"Invalid Teleport target on update:\\", target, \`(\${typeof target})\`);
          }
        } else if (wasDisabled) {
          moveTeleport(n2, target, targetAnchor, internals, 1);
        }
      }
    }
  },
  remove(vnode, {r: remove2, o: {remove: hostRemove}}) {
    const {shapeFlag, children, anchor} = vnode;
    hostRemove(anchor);
    if (shapeFlag & 16) {
      for (let i = 0; i < children.length; i++) {
        remove2(children[i]);
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, {o: {insert}, m: move}, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const {el, anchor, shapeFlag, children, props} = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, parentAnchor, 2);
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, optimized, {o: {nextSibling, parentNode, querySelector}}, hydrateChildren) {
  const target = vnode.target = resolveTarget(vnode.props, querySelector);
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, optimized);
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, optimized);
      }
      target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
    }
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
var Teleport = TeleportImpl;
var COMPONENTS = \\"components\\";
var DIRECTIVES = \\"directives\\";
function resolveComponent(name) {
  return resolveAsset(COMPONENTS, name) || name;
}
var NULL_DYNAMIC_COMPONENT = Symbol();
function resolveDynamicComponent(component) {
  if (isString(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      if (name === \`_self\`) {
        return Component;
      }
      const selfName = getComponentName(Component);
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component;
      }
    }
    const res = resolve(instance[type] || Component[type], name) || resolve(instance.appContext[type], name);
    if (false) {
      warn(\`Failed to resolve \${type.slice(0, -1)}: \${name}\`);
    }
    return res;
  } else if (false) {
    warn(\`resolve\${capitalize(type.slice(0, -1))} can only be used in render() or setup().\`);
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}
var Fragment = Symbol(false ? \\"Fragment\\" : void 0);
var Text = Symbol(false ? \\"Text\\" : void 0);
var Comment = Symbol(false ? \\"Comment\\" : void 0);
var Static = Symbol(false ? \\"Static\\" : void 0);
var blockStack = [];
var currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
var shouldTrack2 = 1;
function setBlockTracking(value) {
  shouldTrack2 += value;
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true);
  vnode.dynamicChildren = currentBlock || EMPTY_ARR;
  closeBlock();
  if (shouldTrack2 > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  if (false) {
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
var vnodeArgsTransformer;
function transformVNodeArgs(transformer) {
  vnodeArgsTransformer = transformer;
}
var InternalObjectKey = \`__vInternal\`;
var normalizeKey = ({key}) => key != null ? key : null;
var normalizeRef = ({ref: ref2}) => {
  return ref2 != null ? isString(ref2) || isRef(ref2) || isFunction(ref2) ? {i: currentRenderingInstance, r: ref2} : ref2 : null;
};
var createVNode = false ? createVNodeWithArgsTransform : _createVNode;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    if (false) {
      warn(\`Invalid vnode type when creating vnode: \${type}.\`);
    }
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(type, props, true);
    if (children) {
      normalizeChildren(cloned, children);
    }
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    if (isProxy(props) || InternalObjectKey in props) {
      props = extend({}, props);
    }
    let {class: klass, style} = props;
    if (klass && !isString(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject(style)) {
      if (isProxy(style) && !isArray(style)) {
        style = extend({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction(type) ? 2 : 0;
  if (false) {
    type = toRaw(type);
    warn(\`Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \\\\\`markRaw\\\\\` or using \\\\\`shallowRef\\\\\` instead of \\\\\`ref\\\\\`.\`, \`
Component that was made reactive: \`, type);
  }
  const vnode = {
    __v_isVNode: true,
    [\\"__v_skip\\"]: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    children: null,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null
  };
  if (false) {
    warn(\`VNode created with invalid key (NaN). VNode type:\`, vnode.type);
  }
  normalizeChildren(vnode, children);
  if (shapeFlag & 128) {
    const {content, fallback} = normalizeSuspenseChildren(vnode);
    vnode.ssContent = content;
    vnode.ssFallback = fallback;
  }
  if (shouldTrack2 > 0 && !isBlockNode && currentBlock && (patchFlag > 0 || shapeFlag & 6) && patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const {props, ref: ref2, patchFlag} = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  return {
    __v_isVNode: true,
    [\\"__v_skip\\"]: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref2,
    scopeId: vnode.scopeId,
    children: vnode.children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor
  };
}
function createTextVNode(text = \\" \\", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = \\"\\", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === \\"boolean\\") {
    return createVNode(Comment);
  } else if (isArray(child)) {
    return createVNode(Fragment, null, child);
  } else if (typeof child === \\"object\\") {
    return child.el === null ? child : cloneVNode(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const {shapeFlag} = vnode;
  if (children == null) {
    children = null;
  } else if (isArray(children)) {
    type = 16;
  } else if (typeof children === \\"object\\") {
    if (shapeFlag & 1 || shapeFlag & 64) {
      const slot = children.default;
      if (slot) {
        slot._c && setCompiledSlotRendering(1);
        normalizeChildren(vnode, slot());
        slot._c && setCompiledSlotRendering(-1);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.vnode.patchFlag & 1024) {
          children._ = 2;
          vnode.patchFlag |= 1024;
        } else {
          children._ = 1;
        }
      }
    }
  } else if (isFunction(children)) {
    children = {default: children, _ctx: currentRenderingInstance};
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = extend({}, args[0]);
  for (let i = 1; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === \\"class\\") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === \\"style\\") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (existing !== incoming) {
          ret[key] = existing ? [].concat(existing, toMerge[key]) : incoming;
        }
      } else if (key !== \\"\\") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function provide(key, value) {
  if (!currentInstance) {
    if (false) {
      warn(\`provide() can only be used inside setup().\`);
    }
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue() : defaultValue;
    } else if (false) {
      warn(\`injection \\"\${String(key)}\\" not found.\`);
    }
  } else if (false) {
    warn(\`inject() can only be used inside setup() or functional components.\`);
  }
}
var isInBeforeCreate = false;
function applyOptions(instance, options, deferredData = [], deferredWatch = [], deferredProvide = [], asMixin = false) {
  const {
    mixins,
    extends: extendsOptions,
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    components,
    directives,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    expose
  } = options;
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  const globalMixins = instance.appContext.mixins;
  if (asMixin && render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (!asMixin) {
    isInBeforeCreate = true;
    callSyncHook(\\"beforeCreate\\", \\"bc\\", options, instance, globalMixins);
    isInBeforeCreate = false;
    applyMixins(instance, globalMixins, deferredData, deferredWatch, deferredProvide);
  }
  if (extendsOptions) {
    applyOptions(instance, extendsOptions, deferredData, deferredWatch, deferredProvide, true);
  }
  if (mixins) {
    applyMixins(instance, mixins, deferredData, deferredWatch, deferredProvide);
  }
  const checkDuplicateProperties = false ? createDuplicateChecker() : null;
  if (false) {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties(\\"Props\\", key);
      }
    }
  }
  if (injectOptions) {
    if (isArray(injectOptions)) {
      for (let i = 0; i < injectOptions.length; i++) {
        const key = injectOptions[i];
        ctx[key] = inject(key);
        if (false) {
          checkDuplicateProperties(\\"Inject\\", key);
        }
      }
    } else {
      for (const key in injectOptions) {
        const opt = injectOptions[key];
        if (isObject(opt)) {
          ctx[key] = inject(opt.from || key, opt.default, true);
        } else {
          ctx[key] = inject(opt);
        }
        if (false) {
          checkDuplicateProperties(\\"Inject\\", key);
        }
      }
    }
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction(methodHandler)) {
        ctx[key] = methodHandler.bind(publicThis);
        if (false) {
          checkDuplicateProperties(\\"Methods\\", key);
        }
      } else if (false) {
        warn(\`Method \\"\${key}\\" has type \\"\${typeof methodHandler}\\" in the component definition. Did you reference the function correctly?\`);
      }
    }
  }
  if (!asMixin) {
    if (deferredData.length) {
      deferredData.forEach((dataFn) => resolveData(instance, dataFn, publicThis));
    }
    if (dataOptions) {
      resolveData(instance, dataOptions, publicThis);
    }
    if (false) {
      const rawData = toRaw(instance.data);
      for (const key in rawData) {
        checkDuplicateProperties(\\"Data\\", key);
        if (key[0] !== \\"$\\" && key[0] !== \\"_\\") {
          Object.defineProperty(ctx, key, {
            configurable: true,
            enumerable: true,
            get: () => rawData[key],
            set: NOOP
          });
        }
      }
    }
  } else if (dataOptions) {
    deferredData.push(dataOptions);
  }
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      if (false) {
        warn(\`Computed property \\"\${key}\\" has no getter.\`);
      }
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : false ? () => {
        warn(\`Write operation failed: computed property \\"\${key}\\" is readonly.\`);
      } : NOOP;
      const c = computed2({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
      if (false) {
        checkDuplicateProperties(\\"Computed\\", key);
      }
    }
  }
  if (watchOptions) {
    deferredWatch.push(watchOptions);
  }
  if (!asMixin && deferredWatch.length) {
    deferredWatch.forEach((watchOptions2) => {
      for (const key in watchOptions2) {
        createWatcher(watchOptions2[key], ctx, publicThis, key);
      }
    });
  }
  if (provideOptions) {
    deferredProvide.push(provideOptions);
  }
  if (!asMixin && deferredProvide.length) {
    deferredProvide.forEach((provideOptions2) => {
      const provides = isFunction(provideOptions2) ? provideOptions2.call(publicThis) : provideOptions2;
      Reflect.ownKeys(provides).forEach((key) => {
        provide(key, provides[key]);
      });
    });
  }
  if (asMixin) {
    if (components) {
      extend(instance.components || (instance.components = extend({}, instance.type.components)), components);
    }
    if (directives) {
      extend(instance.directives || (instance.directives = extend({}, instance.type.directives)), directives);
    }
  }
  if (!asMixin) {
    callSyncHook(\\"created\\", \\"c\\", options, instance, globalMixins);
  }
  if (beforeMount) {
    onBeforeMount(beforeMount.bind(publicThis));
  }
  if (mounted) {
    onMounted(mounted.bind(publicThis));
  }
  if (beforeUpdate) {
    onBeforeUpdate(beforeUpdate.bind(publicThis));
  }
  if (updated) {
    onUpdated(updated.bind(publicThis));
  }
  if (activated) {
    onActivated(activated.bind(publicThis));
  }
  if (deactivated) {
    onDeactivated(deactivated.bind(publicThis));
  }
  if (errorCaptured) {
    onErrorCaptured(errorCaptured.bind(publicThis));
  }
  if (renderTracked) {
    onRenderTracked(renderTracked.bind(publicThis));
  }
  if (renderTriggered) {
    onRenderTriggered(renderTriggered.bind(publicThis));
  }
  if (false) {
    warn(\`\\\\\`beforeDestroy\\\\\` has been renamed to \\\\\`beforeUnmount\\\\\`.\`);
  }
  if (beforeUnmount) {
    onBeforeUnmount(beforeUnmount.bind(publicThis));
  }
  if (false) {
    warn(\`\\\\\`destroyed\\\\\` has been renamed to \\\\\`unmounted\\\\\`.\`);
  }
  if (unmounted) {
    onUnmounted(unmounted.bind(publicThis));
  }
  if (isArray(expose)) {
    if (!asMixin) {
      if (expose.length) {
        const exposed = instance.exposed || (instance.exposed = proxyRefs({}));
        expose.forEach((key) => {
          exposed[key] = toRef(publicThis, key);
        });
      } else if (!instance.exposed) {
        instance.exposed = EMPTY_OBJ;
      }
    } else if (false) {
      warn(\`The \\\\\`expose\\\\\` option is ignored when used in mixins.\`);
    }
  }
}
function callSyncHook(name, type, options, instance, globalMixins) {
  callHookFromMixins(name, type, globalMixins, instance);
  const {extends: base, mixins} = options;
  if (base) {
    callHookFromExtends(name, type, base, instance);
  }
  if (mixins) {
    callHookFromMixins(name, type, mixins, instance);
  }
  const selfHook = options[name];
  if (selfHook) {
    callWithAsyncErrorHandling(selfHook.bind(instance.proxy), instance, type);
  }
}
function callHookFromExtends(name, type, base, instance) {
  if (base.extends) {
    callHookFromExtends(name, type, base.extends, instance);
  }
  const baseHook = base[name];
  if (baseHook) {
    callWithAsyncErrorHandling(baseHook.bind(instance.proxy), instance, type);
  }
}
function callHookFromMixins(name, type, mixins, instance) {
  for (let i = 0; i < mixins.length; i++) {
    const chainedMixins = mixins[i].mixins;
    if (chainedMixins) {
      callHookFromMixins(name, type, chainedMixins, instance);
    }
    const fn = mixins[i][name];
    if (fn) {
      callWithAsyncErrorHandling(fn.bind(instance.proxy), instance, type);
    }
  }
}
function applyMixins(instance, mixins, deferredData, deferredWatch, deferredProvide) {
  for (let i = 0; i < mixins.length; i++) {
    applyOptions(instance, mixins[i], deferredData, deferredWatch, deferredProvide, true);
  }
}
function resolveData(instance, dataFn, publicThis) {
  if (false) {
    warn(\`The data option must be a function. Plain object usage is no longer supported.\`);
  }
  const data = dataFn.call(publicThis, publicThis);
  if (false) {
    warn(\`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.\`);
  }
  if (!isObject(data)) {
    false;
  } else if (instance.data === EMPTY_OBJ) {
    instance.data = reactive(data);
  } else {
    extend(instance.data, data);
  }
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(\\".\\") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      watch(getter, handler);
    } else if (false) {
      warn(\`Invalid watch handler specified by key \\"\${raw}\\"\`, handler);
    }
  } else if (isFunction(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject(raw)) {
    if (isArray(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      } else if (false) {
        warn(\`Invalid watch handler specified by key \\"\${raw.handler}\\"\`, handler);
      }
    }
  } else if (false) {
    warn(\`Invalid watch option: \\"\${key}\\"\`, raw);
  }
}
function createPathGetter(ctx, path) {
  const segments = path.split(\\".\\");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function resolveMergedOptions(instance) {
  const raw = instance.type;
  const {__merged, mixins, extends: extendsOptions} = raw;
  if (__merged)
    return __merged;
  const globalMixins = instance.appContext.mixins;
  if (!globalMixins.length && !mixins && !extendsOptions)
    return raw;
  const options = {};
  globalMixins.forEach((m) => mergeOptions(options, m, instance));
  mergeOptions(options, raw, instance);
  return raw.__merged = options;
}
function mergeOptions(to, from, instance) {
  const strats = instance.appContext.config.optionMergeStrategies;
  const {mixins, extends: extendsOptions} = from;
  extendsOptions && mergeOptions(to, extendsOptions, instance);
  mixins && mixins.forEach((m) => mergeOptions(to, m, instance));
  for (const key in from) {
    if (strats && hasOwn(strats, key)) {
      to[key] = strats[key](to[key], from[key], instance.proxy, key);
    } else {
      to[key] = from[key];
    }
  }
}
var getPublicInstance = (i) => i && (i.proxy ? i.proxy : getPublicInstance(i.parent));
var publicPropertiesMap = extend(Object.create(null), {
  $: (i) => i,
  $el: (i) => i.vnode.el,
  $data: (i) => i.data,
  $props: (i) => false ? shallowReadonly(i.props) : i.props,
  $attrs: (i) => false ? shallowReadonly(i.attrs) : i.attrs,
  $slots: (i) => false ? shallowReadonly(i.slots) : i.slots,
  $refs: (i) => false ? shallowReadonly(i.refs) : i.refs,
  $parent: (i) => getPublicInstance(i.parent),
  $root: (i) => i.root && i.root.proxy,
  $emit: (i) => i.emit,
  $options: (i) => __VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type,
  $forceUpdate: (i) => () => queueJob(i.update),
  $nextTick: (i) => nextTick.bind(i.proxy),
  $watch: (i) => __VUE_OPTIONS_API__ ? instanceWatch.bind(i) : NOOP
});
var PublicInstanceProxyHandlers = {
  get({_: instance}, key) {
    const {ctx, setupState, data, props, accessCache, type, appContext} = instance;
    if (key === \\"__v_skip\\") {
      return true;
    }
    if (false) {
      return true;
    }
    let normalizedProps;
    if (key[0] !== \\"$\\") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 0:
            return setupState[key];
          case 1:
            return data[key];
          case 3:
            return ctx[key];
          case 2:
            return props[key];
        }
      } else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
        accessCache[key] = 0;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 1;
        return data[key];
      } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)) {
        accessCache[key] = 2;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 3;
        return ctx[key];
      } else if (!__VUE_OPTIONS_API__ || !isInBeforeCreate) {
        accessCache[key] = 4;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === \\"$attrs\\") {
        track(instance, \\"get\\", key);
        false;
      }
      return publicGetter(instance);
    } else if ((cssModule = type.__cssModules) && (cssModule = cssModule[key])) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 3;
      return ctx[key];
    } else if (globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)) {
      return globalProperties[key];
    } else if (false) {
      if (data !== EMPTY_OBJ && (key[0] === \\"$\\" || key[0] === \\"_\\") && hasOwn(data, key)) {
        warn(\`Property \${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character (\\"$\\" or \\"_\\") and is not proxied on the render context.\`);
      } else {
        warn(\`Property \${JSON.stringify(key)} was accessed during render but is not defined on instance.\`);
      }
    }
  },
  set({_: instance}, key, value) {
    const {data, setupState, ctx} = instance;
    if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
      setupState[key] = value;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value;
    } else if (key in instance.props) {
      false;
      return false;
    }
    if (key[0] === \\"$\\" && key.slice(1) in instance) {
      false;
      return false;
    } else {
      if (false) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({_: {data, setupState, accessCache, ctx, appContext, propsOptions}}, key) {
    let normalizedProps;
    return accessCache[key] !== void 0 || data !== EMPTY_OBJ && hasOwn(data, key) || setupState !== EMPTY_OBJ && hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  }
};
if (false) {
  PublicInstanceProxyHandlers.ownKeys = (target) => {
    warn(\`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.\`);
    return Reflect.ownKeys(target);
  };
}
var RuntimeCompiledPublicInstanceProxyHandlers = extend({}, PublicInstanceProxyHandlers, {
  get(target, key) {
    if (key === Symbol.unscopables) {
      return;
    }
    return PublicInstanceProxyHandlers.get(target, key, target);
  },
  has(_, key) {
    const has2 = key[0] !== \\"_\\" && !isGloballyWhitelisted(key);
    if (false) {
      warn(\`Property \${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.\`);
    }
    return has2;
  }
});
var emptyAppContext = createAppContext();
var uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$1++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    next: null,
    subTree: null,
    update: null,
    render: null,
    proxy: null,
    exposed: null,
    withProxy: null,
    effects: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    components: null,
    directives: null,
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    emit: null,
    emitted: null,
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null
  };
  if (false) {
    instance.ctx = createRenderContext(instance);
  } else {
    instance.ctx = {_: instance};
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (__VUE_PROD_DEVTOOLS__) {
    devtoolsComponentAdded(instance);
  }
  return instance;
}
var currentInstance = null;
var getCurrentInstance = () => currentInstance || currentRenderingInstance;
var setCurrentInstance = (instance) => {
  currentInstance = instance;
};
var isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const {props, children, shapeFlag} = instance.vnode;
  const isStateful = shapeFlag & 4;
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  if (false) {
    if (Component.name) {
      validateComponentName(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i = 0; i < names.length; i++) {
        validateComponentName(names[i], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i = 0; i < names.length; i++) {
        validateDirectiveName(names[i]);
      }
    }
  }
  instance.accessCache = Object.create(null);
  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
  if (false) {
    exposePropsOnRenderContext(instance);
  }
  const {setup} = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    currentInstance = instance;
    pauseTracking();
    const setupResult = callWithErrorHandling(setup, instance, 0, [false ? shallowReadonly(instance.props) : instance.props, setupContext]);
    resetTracking();
    currentInstance = null;
    if (isPromise(setupResult)) {
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult);
    }
  } else {
    finishComponentSetup(instance);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    {
      instance.render = setupResult;
    }
  } else if (isObject(setupResult)) {
    if (false) {
      warn(\`setup() should not return VNodes directly - return a render function instead.\`);
    }
    if (__VUE_PROD_DEVTOOLS__) {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs(setupResult);
    if (false) {
      exposeSetupStateOnRenderContext(instance);
    }
  } else if (false) {
    warn(\`setup() should return an object. Received: \${setupResult === null ? \\"null\\" : typeof setupResult}\`);
  }
  finishComponentSetup(instance);
}
var compile;
function registerRuntimeCompiler(_compile) {
  compile = _compile;
}
function finishComponentSetup(instance, isSSR) {
  const Component = instance.type;
  if (!instance.render) {
    if (compile && Component.template && !Component.render) {
      if (false) {
        startMeasure(instance, \`compile\`);
      }
      Component.render = compile(Component.template, {
        isCustomElement: instance.appContext.config.isCustomElement,
        delimiters: Component.delimiters
      });
      if (false) {
        endMeasure(instance, \`compile\`);
      }
    }
    instance.render = Component.render || NOOP;
    if (instance.render._rc) {
      instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
  }
  if (__VUE_OPTIONS_API__) {
    currentInstance = instance;
    pauseTracking();
    applyOptions(instance, Component);
    resetTracking();
    currentInstance = null;
  }
  if (false) {
    if (!compile && Component.template) {
      warn(\`Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias \\"vue\\" to \\"vue/dist/vue.esm-bundler.js\\".\`);
    } else {
      warn(\`Component is missing template or render function.\`);
    }
  }
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    if (false) {
      warn(\`expose() should be called only once per setup().\`);
    }
    instance.exposed = proxyRefs(exposed);
  };
  if (false) {
    return Object.freeze({
      get props() {
        return instance.props;
      },
      get attrs() {
        return new Proxy(instance.attrs, attrHandlers);
      },
      get slots() {
        return shallowReadonly(instance.slots);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  } else {
    return {
      attrs: instance.attrs,
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function recordInstanceBoundEffect(effect2, instance = currentInstance) {
  if (instance) {
    (instance.effects || (instance.effects = [])).push(effect2);
  }
}
var classifyRE = /(?:^|[-_])(\\\\w)/g;
var classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, \\"\\");
function getComponentName(Component) {
  return isFunction(Component) ? Component.displayName || Component.name : Component.name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\\\\\\\]+)\\\\.\\\\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? \`App\` : \`Anonymous\`;
}
function isClassComponent(value) {
  return isFunction(value) && \\"__vccOpts\\" in value;
}
function computed2(getterOrOptions) {
  const c = computed(getterOrOptions);
  recordInstanceBoundEffect(c.effect);
  return c;
}
function defineProps() {
  if (false) {
    warn(\`defineProps() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.\`);
  }
  return null;
}
function defineEmit() {
  if (false) {
    warn(\`defineEmit() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.\`);
  }
  return null;
}
function useContext() {
  const i = getCurrentInstance();
  if (false) {
    warn(\`useContext() called without active instance.\`);
  }
  return i.setupContext || (i.setupContext = createSetupContext(i));
}
function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
var ssrContextKey = Symbol(false ? \`ssrContext\` : \`\`);
var useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    if (!ctx) {
      warn(\`Server rendering context not provided. Make sure to only call useSsrContext() conditionally in the server build.\`);
    }
    return ctx;
  }
};
function initCustomFormatter() {
  if (true) {
    return;
  }
  const vueStyle = {style: \\"color:#3ba776\\"};
  const numberStyle = {style: \\"color:#0b1bc9\\"};
  const stringStyle = {style: \\"color:#b62e24\\"};
  const keywordStyle = {style: \\"color:#9d288c\\"};
  const formatter = {
    header(obj) {
      if (!isObject(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return [\\"div\\", vueStyle, \`VueInstance\`];
      } else if (isRef(obj)) {
        return [
          \\"div\\",
          {},
          [\\"span\\", vueStyle, genRefFlag(obj)],
          \\"<\\",
          formatValue(obj.value),
          \`>\`
        ];
      } else if (isReactive(obj)) {
        return [
          \\"div\\",
          {},
          [\\"span\\", vueStyle, \\"Reactive\\"],
          \\"<\\",
          formatValue(obj),
          \`>\${isReadonly(obj) ? \` (readonly)\` : \`\`}\`
        ];
      } else if (isReadonly(obj)) {
        return [
          \\"div\\",
          {},
          [\\"span\\", vueStyle, \\"Readonly\\"],
          \\"<\\",
          formatValue(obj),
          \\">\\"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          \\"div\\",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock(\\"props\\", toRaw(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock(\\"setup\\", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock(\\"data\\", toRaw(instance.data)));
    }
    const computed3 = extractKeys(instance, \\"computed\\");
    if (computed3) {
      blocks.push(createInstanceBlock(\\"computed\\", computed3));
    }
    const injected = extractKeys(instance, \\"inject\\");
    if (injected) {
      blocks.push(createInstanceBlock(\\"injected\\", injected));
    }
    blocks.push([
      \\"div\\",
      {},
      [
        \\"span\\",
        {
          style: keywordStyle.style + \\";opacity:0.66\\"
        },
        \\"$ (internal): \\"
      ],
      [\\"object\\", {object: instance}]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend({}, target);
    if (!Object.keys(target).length) {
      return [\\"span\\", {}];
    }
    return [
      \\"div\\",
      {style: \\"line-height:1.25em;margin-bottom:0.6em\\"},
      [
        \\"div\\",
        {
          style: \\"color:#476582\\"
        },
        type
      ],
      [
        \\"div\\",
        {
          style: \\"padding-left:1.25em\\"
        },
        ...Object.keys(target).map((key) => {
          return [
            \\"div\\",
            {},
            [\\"span\\", keywordStyle, key + \\": \\"],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v, asRaw = true) {
    if (typeof v === \\"number\\") {
      return [\\"span\\", numberStyle, v];
    } else if (typeof v === \\"string\\") {
      return [\\"span\\", stringStyle, JSON.stringify(v)];
    } else if (typeof v === \\"boolean\\") {
      return [\\"span\\", keywordStyle, v];
    } else if (isObject(v)) {
      return [\\"object\\", {object: asRaw ? toRaw(v) : v}];
    } else {
      return [\\"span\\", stringStyle, String(v)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray(opts) && opts.includes(key) || isObject(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m) => isKeyOfType(m, key, type))) {
      return true;
    }
  }
  function genRefFlag(v) {
    if (v._shallow) {
      return \`ShallowRef\`;
    }
    if (v.effect) {
      return \`ComputedRef\`;
    }
    return \`Ref\`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
function renderList(source, renderItem) {
  let ret;
  if (isArray(source) || isString(source)) {
    ret = new Array(source.length);
    for (let i = 0, l = source.length; i < l; i++) {
      ret[i] = renderItem(source[i], i);
    }
  } else if (typeof source === \\"number\\") {
    if (false) {
      warn(\`The v-for range expect an integer value but got \${source}.\`);
      return [];
    }
    ret = new Array(source);
    for (let i = 0; i < source; i++) {
      ret[i] = renderItem(i + 1, i);
    }
  } else if (isObject(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, renderItem);
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i = 0, l = keys.length; i < l; i++) {
        const key = keys[i];
        ret[i] = renderItem(source[key], key, i);
      }
    }
  } else {
    ret = [];
  }
  return ret;
}
function toHandlers(obj) {
  const ret = {};
  if (false) {
    warn(\`v-on with no argument expects an object value.\`);
    return ret;
  }
  for (const key in obj) {
    ret[toHandlerKey(key)] = obj[key];
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i = 0; i < dynamicSlots.length; i++) {
    const slot = dynamicSlots[i];
    if (isArray(slot)) {
      for (let j = 0; j < slot.length; j++) {
        slots[slot[j].name] = slot[j].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.fn;
    }
  }
  return slots;
}
var version = \\"3.0.5\\";
var ssrUtils = null;
// node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var svgNS = \\"http://www.w3.org/2000/svg\\";
var doc = typeof document !== \\"undefined\\" ? document : null;
var tempContainer;
var tempSVGContainer;
var nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is) => isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {is} : void 0),
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, \\"\\");
  },
  cloneNode(el) {
    return el.cloneNode(true);
  },
  insertStaticContent(content, parent, anchor, isSVG) {
    const temp = isSVG ? tempSVGContainer || (tempSVGContainer = doc.createElementNS(svgNS, \\"svg\\")) : tempContainer || (tempContainer = doc.createElement(\\"div\\"));
    temp.innerHTML = content;
    const first = temp.firstChild;
    let node = first;
    let last = node;
    while (node) {
      last = node;
      nodeOps.insert(node, parent, anchor);
      node = temp.firstChild;
    }
    return [first, last];
  }
};
function patchClass(el, value, isSVG) {
  if (value == null) {
    value = \\"\\";
  }
  if (isSVG) {
    el.setAttribute(\\"class\\", value);
  } else {
    const transitionClasses = el._vtc;
    if (transitionClasses) {
      value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(\\" \\");
    }
    el.className = value;
  }
}
function patchStyle(el, prev, next) {
  const style = el.style;
  if (!next) {
    el.removeAttribute(\\"style\\");
  } else if (isString(next)) {
    if (prev !== next) {
      style.cssText = next;
    }
  } else {
    for (const key in next) {
      setStyle(style, key, next[key]);
    }
    if (prev && !isString(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style, key, \\"\\");
        }
      }
    }
  }
}
var importantRE = /\\\\s*!important$/;
function setStyle(style, name, val) {
  if (isArray(val)) {
    val.forEach((v) => setStyle(style, name, v));
  } else {
    if (name.startsWith(\\"--\\")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(hyphenate(prefixed), val.replace(importantRE, \\"\\"), \\"important\\");
      } else {
        style[prefixed] = val;
      }
    }
  }
}
var prefixes = [\\"Webkit\\", \\"Moz\\", \\"ms\\"];
var prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== \\"filter\\" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
var xlinkNS = \\"http://www.w3.org/1999/xlink\\";
function patchAttr(el, key, value, isSVG) {
  if (isSVG && key.startsWith(\\"xlink:\\")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean = isSpecialBooleanAttr(key);
    if (value == null || isBoolean && value === false) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean ? \\"\\" : value);
    }
  }
}
function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === \\"innerHTML\\" || key === \\"textContent\\") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value == null ? \\"\\" : value;
    return;
  }
  if (key === \\"value\\" && el.tagName !== \\"PROGRESS\\") {
    el._value = value;
    const newValue = value == null ? \\"\\" : value;
    if (el.value !== newValue) {
      el.value = newValue;
    }
    return;
  }
  if (value === \\"\\" || value == null) {
    const type = typeof el[key];
    if (value === \\"\\" && type === \\"boolean\\") {
      el[key] = true;
      return;
    } else if (value == null && type === \\"string\\") {
      el[key] = \\"\\";
      el.removeAttribute(key);
      return;
    } else if (type === \\"number\\") {
      el[key] = 0;
      el.removeAttribute(key);
      return;
    }
  }
  try {
    el[key] = value;
  } catch (e) {
    if (false) {
      warn(\`Failed setting prop \\"\${key}\\" on <\${el.tagName.toLowerCase()}>: value \${value} is invalid.\`, e);
    }
  }
}
var _getNow = Date.now;
if (typeof document !== \\"undefined\\" && _getNow() > document.createEvent(\\"Event\\").timeStamp) {
  _getNow = () => performance.now();
}
var cachedNow = 0;
var p = Promise.resolve();
var reset = () => {
  cachedNow = 0;
};
var getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
var optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m;
    while (m = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  return [name.slice(2).toLowerCase(), options];
}
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    const timeStamp = e.timeStamp || _getNow();
    if (timeStamp >= invoker.attached - 1) {
      callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
    }
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value) {
  if (isArray(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map((fn) => (e2) => !e2._stopped && fn(e2));
  } else {
    return value;
  }
}
var nativeOnRE = /^on[a-z]/;
var forcePatchProp = (_, key) => key === \\"value\\";
var patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  switch (key) {
    case \\"class\\":
      patchClass(el, nextValue, isSVG);
      break;
    case \\"style\\":
      patchStyle(el, prevValue, nextValue);
      break;
    default:
      if (isOn(key)) {
        if (!isModelListener(key)) {
          patchEvent(el, key, prevValue, nextValue, parentComponent);
        }
      } else if (shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
      } else {
        if (key === \\"true-value\\") {
          el._trueValue = nextValue;
        } else if (key === \\"false-value\\") {
          el._falseValue = nextValue;
        }
        patchAttr(el, key, nextValue, isSVG);
      }
      break;
  }
};
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === \\"innerHTML\\") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction(value)) {
      return true;
    }
    return false;
  }
  if (key === \\"spellcheck\\" || key === \\"draggable\\") {
    return false;
  }
  if (key === \\"form\\" && typeof value === \\"string\\") {
    return false;
  }
  if (key === \\"list\\" && el.tagName === \\"INPUT\\") {
    return false;
  }
  if (nativeOnRE.test(key) && isString(value)) {
    return false;
  }
  return key in el;
}
function useCssModule(name = \\"$style\\") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
      false;
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
      false;
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
      false;
      return EMPTY_OBJ;
    }
    return mod;
  }
}
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    false;
    return;
  }
  const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));
  onMounted(() => watchEffect(setVars, {flush: \\"post\\"}));
  onUpdated(setVars);
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    const style = vnode.el.style;
    for (const key in vars) {
      style.setProperty(\`--\${key}\`, vars[key]);
    }
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c) => setVarsOnVNode(c, vars));
  }
}
var TRANSITION = \\"transition\\";
var ANIMATION = \\"animation\\";
var Transition = (props, {slots}) => h(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = \\"Transition\\";
var DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
var TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend({}, BaseTransition.props, DOMTransitionPropsValidators);
function resolveTransitionProps(rawProps) {
  let {name = \\"v\\", type, css = true, duration, enterFromClass = \`\${name}-enter-from\`, enterActiveClass = \`\${name}-enter-active\`, enterToClass = \`\${name}-enter-to\`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = \`\${name}-leave-from\`, leaveActiveClass = \`\${name}-leave-active\`, leaveToClass = \`\${name}-leave-to\`} = rawProps;
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (!css) {
    return baseProps;
  }
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled} = baseProps;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el, isAppear, done);
      hook && hook(el, resolve2);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!(hook && hook.length > 1)) {
          whenTransitionEnds(el, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend(baseProps, {
    onBeforeEnter(el) {
      onBeforeEnter && onBeforeEnter(el);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      onBeforeAppear && onBeforeAppear(el);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      const resolve2 = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      forceReflow();
      addTransitionClass(el, leaveActiveClass);
      nextFrame(() => {
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!(onLeave && onLeave.length > 1)) {
          whenTransitionEnds(el, type, leaveDuration, resolve2);
        }
      });
      onLeave && onLeave(el, resolve2);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      onEnterCancelled && onEnterCancelled(el);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      onAppearCancelled && onAppearCancelled(el);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      onLeaveCancelled && onLeaveCancelled(el);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  if (false)
    validateDuration(res);
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\\\\s+/).forEach((c) => c && el.classList.add(c));
  (el._vtc || (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\\\\s+/).forEach((c) => c && el.classList.remove(c));
  const {_vtc} = el;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
var endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
  const id = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id === el._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const {type, timeout, propCount} = getTransitionInfo(el, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + \\"end\\";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e) => {
    if (e.target === el && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || \\"\\").split(\\", \\");
  const transitionDelays = getStyleProperties(TRANSITION + \\"Delay\\");
  const transitionDurations = getStyleProperties(TRANSITION + \\"Duration\\");
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(ANIMATION + \\"Delay\\");
  const animationDurations = getStyleProperties(ANIMATION + \\"Duration\\");
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\\\\b(transform|all)(,|$)/.test(styles[TRANSITION + \\"Property\\"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(\\",\\", \\".\\")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
var positionMap = new WeakMap();
var newPositionMap = new WeakMap();
var TransitionGroupImpl = {
  name: \\"TransitionGroup\\",
  props: /* @__PURE__ */ extend({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, {slots}) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || \`\${props.name || \\"v\\"}-move\`;
      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c) => {
        const el = c.el;
        const style = el.style;
        addTransitionClass(el, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = \\"\\";
        const cb = el._moveCb = (e) => {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(\\"transitionend\\", cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener(\\"transitionend\\", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      const tag = rawProps.tag || Fragment;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.key != null) {
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
        } else if (false) {
          warn(\`<TransitionGroup> children must be keyed.\`);
        }
      }
      if (prevChildren) {
        for (let i = 0; i < prevChildren.length; i++) {
          const child = prevChildren[i];
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
var TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
  const el = c.el;
  if (el._moveCb) {
    el._moveCb();
  }
  if (el._enterCb) {
    el._enterCb();
  }
}
function recordPosition(c) {
  newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
  const oldPos = positionMap.get(c);
  const newPos = newPositionMap.get(c);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c.el.style;
    s.transform = s.webkitTransform = \`translate(\${dx}px,\${dy}px)\`;
    s.transitionDuration = \\"0s\\";
    return c;
  }
}
function hasCSSTransform(el, root, moveClass) {
  const clone = el.cloneNode();
  if (el._vtc) {
    el._vtc.forEach((cls) => {
      cls.split(/\\\\s+/).forEach((c) => c && clone.classList.remove(c));
    });
  }
  moveClass.split(/\\\\s+/).forEach((c) => c && clone.classList.add(c));
  clone.style.display = \\"none\\";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone);
  const {hasTransform} = getTransitionInfo(clone);
  container.removeChild(clone);
  return hasTransform;
}
var getModelAssigner = (vnode) => {
  const fn = vnode.props[\\"onUpdate:modelValue\\"];
  return isArray(fn) ? (value) => invokeArrayFns(fn, value) : fn;
};
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  const target = e.target;
  if (target.composing) {
    target.composing = false;
    trigger2(target, \\"input\\");
  }
}
function trigger2(el, type) {
  const e = document.createEvent(\\"HTMLEvents\\");
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
var vModelText = {
  created(el, {modifiers: {lazy, trim, number}}, vnode) {
    el._assign = getModelAssigner(vnode);
    const castToNumber = number || el.type === \\"number\\";
    addEventListener(el, lazy ? \\"change\\" : \\"input\\", (e) => {
      if (e.target.composing)
        return;
      let domValue = el.value;
      if (trim) {
        domValue = domValue.trim();
      } else if (castToNumber) {
        domValue = toNumber(domValue);
      }
      el._assign(domValue);
    });
    if (trim) {
      addEventListener(el, \\"change\\", () => {
        el.value = el.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el, \\"compositionstart\\", onCompositionStart);
      addEventListener(el, \\"compositionend\\", onCompositionEnd);
      addEventListener(el, \\"change\\", onCompositionEnd);
    }
  },
  mounted(el, {value}) {
    el.value = value == null ? \\"\\" : value;
  },
  beforeUpdate(el, {value, modifiers: {trim, number}}, vnode) {
    el._assign = getModelAssigner(vnode);
    if (el.composing)
      return;
    if (document.activeElement === el) {
      if (trim && el.value.trim() === value) {
        return;
      }
      if ((number || el.type === \\"number\\") && toNumber(el.value) === value) {
        return;
      }
    }
    const newValue = value == null ? \\"\\" : value;
    if (el.value !== newValue) {
      el.value = newValue;
    }
  }
};
var vModelCheckbox = {
  created(el, _, vnode) {
    el._assign = getModelAssigner(vnode);
    addEventListener(el, \\"change\\", () => {
      const modelValue = el._modelValue;
      const elementValue = getValue(el);
      const checked = el.checked;
      const assign = el._assign;
      if (isArray(modelValue)) {
        const index = looseIndexOf(modelValue, elementValue);
        const found = index !== -1;
        if (checked && !found) {
          assign(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index, 1);
          assign(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign(cloned);
      } else {
        assign(getCheckboxValue(el, checked));
      }
    });
  },
  mounted: setChecked,
  beforeUpdate(el, binding, vnode) {
    el._assign = getModelAssigner(vnode);
    setChecked(el, binding, vnode);
  }
};
function setChecked(el, {value, oldValue}, vnode) {
  el._modelValue = value;
  if (isArray(value)) {
    el.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el.checked = looseEqual(value, getCheckboxValue(el, true));
  }
}
var vModelRadio = {
  created(el, {value}, vnode) {
    el.checked = looseEqual(value, vnode.props.value);
    el._assign = getModelAssigner(vnode);
    addEventListener(el, \\"change\\", () => {
      el._assign(getValue(el));
    });
  },
  beforeUpdate(el, {value, oldValue}, vnode) {
    el._assign = getModelAssigner(vnode);
    if (value !== oldValue) {
      el.checked = looseEqual(value, vnode.props.value);
    }
  }
};
var vModelSelect = {
  created(el, {value, modifiers: {number}}, vnode) {
    const isSetModel = isSet(value);
    addEventListener(el, \\"change\\", () => {
      const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map((o) => number ? toNumber(getValue(o)) : getValue(o));
      el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
    });
    el._assign = getModelAssigner(vnode);
  },
  mounted(el, {value}) {
    setSelected(el, value);
  },
  beforeUpdate(el, _binding, vnode) {
    el._assign = getModelAssigner(vnode);
  },
  updated(el, {value}) {
    setSelected(el, value);
  }
};
function setSelected(el, value) {
  const isMultiple = el.multiple;
  if (isMultiple && !isArray(value) && !isSet(value)) {
    false;
    return;
  }
  for (let i = 0, l = el.options.length; i < l; i++) {
    const option = el.options[i];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray(value)) {
        option.selected = looseIndexOf(value, optionValue) > -1;
      } else {
        option.selected = value.has(optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        el.selectedIndex = i;
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return \\"_value\\" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key = checked ? \\"_trueValue\\" : \\"_falseValue\\";
  return key in el ? el[key] : checked;
}
var vModelDynamic = {
  created(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, \\"created\\");
  },
  mounted(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, \\"mounted\\");
  },
  beforeUpdate(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, \\"beforeUpdate\\");
  },
  updated(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, \\"updated\\");
  }
};
function callModelHook(el, binding, vnode, prevVNode, hook) {
  let modelToUse;
  switch (el.tagName) {
    case \\"SELECT\\":
      modelToUse = vModelSelect;
      break;
    case \\"TEXTAREA\\":
      modelToUse = vModelText;
      break;
    default:
      switch (vnode.props && vnode.props.type) {
        case \\"checkbox\\":
          modelToUse = vModelCheckbox;
          break;
        case \\"radio\\":
          modelToUse = vModelRadio;
          break;
        default:
          modelToUse = vModelText;
      }
  }
  const fn = modelToUse[hook];
  fn && fn(el, binding, vnode, prevVNode);
}
var systemModifiers = [\\"ctrl\\", \\"shift\\", \\"alt\\", \\"meta\\"];
var modifierGuards = {
  stop: (e) => e.stopPropagation(),
  prevent: (e) => e.preventDefault(),
  self: (e) => e.target !== e.currentTarget,
  ctrl: (e) => !e.ctrlKey,
  shift: (e) => !e.shiftKey,
  alt: (e) => !e.altKey,
  meta: (e) => !e.metaKey,
  left: (e) => \\"button\\" in e && e.button !== 0,
  middle: (e) => \\"button\\" in e && e.button !== 1,
  right: (e) => \\"button\\" in e && e.button !== 2,
  exact: (e, modifiers) => systemModifiers.some((m) => e[\`\${m}Key\`] && !modifiers.includes(m))
};
var withModifiers = (fn, modifiers) => {
  return (event, ...args) => {
    for (let i = 0; i < modifiers.length; i++) {
      const guard = modifierGuards[modifiers[i]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn(event, ...args);
  };
};
var keyNames = {
  esc: \\"escape\\",
  space: \\" \\",
  up: \\"arrow-up\\",
  left: \\"arrow-left\\",
  right: \\"arrow-right\\",
  down: \\"arrow-down\\",
  delete: \\"backspace\\"
};
var withKeys = (fn, modifiers) => {
  return (event) => {
    if (!(\\"key\\" in event))
      return;
    const eventKey = hyphenate(event.key);
    if (!modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
      return;
    }
    return fn(event);
  };
};
var vShow = {
  beforeMount(el, {value}, {transition}) {
    el._vod = el.style.display === \\"none\\" ? \\"\\" : el.style.display;
    if (transition && value) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value);
    }
  },
  mounted(el, {value}, {transition}) {
    if (transition && value) {
      transition.enter(el);
    }
  },
  updated(el, {value, oldValue}, {transition}) {
    if (transition && value !== oldValue) {
      if (value) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value);
    }
  },
  beforeUnmount(el, {value}) {
    setDisplay(el, value);
  }
};
function setDisplay(el, value) {
  el.style.display = value ? el._vod : \\"none\\";
}
var rendererOptions = extend({patchProp, forcePatchProp}, nodeOps);
var renderer;
var enabledHydration = false;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
var render = (...args) => {
  ensureRenderer().render(...args);
};
var hydrate = (...args) => {
  ensureHydrationRenderer().hydrate(...args);
};
var createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  if (false) {
    injectNativeTagCheck(app);
  }
  const {mount} = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = \\"\\";
    const proxy = mount(container);
    if (container instanceof Element) {
      container.removeAttribute(\\"v-cloak\\");
      container.setAttribute(\\"data-v-app\\", \\"\\");
    }
    return proxy;
  };
  return app;
};
var createSSRApp = (...args) => {
  const app = ensureHydrationRenderer().createApp(...args);
  if (false) {
    injectNativeTagCheck(app);
  }
  const {mount} = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (container) {
      return mount(container, true);
    }
  };
  return app;
};
function normalizeContainer(container) {
  if (isString(container)) {
    const res = document.querySelector(container);
    if (false) {
      warn(\`Failed to mount app: mount target selector \\"\${container}\\" returned null.\`);
    }
    return res;
  }
  if (false) {
    warn(\`mounting on a ShadowRoot with \\\\\`{mode: \\"closed\\"}\\\\\` may lead to unpredictable bugs\`);
  }
  return container;
}
// node_modules/vue/dist/vue.runtime.esm-bundler.js
var compile2 = () => {
  if (false) {
    warn(\`Runtime compilation is not supported in this build of Vue. Configure your bundler to alias \\"vue\\" to \\"vue/dist/vue.esm-bundler.js\\".\`);
  }
};
export {
  BaseTransition,
  Comment,
  Fragment,
  KeepAlive,
  Static,
  Suspense,
  Teleport,
  Text,
  Transition,
  TransitionGroup,
  callWithAsyncErrorHandling,
  callWithErrorHandling,
  camelize,
  capitalize,
  cloneVNode,
  compile2 as compile,
  computed2 as computed,
  createApp,
  createBlock,
  createCommentVNode,
  createHydrationRenderer,
  createRenderer,
  createSSRApp,
  createSlots,
  createStaticVNode,
  createTextVNode,
  createVNode,
  customRef,
  defineAsyncComponent,
  defineComponent,
  defineEmit,
  defineProps,
  devtools,
  getCurrentInstance,
  getTransitionRawChildren,
  h,
  handleError,
  hydrate,
  initCustomFormatter,
  inject,
  isProxy,
  isReactive,
  isReadonly,
  isRef,
  isVNode,
  markRaw,
  mergeProps,
  nextTick,
  onActivated,
  onBeforeMount,
  onBeforeUnmount,
  onBeforeUpdate,
  onDeactivated,
  onErrorCaptured,
  onMounted,
  onRenderTracked,
  onRenderTriggered,
  onUnmounted,
  onUpdated,
  openBlock,
  popScopeId,
  provide,
  proxyRefs,
  pushScopeId,
  queuePostFlushCb,
  reactive,
  readonly,
  ref,
  registerRuntimeCompiler,
  render,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  resolveTransitionHooks,
  setBlockTracking,
  setDevtoolsHook,
  setTransitionHooks,
  shallowReactive,
  shallowReadonly,
  shallowRef,
  ssrContextKey,
  ssrUtils,
  toDisplayString,
  toHandlerKey,
  toHandlers,
  toRaw,
  toRef,
  toRefs,
  transformVNodeArgs,
  triggerRef,
  unref,
  useContext,
  useCssModule,
  useCssVars,
  useSSRContext,
  useTransitionState,
  vModelCheckbox,
  vModelDynamic,
  vModelRadio,
  vModelSelect,
  vModelText,
  vShow,
  version,
  warn,
  watch,
  watchEffect,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers,
  withScopeId
};
//# sourceMappingURL=vue.js.map"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: _snowpack/pkg/vue.js.map.proxy.js 1`] = `"export default \\"/_snowpack/pkg/vue.js.map\\";"`;

exports[`create-snowpack-app app-template-vue-typescript > build: allFiles 1`] = `
Array [
  "_snowpack/env.js",
  "_snowpack/pkg/build-manifest.json",
  "_snowpack/pkg/build-manifest.json.proxy.js",
  "_snowpack/pkg/import-map.json",
  "_snowpack/pkg/vue.js",
  "_snowpack/pkg/vue.js.map",
  "_snowpack/pkg/vue.js.map.proxy.js",
  "dist/App.vue.css",
  "dist/App.vue.css.proxy.js",
  "dist/App.vue.js",
  "dist/components/Bar.js",
  "dist/components/Bar.module.css",
  "dist/components/Bar.module.css.proxy.js",
  "dist/components/BarJsx.vue.css",
  "dist/components/BarJsx.vue.css.proxy.js",
  "dist/components/BarJsx.vue.js",
  "dist/components/Foo.js",
  "dist/components/Foo.module.css",
  "dist/components/Foo.module.css.proxy.js",
  "dist/components/FooTsx.vue.css",
  "dist/components/FooTsx.vue.css.proxy.js",
  "dist/components/FooTsx.vue.js",
  "dist/index.js",
  "favicon-32x32.png",
  "favicon.ico",
  "index.html",
  "logo.svg",
  "robots.txt",
]
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/App.vue.css 1`] = `
"
.App {
  text-align: center;
}
.App-header {
  background-color: #f9f6f6;
  color: #32485f;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
}
.App-link {
  color: #00c185;
}
.App-logo {
  height: 40vmin;
  pointer-events: none;
  margin-bottom: 1rem;
  animation: App-logo-spin infinite 1.6s ease-in-out alternate;
}
.App-tsx {
  display: flex;
}
.App-tsx > div {
  margin-left: 30px;
  font-size: 16px;
}
@keyframes App-logo-spin {
from {
    transform: scale(1);
}
to {
    transform: scale(1.06);
}
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/App.vue.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\".App {  text-align: center;}.App-header {  background-color: #f9f6f6;  color: #32485f;  min-height: 100vh;  display: flex;  flex-direction: column;  align-items: center;  justify-content: center;  font-size: calc(10px + 2vmin);}.App-link {  color: #00c185;}.App-logo {  height: 40vmin;  pointer-events: none;  margin-bottom: 1rem;  animation: App-logo-spin infinite 1.6s ease-in-out alternate;}.App-tsx {  display: flex;}.App-tsx > div {  margin-left: 30px;  font-size: 16px;}@keyframes App-logo-spin {from {    transform: scale(1);}to {    transform: scale(1.06);}}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/App.vue.js 1`] = `
"import './App.vue.css.proxy.js';
import {defineComponent, reactive} from \\"../_snowpack/pkg/vue.js\\";
import FooTsxVue from \\"./components/FooTsx.vue.js\\";
import FooTsx from \\"./components/Foo.js\\";
import BarJsxVue from \\"./components/BarJsx.vue.js\\";
import BarJsx from \\"./components/Bar.js\\";
const defaultExport = defineComponent({
  components: {
    FooTsxVue,
    FooTsx,
    BarJsxVue,
    BarJsx
  },
  setup() {
    const state = reactive({
      message: \\"Learn Vue\\"
    });
    return {
      state
    };
  }
});
import { createVNode as _createVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from \\"../_snowpack/pkg/vue.js\\"
const _hoisted_1 = { class: \\"App\\" }
const _hoisted_2 = { class: \\"App-header\\" }
const _hoisted_3 = /*#__PURE__*/_createVNode(\\"img\\", {
  src: \\"/logo.svg\\",
  class: \\"App-logo\\",
  alt: \\"logo\\"
}, null, -1)
const _hoisted_4 = /*#__PURE__*/_createVNode(\\"p\\", null, [
  /*#__PURE__*/_createTextVNode(\\" Edit \\"),
  /*#__PURE__*/_createVNode(\\"code\\", null, \\"src/App.vue\\"),
  /*#__PURE__*/_createTextVNode(\\" and save to reload. \\")
], -1)
const _hoisted_5 = { class: \\"App-tsx\\" }
const _hoisted_6 = {
  class: \\"App-link\\",
  href: \\"https://vuejs.org\\",
  target: \\"_blank\\",
  rel: \\"noopener noreferrer\\"
}
export function render(_ctx, _cache) {
  const _component_FooTsxVue = _resolveComponent(\\"FooTsxVue\\")
  const _component_FooTsx = _resolveComponent(\\"FooTsx\\")
  const _component_BarJsxVue = _resolveComponent(\\"BarJsxVue\\")
  const _component_BarJsx = _resolveComponent(\\"BarJsx\\")
  return (_openBlock(), _createBlock(\\"div\\", _hoisted_1, [
    _createVNode(\\"header\\", _hoisted_2, [
      _hoisted_3,
      _hoisted_4,
      _createVNode(\\"p\\", _hoisted_5, [
        _createVNode(_component_FooTsxVue),
        _createVNode(_component_FooTsx),
        _createVNode(_component_BarJsxVue),
        _createVNode(_component_BarJsx)
      ]),
      _createVNode(\\"a\\", _hoisted_6, _toDisplayString(_ctx.state.message), 1)
    ])
  ]))
}
defaultExport.render = render
export default defaultExport"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/Bar.js 1`] = `
"import { Fragment } from '../../_snowpack/pkg/vue.js';
import {createVNode, isVNode} from '../../_snowpack/pkg/vue.js';
const slice = Array.prototype.slice;
export function jsx(tag, props = null, children = null) {
  if (arguments.length > 3 || isVNode(children)) {
    children = slice.call(arguments, 2);
  }
  return createVNode(tag, props, children);
}
import {defineComponent, reactive} from \\"../../_snowpack/pkg/vue.js\\";
import styles from \\"./Bar.module.css.proxy.js\\";
export default defineComponent({
  name: \\"BarJsx\\",
  setup() {
    const state = reactive({
      name: \\"BarJsx\\"
    });
    return () => /* @__PURE__ */ jsx(Fragment, null, /* @__PURE__ */ jsx(\\"div\\", {
      className: styles[\\"bar-jsx\\"]
    }, state.name));
  }
});"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/Bar.module.css 1`] = `
".bar-jsx {
  color: red;
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/Bar.module.css.proxy.js 1`] = `
"
export let code = \\"._bar-jsx_XXXXX_XX {  color: red;}\\";
let json = {\\"bar-jsx\\":\\"_bar-jsx_XXXXX_XX\\"};
export default json;
// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/BarJsx.vue.css 1`] = `
"
.bar-jsx-vue {
  color: red;
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/BarJsx.vue.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\"/* unsupport scoped css in vue with tsx, jsx*/.bar-jsx-vue {  color: red;}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/BarJsx.vue.js 1`] = `
"import './BarJsx.vue.css.proxy.js';
import { Fragment } from '../../_snowpack/pkg/vue.js';
import {createVNode, isVNode} from '../../_snowpack/pkg/vue.js';
const slice = Array.prototype.slice;
export function jsx(tag, props = null, children = null) {
  if (arguments.length > 3 || isVNode(children)) {
    children = slice.call(arguments, 2);
  }
  return createVNode(tag, props, children);
}
import {defineComponent, reactive} from \\"../../_snowpack/pkg/vue.js\\";
export default defineComponent({
  name: \\"BarJsxVue\\",
  setup() {
    const state = reactive({
      name: \\"BarJsxVue\\"
    });
    return () => /* @__PURE__ */ jsx(Fragment, null, /* @__PURE__ */ jsx(\\"div\\", {
      className: \\"bar-jsx-vue\\"
    }, state.name));
  }
});"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/Foo.js 1`] = `
"import { Fragment } from '../../_snowpack/pkg/vue.js';
import {createVNode, isVNode} from '../../_snowpack/pkg/vue.js';
const slice = Array.prototype.slice;
export function jsx(tag, props = null, children = null) {
  if (arguments.length > 3 || isVNode(children)) {
    children = slice.call(arguments, 2);
  }
  return createVNode(tag, props, children);
}
import {defineComponent, reactive} from \\"../../_snowpack/pkg/vue.js\\";
import styles from \\"./Foo.module.css.proxy.js\\";
export default defineComponent({
  name: \\"FooTsx\\",
  setup() {
    const state = reactive({
      name: \\"FooTsx\\"
    });
    return () => /* @__PURE__ */ jsx(Fragment, null, /* @__PURE__ */ jsx(\\"div\\", {
      className: styles[\\"foo-tsx\\"]
    }, state.name));
  }
});"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/Foo.module.css 1`] = `
".foo-tsx {
    color: green;
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/Foo.module.css.proxy.js 1`] = `
"
export let code = \\"._foo-tsx_XXXXX_XX {    color: green;}\\";
let json = {\\"foo-tsx\\":\\"_foo-tsx_XXXXX_XX\\"};
export default json;
// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/FooTsx.vue.css 1`] = `
"
.foo-tsx-vue {
  color: green;
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/FooTsx.vue.css.proxy.js 1`] = `
"// [snowpack] add styles to the page (skip if no document exists)
if (typeof document !== 'undefined') {
  const code = \\"/* unsupport scoped css in vue with tsx, jsx*/.foo-tsx-vue {  color: green;}\\";
  const styleEl = document.createElement(\\"style\\");
  const codeEl = document.createTextNode(code);
  styleEl.type = 'text/css';
  styleEl.appendChild(codeEl);
  document.head.appendChild(styleEl);
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/components/FooTsx.vue.js 1`] = `
"import './FooTsx.vue.css.proxy.js';
import { Fragment } from '../../_snowpack/pkg/vue.js';
import {createVNode, isVNode} from '../../_snowpack/pkg/vue.js';
const slice = Array.prototype.slice;
export function jsx(tag, props = null, children = null) {
  if (arguments.length > 3 || isVNode(children)) {
    children = slice.call(arguments, 2);
  }
  return createVNode(tag, props, children);
}
import {defineComponent, reactive} from \\"../../_snowpack/pkg/vue.js\\";
export default defineComponent({
  name: \\"FooTsxVue\\",
  setup() {
    const state = reactive({
      name: \\"FooTsxVue\\"
    });
    return () => /* @__PURE__ */ jsx(Fragment, null, /* @__PURE__ */ jsx(\\"div\\", {
      className: \\"foo-tsx-vue\\"
    }, state.name));
  }
});"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: dist/index.js 1`] = `
"import * as __SNOWPACK_ENV__ from '../_snowpack/env.js';
import.meta.env = __SNOWPACK_ENV__;
import {createApp} from '../_snowpack/pkg/vue.js';
import App from './App.vue.js';
const app = createApp(App);
app.mount('#app');
// Hot Module Replacement (HMR) - Remove this snippet to remove HMR.
// Learn more: https://www.snowpack.dev/concepts/hot-module-replacement
if (undefined /* [snowpack] import.meta.hot */ ) {
  undefined /* [snowpack] import.meta.hot */ .accept();
  undefined /* [snowpack] import.meta.hot */ .dispose(() => {
    app.unmount();
  });
}"
`;

exports[`create-snowpack-app app-template-vue-typescript > build: index.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" type=\\"image/png\\" sizes=\\"32x32\\" href=\\"/favicon-32x32.png\\">
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <meta name=\\"description\\" content=\\"Web site created using create-snowpack-app\\" />
    <title>Snowpack App</title>
  </head>
  <body>
    <div id=\\"app\\"></div>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <script type=\\"module\\" src=\\"/dist/index.js\\"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    -->
  </body>
</html>"
`;
